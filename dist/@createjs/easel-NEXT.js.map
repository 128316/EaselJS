{"version":3,"file":"easel-NEXT.js","sources":["../node_modules/createjs/src/events/Event.js","../node_modules/createjs/src/events/EventDispatcher.js","../node_modules/createjs/src/utils/Ticker.js","../src/utils/UID.js","../src/geom/Point.js","../src/geom/Matrix2D.js","../src/geom/DisplayProps.js","../src/geom/Rectangle.js","../src/filters/Filter.js","../src/filters/BitmapCache.js","../src/display/DisplayObject.js","../src/display/Container.js","../src/events/MouseEvent.js","../src/display/Stage.js","../src/display/StageGL.js","../src/utils/VideoBuffer.js","../src/display/Bitmap.js","../src/display/Sprite.js","../src/display/BitmapText.js","../src/display/DOMElement.js","../src/display/Graphics.js","../src/display/Shadow.js","../src/display/Shape.js","../src/display/SpriteSheet.js","../src/display/Text.js","../src/filters/AlphaMapFilter.js","../src/filters/AlphaMaskFilter.js","../src/filters/BlurFilter.js","../src/filters/ColorFilter.js","../src/filters/ColorMatrix.js","../src/filters/ColorMatrixFilter.js","../src/ui/ButtonHelper.js","../src/ui/Touch.js","../src/utils/SpriteSheetBuilder.js","../src/utils/SpriteSheetUtils.js","../src/utils/WebGLInspector.js","../src/main.js"],"sourcesContent":["/**\n * @license Event\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * A collection of classes that are shared across the CreateJS libraries.\n * Classes required by a library are compiled with that library.\n *\n * @module CreateJS\n * @main CreateJS\n */\n\n/**\n * Contains properties and methods shared by all events for use with {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n * Note that Event objects are often reused, so you should never\n * rely on an event object's state outside of the call stack it was received in.\n *\n * @class Event\n * @module CreateJS\n */\nexport default class Event {\n\n// constructor:\n\t/**\n\t * @param {String} type The event type.\n\t * @param {Boolean} [bubbles=false] Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t */\n\tconstructor (type, bubbles = false, cancelable = false) {\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.target = null;\n\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.currentTarget = null;\n\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.eventPhase = 0;\n\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.bubbles = bubbles;\n\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.cancelable = cancelable;\n\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.timeStamp = new Date().getTime();\n\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.defaultPrevented = false;\n\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.propagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.immediatePropagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.removed = false;\n\t}\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @method preventDefault\n\t */\n\tpreventDefault () {\n\t\tthis.defaultPrevented = this.cancelable;\n\t}\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t */\n\tstopPropagation () {\n\t\tthis.propagationStopped = true;\n\t}\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t */\n\tstopImmediatePropagation () {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t}\n\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t *\n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t *\n\t * @method remove\n\t */\n\tremove () {\n\t\tthis.removed = true;\n\t}\n\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t */\n\tclone () {\n\t\tlet event = new Event(this.type, this.bubbles, this.cancelable);\n\t\tfor (let n in this) {\n\t\t\tif (this.hasOwnProperty(n)) {\n\t\t\t\tevent[n] = this[n];\n\t\t\t}\n\t\t}\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tset (props) {\n\t\tfor (let n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (type=${this.type})]`;\n\t}\n\n}\n","/**\n * @license EventDispatcher\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Event from './Event';\n\n/**\n * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n *\n * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n *\n * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n *\n * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\n * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The\n * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n *\n * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\n * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also\n * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n *\n * <h4>Example</h4>\n * Add EventDispatcher capabilities to the \"MyClass\" class.\n *\n *      EventDispatcher.initialize(MyClass.prototype);\n *\n * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n *\n *      instance.addEventListener(\"eventName\", handlerMethod);\n *      function handlerMethod(event) {\n\t *          console.log(event.target + \" Was Clicked\");\n\t *      }\n *\n * <b>Maintaining proper scope</b><br />\n * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\n * method to subscribe to events simplifies this.\n *\n *      instance.addEventListener(\"click\", function(event) {\n\t *          console.log(instance == this); // false, scope is ambiguous.\n\t *      });\n *\n *      instance.on(\"click\", function(event) {\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n\t *      });\n *\n * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage scope.\n *\n *\n * @class EventDispatcher\n * @module CreateJS\n */\nexport default class EventDispatcher {\n\n// static methods:\n\t/**\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\n\t *\n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\n\t *\n\t * @method initialize\n\t * @static\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\n\t * prototype.\n\t */\n\tstatic initialize (target) {\n\t\tconst p = EventDispatcher.prototype;\n\t\ttarget.addEventListener = p.addEventListener;\n\t\ttarget.on = p.on;\n\t\ttarget.removeEventListener = target.off = p.removeEventListener;\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\n\t\ttarget.hasEventListener = p.hasEventListener;\n\t\ttarget.dispatchEvent = p.dispatchEvent;\n\t\ttarget._dispatchEvent = p._dispatchEvent;\n\t\ttarget.willTrigger = p.willTrigger;\n\t}\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\t/**\n\t\t * @protected\n\t\t * @property _listeners\n\t\t * @type Object\n\t\t */\n\t\tthis._listeners = null;\n\n\t\t/**\n\t\t * @protected\n\t\t * @property _captureListeners\n\t\t * @type Object\n\t\t */\n\t\tthis._captureListeners = null;\n\t}\n\n// public methods:\n\t/**\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n\t * multiple callbacks getting fired.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.addEventListener(\"click\", handleClick);\n\t *      function handleClick(event) {\n\t *         // Click happened.\n\t *      }\n\t *\n\t * @method addEventListener\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t * the event is dispatched.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\n\t */\n\taddEventListener (type, listener, useCapture) {\n\t\tlet listeners;\n\t\tif (useCapture) {\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\n\t\t} else {\n\t\t\tlisteners = this._listeners = this._listeners||{};\n\t\t}\n\t\tlet arr = listeners[type];\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\n\t\tarr = listeners[type]; // remove may have deleted the array\n\t\tif (!arr) { listeners[type] = [listener];  }\n\t\telse { arr.push(listener); }\n\t\treturn listener;\n\t}\n\n\t/**\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\n\t *\n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\n\t *\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n\t * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n\t * to `on` with the same params will create multiple listeners.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t * \t\tfunction handleClick(evt, data) {\n\t * \t\t\tdata.count -= 1;\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t * \t\t\tif (data.count == 0) {\n\t * \t\t\t\talert(\"clicked 3 times!\");\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\n\t * \t\t\t\t// alternately: evt.remove();\n\t * \t\t\t}\n\t * \t\t}\n\t *\n\t * @method on\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\n\t * the event is dispatched.\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n\t */\n\ton (type, listener, scope = null, once = false, data = {}, useCapture = false) {\n\t\tif (listener.handleEvent) {\n\t\t\tscope = scope||listener;\n\t\t\tlistener = listener.handleEvent;\n\t\t}\n\t\tscope = scope||this;\n\t\treturn this.addEventListener(type, function(evt) {\n\t\t\tlistener.call(scope, evt, data);\n\t\t\tonce&&evt.remove();\n\t\t}, useCapture);\n\t}\n\n\t/**\n\t * Removes the specified event listener.\n\t *\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n\t * closure will not work.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.removeEventListener(\"click\", handleClick);\n\t *\n\t * @method removeEventListener\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener The listener function or object.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\tremoveEventListener (type, listener, useCapture) {\n\t\tconst listeners = useCapture ? this._captureListeners : this._listeners;\n\t\tif (!listeners) { return; }\n\t\tconst arr = listeners[type];\n\t\tif (!arr) { return; }\n\t\tconst l = arr.length;\n\t\tfor (let i=0; i<l; i++) {\n\t\t\tif (arr[i] == listener) {\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\n\t\t\t\telse { arr.splice(i,1); }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n\t * .on method.\n\t *\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See\n\t * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\n\t *\n\t * @method off\n\t * @param {String} type The string type of the event.\n\t * @param {Function | Object} listener The listener function or object.\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\toff (type, listener, useCapture) {\n\t\tthis.removeEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Removes all listeners for the specified type, or all listeners of all types.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      // Remove all listeners\n\t *      displayObject.removeAllEventListeners();\n\t *\n\t *      // Remove all click listeners\n\t *      displayObject.removeAllEventListeners(\"click\");\n\t *\n\t * @method removeAllEventListeners\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\n\t */\n\tremoveAllEventListeners (type) {\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\n\t\telse {\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the specified event to all listeners.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      // Use a string event\n\t *      this.dispatchEvent(\"complete\");\n\t *\n\t *      // Use an Event instance\n\t *      var event = new createjs.Event(\"progress\");\n\t *      this.dispatchEvent(event);\n\t *\n\t * @method dispatchEvent\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n\t * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\n\t * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\n\t * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n\t */\n\tdispatchEvent (eventObj, bubbles = false, cancelable = false) {\n\t\tif (typeof eventObj == \"string\") {\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\n\t\t\tconst listeners = this._listeners;\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\n\t\t\teventObj = new Event(eventObj, bubbles, cancelable);\n\t\t} else if (eventObj.target && eventObj.clone) {\n\t\t\t// redispatching an active event object, so clone it:\n\t\t\teventObj = eventObj.clone();\n\t\t}\n\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\n\n\t\tif (!eventObj.bubbles || !this.parent) {\n\t\t\tthis._dispatchEvent(eventObj, 2);\n\t\t} else {\n\t\t\tlet top = this, i;\n\t\t\tconst list = [top];\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\n\t\t\tconst l = list.length;\n\n\t\t\t// capture & atTarget\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\n\t\t\t}\n\t\t\t// bubbling\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\n\t\t\t}\n\t\t}\n\t\treturn !eventObj.defaultPrevented;\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type.\n\t * @method hasEventListener\n\t * @param {String} type The string type of the event.\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\n\t */\n\thasEventListener (type) {\n\t\tconst listeners = this._listeners, captureListeners = this._captureListeners;\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n\t * specified type is dispatched from this object, it will trigger at least one listener.\n\t *\n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\n\t * event flow for a listener, not just this object.\n\t * @method willTrigger\n\t * @param {String} type The string type of the event.\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\n\t */\n\twillTrigger (type) {\n\t\tlet o = this;\n\t\twhile (o) {\n\t\t\tif (o.hasEventListener(type)) { return true; }\n\t\t\to = o.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn \"[EventDispatcher]\";\n\t}\n\n\t// private methods:\n\t/**\n\t * @method _dispatchEvent\n\t * @param {Object | String | Event} eventObj\n\t * @param {Object} eventPhase\n\t * @protected\n\t */\n\t_dispatchEvent (eventObj, eventPhase) {\n\t\tconst listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\n\t\tlet l;\n\t\tif (eventObj && listeners) {\n\t\t\tlet arr = listeners[eventObj.type];\n\t\t\tif (!arr||!(l=arr.length)) { return; }\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\n\t\t\teventObj.removed = false;\n\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\t\t\tfor (let i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\n\t\t\t\tlet o = arr[i];\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\n\t\t\t\telse { o(eventObj); }\n\t\t\t\tif (eventObj.removed) {\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\n\t\t\t\t\teventObj.removed = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n","/**\n * @license Ticker\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport Event from \"../events/Event\";\n\n/**\n * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n * event to be notified when a set time interval has elapsed.\n *\n * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n * can not be instantiated.\n *\n * <h4>Example</h4>\n *\n *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n *      function handleTick(event) {\n *          // Actions carried out each tick (aka frame)\n *          if (!event.paused) {\n *              // Actions carried out when the Ticker is not paused.\n *          }\n *      }\n *\n * @class TickerAPI\n * @extends EventDispatcher\n * @module CreateJS\n */\nclass TickerAPI extends EventDispatcher {\n\n// constructor:\n\t/**\n\t * @param name {String} The name assigned to this instance.\n\t * @constructor\n\t * TODO-ES6: Pass timingMode, maxDelta, paused values as instantiation arguments?\n\t */\n\tconstructor (name) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The name of this instance.\n\t\t * @property name\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\t\t/**\n\t\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n\t\t * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n\t\t * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n\t\t * @property timingMode\n\t\t * @type {String}\n\t\t * @default Ticker.TIMEOUT\n\t\t */\n\t\tthis.timingMode = TickerAPI.TIMEOUT;\n\n\t\t/**\n\t\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t\t * (ex. maxDelta=50 when running at 40fps).\n\t\t *\n\t\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t\t * when using both delta and other values.\n\t\t *\n\t\t * If 0, there is no maximum.\n\t\t * @property maxDelta\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.maxDelta = 0;\n\n\t\t/**\n\t\t * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n\t\t * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n\t\t * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n\t\t * info.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t\t *      createjs.Ticker.paused = true;\n\t\t *      function handleTick(event) {\n\t\t *          console.log(event.paused,\n\t\t *          \tcreatejs.Ticker.getTime(false),\n\t\t *          \tcreatejs.Ticker.getTime(true));\n\t\t *      }\n\t\t *\n\t\t * @property paused\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n// private properties:\n\t\t/**\n\t\t * @property _inited\n\t\t * @type {Boolean}\n\t\t * @protected\n\t\t */\n\t\tthis._inited = false;\n\n\t\t/**\n\t\t * @property _startTime\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._startTime = 0;\n\n\t\t/**\n\t\t * @property _pausedTime\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._pausedTime = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed\n\t\t * @property _ticks\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._ticks = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed while Ticker has been paused\n\t\t * @property _pausedTicks\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._pausedTicks = 0;\n\n\t\t/**\n\t\t * @property _interval\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._interval = 50;\n\n\t\t/**\n\t\t * @property _lastTime\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._lastTime = 0;\n\n\t\t/**\n\t\t * @property _times\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis._times = null;\n\n\t\t/**\n\t\t * @property _tickTimes\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis._tickTimes = null;\n\n\t\t/**\n\t\t * Stores the timeout or requestAnimationFrame id.\n\t\t * @property _timerId\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis._timerId = null;\n\n\t\t/**\n\t\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t\t * if that property changed and a tick hasn't fired.\n\t\t * @property _raf\n\t\t * @type {Boolean}\n\t\t * @protected\n\t\t */\n\t\tthis._raf = true;\n\t}\n\n// accessor properties:\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t * @property interval\n\t * @static\n\t * @type {Number}\n\t */\n\tget interval () {\n\t\treturn this._interval;\n\t}\n\n\tset interval (interval) {\n\t\tthis._interval = interval;\n\t\tif (!this._inited) { return; }\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t * @property framerate\n\t * @static\n\t * @type {Number}\n\t */\n\tget framerate () {\n\t\treturn 1000/this._interval;\n\t}\n\n\tset framerate (fps) {\n\t\tthis.interval = 1000/fps;\n\t}\n\n// public methods:\n\t/**\n\t * Call createjs.Ticker.create() to get a new TickerAPI instance.\n\t * It is not initalized by default and its ticks are not synched with any other instance.\n\t *\n\t * @param name {String} The name given to the new instance.\n\t * @method create\n\t * @return {TickerAPI} A new TickerAPI instance.\n\t */\n\tcreate (name) {\n\t\treturn new TickerAPI(name);\n\t}\n\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t * @method init\n\t */\n\tinit () {\n\t\tif (this._inited) { return; }\n\t\tthis._inited = true;\n\t\tthis._times = [];\n\t\tthis._tickTimes = [];\n\t\tthis._startTime = this._getTime();\n\t\tthis._times.push(this._lastTime = 0);\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t * @method reset\n\t */\n\treset () {\n\t\tif (this._raf) {\n\t\t\tlet f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf&&f(this._timerId);\n\t\t} else {\n\t\t\tclearTimeout(this._timerId);\n\t\t}\n\t\tthis.removeAllEventListeners(\"tick\");\n\t\tthis._timerId = this._times = this._tickTimes = null;\n\t\tthis._startTime = this._lastTime = this._ticks = 0;\n\t\tthis._inited = false;\n\t}\n\n\t/**\n\t * Init the Ticker instance if it hasn't been already.\n\t * Docced in superclass.\n\t */\n\taddEventListener (type, listener, useCapture) {\n\t\t!this._inited && this.init();\n\t\treturn super.addEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack.\n\t *\n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between\n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that\n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t * @method getMeasuredTickTime\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {Number} The average time spent in a tick in milliseconds.\n\t */\n\tgetMeasuredTickTime (ticks) {\n\t\tlet times=this._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks||(this.framerate|0));\n\t\tlet ttl = times.reduce((a, b) => a + b, 0);\n\t\treturn ttl/ticks;\n\t}\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t * @method getMeasuredFPS\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t */\n\tgetMeasuredFPS (ticks) {\n\t\tlet times = this._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length-1, ticks||(this.framerate|0));\n\t\treturn 1000/((times[0]-times[ticks])/ticks);\n\t}\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t * @method getTime\n\t * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t */\n\tgetTime (runTime = false) {\n\t\treturn this._startTime ? this._getTime() - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object.\n\t * @method getEventTime\n\t * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tgetEventTime (runTime = false) {\n\t\treturn this._startTime ? (this._lastTime || this._startTime) - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t * @method getTicks\n\t * @param {Boolean} [pauseable=false] Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value.\n\t * @return {Number} of ticks that have been broadcast.\n\t */\n\tgetTicks (pauseable = false) {\n\t\treturn this._ticks - (pauseable ? this._pausedTicks : 0);\n\t}\n\n\n// private methods:\n\t/**\n\t * @method _handleSynch\n\t * @protected\n\t */\n\t_handleSynch () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (this._getTime() - this._lastTime >= (this._interval-1)*0.97) {\n\t\t\tthis._tick();\n\t\t}\n\t}\n\n\t/**\n\t * @method _handleRAF\n\t * @protected\n\t */\n\t_handleRAF () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @method _handleTimeout\n\t * @protected\n\t */\n\t_handleTimeout () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @method _setupTick\n\t * @protected\n\t */\n\t_setupTick () {\n\t\tif (this._timerId != null) { return; } // avoid duplicates\n\n\t\tlet mode = this.timingMode || (this._raf && TickerAPI.RAF); // TODO-ES6: Verify that this is desired, since Ticker.useRAF was removed.\n\t\tif (mode == TickerAPI.RAF_SYNCHED || mode == TickerAPI.RAF) {\n\t\t\tlet f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tthis._timerId = f(mode == TickerAPI.RAF ? this._handleRAF.bind(this) : this._handleSynch.bind(this));\n\t\t\t\tthis._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._raf = false;\n\t\tthis._timerId = setTimeout(this._handleTimeout.bind(this), this._interval);\n\t}\n\n\t/**\n\t * @method _tick\n\t * @protected\n\t */\n\t_tick () {\n\t\tlet paused = this.paused;\n\t\tlet time = this._getTime();\n\t\tlet elapsedTime = time-this._lastTime;\n\t\tthis._lastTime = time;\n\t\tthis._ticks++;\n\n\t\tif (paused) {\n\t\t\tthis._pausedTicks++;\n\t\t\tthis._pausedTime += elapsedTime;\n\t\t}\n\n\t\tif (this.hasEventListener(\"tick\")) {\n\t\t\tlet event = new Event(\"tick\");\n\t\t\tlet maxDelta = this.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time-this._pausedTime;\n\t\t\tthis.dispatchEvent(event);\n\t\t}\n\n\t\tthis._tickTimes.unshift(this._getTime()-time);\n\t\twhile (this._tickTimes.length > 100) { this._tickTimes.pop(); }\n\n\t\tthis._times.unshift(time);\n\t\twhile (this._times.length > 100) { this._times.pop(); }\n\t}\n\n\t/**\n\t * @method _getTime\n\t * @protected\n\t */\n\t_getTime () {\n\t\tlet now = window.performance.now;\n\t\treturn ((now&&now.call(performance))||(new Date().getTime())) - this._startTime;\n\t}\n\n}\n\n// constants:\n/**\n * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n * dispatches the tick when the time is within a certain threshold.\n *\n * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n * gaining the benefits of that API (screen synch, background throttling).\n *\n * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n * framerates of 10, 12, 15, 20, and 30 work well.\n *\n * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n * supported.\n * @property RAF_SYNCHED\n * @static\n * @type {String}\n * @default \"synched\"\n * @readonly\n */\nTickerAPI.RAF_SYNCHED = \"synched\";\n\n/**\n * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n * event object's \"delta\" properties to make this easier.\n *\n * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n * supported.\n * @property RAF\n * @static\n * @type {String}\n * @default \"raf\"\n * @readonly\n */\nTickerAPI.RAF = \"raf\";\n\n/**\n * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n * @property TIMEOUT\n * @static\n * @type {String}\n * @default \"timeout\"\n * @readonly\n */\nTickerAPI.TIMEOUT = \"timeout\";\n\n// events:\n/**\n * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n *\n * <h4>Example</h4>\n *\n *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n *      function handleTick(event) {\n *          console.log(\"Paused:\", event.paused, event.delta);\n *      }\n *\n * @event tick\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n * @param {Boolean} paused Indicates whether the ticker is currently paused.\n * @param {Number} delta The time elapsed in ms since the last tick.\n * @param {Number} time The total time in ms since Ticker was initialized.\n * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n * @since 0.6.0\n */\n\n/**\n * The Ticker object is a singleton instance of the TickerAPI class.\n * See the {{#crossLink \"TickerAPI\"}}{{/crossLink}} documentation for its usage.\n * @class Ticker\n * @static\n * @module CreateJS\n */\nconst Ticker = new TickerAPI(\"createjs.global\");\nexport { Ticker as default };\n","/*\n* @license UID\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nlet _nextID = 0;\n\n/**\n * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\n * and should not be instantiated.\n * @class UID\n * @static\n * @module EaselJS\n */\nexport default class UID {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tthrow \"UID cannot be instantiated\";\n\t}\n\n// private static properties:\n\t/**\n\t * @property _nextID\n\t * @type Number\n\t * @protected\n\t */\n\tstatic get _nextID () { return _nextID; }\n\tstatic set _nextID (nextID) { _nextID = nextID; }\n\n// public static methods:\n\t/**\n\t * Returns the next unique id.\n\t * @method get\n\t * @return {Number} The next unique id\n\t * @static\n\t */\n\tstatic get () {\n\t\treturn UID._nextID++;\n\t}\n\n}\n","/*\n* @license Point\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\n/**\n * Represents a point on a 2 dimensional x / y coordinate system.\n *\n * <h4>Example</h4>\n *\n *      var point = new createjs.Point(0, 100);\n *\n * @class Point\n */\nexport default class Point {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @constructor\n\t */\n\tconstructor (x = 0, y = 0) {\n\t\tthis.setValues(x, y);\n\n// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t}\n\n// public methods:\n\t/**\n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @return {Point} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tsetValues (x = 0, y = 0) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copies all properties from the specified point to this point.\n\t * @method copy\n\t * @param {Point} point The point to copy properties from.\n\t * @return {Point} This point. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tcopy (point) {\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of the Point instance.\n\t * @method clone\n\t * @return {Point} a clone of the Point instance.\n\t */\n\tclone () {\n\t\treturn new Point(this.x, this.y);\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (x=${this.x} y=${this.y})]`;\n\t}\n\n}\n","/*\n* @license Matrix2D\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\nimport Point from \"./Point\";\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n */\nexport default class Matrix2D {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t */\n\tconstructor (a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n\t\tthis.setValues(a,b,c,d,tx,ty);\n\n// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Position (0, 0) in a 3x3 affine transformation matrix.\n\t\t * @property a\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Position (0, 1) in a 3x3 affine transformation matrix.\n\t\t * @property b\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Position (1, 0) in a 3x3 affine transformation matrix.\n\t\t * @property c\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Position (1, 1) in a 3x3 affine transformation matrix.\n\t\t * @property d\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Position (2, 0) in a 3x3 affine transformation matrix.\n\t\t * @property tx\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Position (2, 1) in a 3x3 affine transformation matrix.\n\t\t * @property ty\n\t\t * @type Number\n\t\t */\n\t}\n\n// public methods:\n\t/**\n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t * @return {Matrix2D} This instance. Useful for chaining method calls.\n\t*/\n\tsetValues (a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.d = d;\n\t\tthis.tx = tx;\n\t\tthis.ty = ty;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends the specified matrix properties to this matrix. All parameters are required.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method append\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tappend (a, b, c, d, tx, ty) {\n\t\tlet a1 = this.a;\n\t\tlet b1 = this.b;\n\t\tlet c1 = this.c;\n\t\tlet d1 = this.d;\n\t\tif (a != 1 || b != 0 || c != 0 || d != 1) {\n\t\t\tthis.a  = a1*a+c1*b;\n\t\t\tthis.b  = b1*a+d1*b;\n\t\t\tthis.c  = a1*c+c1*d;\n\t\t\tthis.d  = b1*c+d1*d;\n\t\t}\n\t\tthis.tx = a1*tx+c1*ty+this.tx;\n\t\tthis.ty = b1*tx+d1*ty+this.ty;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Prepends the specified matrix properties to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * All parameters are required.\n\t * @method prepend\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tprepend (a, b, c, d, tx, ty) {\n\t\tlet a1 = this.a;\n\t\tlet c1 = this.c;\n\t\tlet tx1 = this.tx;\n\n\t\tthis.a  = a*a1+c*this.b;\n\t\tthis.b  = b*a1+d*this.b;\n\t\tthis.c  = a*c1+c*this.d;\n\t\tthis.d  = b*c1+d*this.d;\n\t\tthis.tx = a*tx1+c*this.ty+tx;\n\t\tthis.ty = b*tx1+d*this.ty+ty;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method appendMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tappendMatrix (matrix) {\n\t\treturn this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t}\n\n\t/**\n\t * Prepends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t *\n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = o.getMatrix();\n\t * \twhile (o = o.parent) {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\to.prependMatrix(o.getMatrix());\n\t * \t}\n\t * @method prependMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tprependMatrix (matrix) {\n\t\treturn this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t}\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n\t * For example, you can use this to generate a matrix representing the transformations of a display object:\n\t *\n\t * \tvar mtx = new createjs.Matrix2D();\n\t * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n\t * @method appendTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tappendTransform (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tlet r, cos, sin;\n\t\tif (rotation%360) {\n\t\t\tr = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tcos = Math.cos(r);\n\t\t\tsin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single append operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t} else {\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\n\t\tif (regX || regY) {\n\t\t\t// append the registration offset:\n\t\t\tthis.tx -= regX*this.a+regY*this.c;\n\t\t\tthis.ty -= regX*this.b+regY*this.d;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t *\n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = new createjs.Matrix2D();\n\t * \tdo  {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t * \t} while (o = o.parent);\n\t *\n\t * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n\t * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n\t * @method prependTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tprependTransform (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tlet r, cos, sin;\n\t\tif (rotation%360) {\n\t\t\tr = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tcos = Math.cos(r);\n\t\t\tsin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (regX || regY) {\n\t\t\t// prepend the registration offset:\n\t\t\tthis.tx -= regX; this.ty -= regY;\n\t\t}\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single prepend operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t} else {\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies a clockwise rotation transformation to the matrix.\n\t * @method rotate\n\t * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\trotate (angle) {\n\t\tangle *= Matrix2D.DEG_TO_RAD;\n\t\tlet cos = Math.cos(angle);\n\t\tlet sin = Math.sin(angle);\n\n\t\tlet a1 = this.a;\n\t\tlet b1 = this.b;\n\n\t\tthis.a = a1*cos+this.c*sin;\n\t\tthis.b = b1*cos+this.d*sin;\n\t\tthis.c = -a1*sin+this.c*cos;\n\t\tthis.d = -b1*sin+this.d*cos;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies a skew transformation to the matrix.\n\t * @method skew\n\t * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @param {Number} skewY The amount to skew vertically in degrees.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tskew (skewX, skewY) {\n\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Applies a scale transformation to the matrix.\n\t * @method scale\n\t * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.\n\t * @param {Number} y The amount to scale vertically.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tscale (x, y) {\n\t\tthis.a *= x;\n\t\tthis.b *= x;\n\t\tthis.c *= y;\n\t\tthis.d *= y;\n\t\t//this.tx *= x;\n\t\t//this.ty *= y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Translates the matrix on the x and y axes.\n\t * @method translate\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\ttranslate (x, y) {\n\t\tthis.tx += this.a*x + this.c*y;\n\t\tthis.ty += this.b*x + this.d*y;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\n\t * @method identity\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tidentity () {\n\t\tthis.a = this.d = 1;\n\t\tthis.b = this.c = this.tx = this.ty = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Inverts the matrix, causing it to perform the opposite transformation.\n\t * @method invert\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t */\n\tinvert () {\n\t\tlet a1 = this.a;\n\t\tlet b1 = this.b;\n\t\tlet c1 = this.c;\n\t\tlet d1 = this.d;\n\t\tlet tx1 = this.tx;\n\t\tlet n = a1*d1-b1*c1;\n\n\t\tthis.a = d1/n;\n\t\tthis.b = -b1/n;\n\t\tthis.c = -c1/n;\n\t\tthis.d = a1/n;\n\t\tthis.tx = (c1*this.ty-d1*tx1)/n;\n\t\tthis.ty = -(a1*this.ty-b1*tx1)/n;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true if the matrix is an identity matrix.\n\t * @method isIdentity\n\t * @return {Boolean}\n\t */\n\tisIdentity () {\n\t\treturn this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n\t}\n\n\t/**\n\t * Returns true if this matrix is equal to the specified matrix (all property values are equal).\n\t * @method equals\n\t * @param {Matrix2D} matrix The matrix to compare.\n\t * @return {Boolean}\n\t */\n\tequals (matrix) {\n\t\treturn this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n\t}\n\n\t/**\n\t * Transforms a point according to this matrix.\n\t * @method transformPoint\n\t * @param {Number} x The x component of the point to transform.\n\t * @param {Number} y The y component of the point to transform.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.\n\t * @return {Point} This matrix. Useful for chaining method calls.\n\t */\n\ttransformPoint (x, y, pt = new Point()) {\n\t\tpt.x = x*this.a+y*this.c+this.tx;\n\t\tpt.y = x*this.b+y*this.d+this.ty;\n\t\treturn pt;\n\t}\n\n\t/**\n\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\n\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\n\t * results.\n\t * @method decompose\n\t * @param {Object} [target={}] The object to apply the transform properties to. If null, then a new object will be returned.\n\t * @return {Object} The target, or a new generic object with the transform properties applied.\n\t*/\n\tdecompose (target = {}) {\n\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative\n\t\ttarget.x = this.tx;\n\t\ttarget.y = this.ty;\n\t\ttarget.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n\t\ttarget.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n\n\t\tlet skewX = Math.atan2(-this.c, this.d);\n\t\tlet skewY = Math.atan2(this.b, this.a);\n\n\t\tlet delta = Math.abs(1-skewX/skewY);\n\t\tif (delta < 0.00001) { // effectively identical, can use rotation:\n\t\t\ttarget.rotation = skewY/Matrix2D.DEG_TO_RAD;\n\t\t\tif (this.a < 0 && this.d >= 0) {\n\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\n\t\t\t}\n\t\t\ttarget.skewX = target.skewY = 0;\n\t\t} else {\n\t\t\ttarget.skewX = skewX/Matrix2D.DEG_TO_RAD;\n\t\t\ttarget.skewY = skewY/Matrix2D.DEG_TO_RAD;\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Copies all properties from the specified matrix to this matrix.\n\t * @method copy\n\t * @param {Matrix2D} matrix The matrix to copy properties from.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tcopy (matrix) {\n\t\treturn this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t}\n\n\t/**\n\t * Returns a clone of the Matrix2D instance.\n\t * @method clone\n\t * @return {Matrix2D} a clone of the Matrix2D instance.\n\t */\n\tclone () {\n\t\treturn new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty})]`;\n\t}\n\n}\n\n// constants:\n/**\n * Multiplier for converting degrees to radians. Used internally by Matrix2D.\n * @property DEG_TO_RAD\n * @static\n * @final\n * @type Number\n * @readonly\n */\n// static public properties:\n/**\n * An identity matrix, representing a null transformation.\n * @property identity\n * @static\n * @type Matrix2D\n * @readonly\n */\n{\n\tMatrix2D.DEG_TO_RAD = Math.PI/180;\n\tMatrix2D.identity = new Matrix2D();\n}\n","/*\n* @license DisplayProps\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\nimport Matrix2D from \"./Matrix2D\";\n\n/**\n * Used for calculating and encapsulating display related properties.\n * @class DisplayProps\n */\nexport default class DisplayProps {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=1] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.\n\t */\n\tconstructor (visible = true, alpha = 1, shadow, compositeOperation, matrix) {\n\t\tthis.setValues(visible, alpha, shadow, compositeOperation, matrix);\n\n// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Property representing the alpha that will be applied to a display object.\n\t\t * @property alpha\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Property representing the shadow that will be applied to a display object.\n\t\t * @property shadow\n\t\t * @type Shadow\n\t\t */\n\n\t\t/**\n\t\t * Property representing the compositeOperation that will be applied to a display object.\n\t\t * You can find a list of valid composite operations at:\n\t\t * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing</a>\n\t\t * @property compositeOperation\n\t\t * @type String\n\t\t */\n\n\t\t/**\n\t\t * Property representing the value for visible that will be applied to a display object.\n\t\t * @property visible\n\t\t * @type Boolean\n\t\t */\n\n\t\t/**\n\t\t * The transformation matrix that will be applied to a display object.\n\t\t * @property matrix\n\t\t * @type Matrix2D\n\t\t */\n\t}\n\n// public methods:\n\t/**\n\t * Reinitializes the instance with the specified values.\n\t * @method setValues\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=1] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tsetValues (visible = true, alpha = 1, shadow, compositeOperation, matrix) {\n\t\tthis.visible = visible;\n\t\tthis.alpha = alpha;\n\t\tthis.shadow = shadow;\n\t\tthis.compositeOperation = compositeOperation;\n\t\tthis.matrix = matrix || (this.matrix&&this.matrix.identity()) || new Matrix2D();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Appends the specified display properties. This is generally used to apply a child's properties its parent's.\n\t * @method append\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tappend (visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = shadow || this.shadow;\n\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.appendMatrix(matrix);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\n\t * For example, to get the combined display properties that would be applied to a child, you could use:\n\t *\n\t * \tvar o = myDisplayObject;\n\t * \tvar props = new createjs.DisplayProps();\n\t * \tdo {\n\t * \t\t// prepend each parent's props in turn:\n\t * \t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n\t * \t} while (o = o.parent);\n\t *\n\t * @method prepend\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tprepend (visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = this.shadow || shadow;\n\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.prependMatrix(matrix);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets this instance and its matrix to default values.\n\t * @method identity\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tidentity () {\n\t\tthis.visible = true;\n\t\tthis.alpha = 1;\n\t\tthis.shadow = this.compositeOperation = null;\n\t\tthis.matrix.identity();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of the DisplayProps instance. Clones the associated matrix.\n\t * @method clone\n\t * @return {DisplayProps} a clone of the DisplayProps instance.\n\t */\n\tclone () {\n\t\treturn new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n\t}\n\n}\n","/*\n* @license Rectangle\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n *\n * <h4>Example</h4>\n *\n *      var rect = new createjs.Rectangle(0, 0, 100, 100);\n *\n * @class Rectangle\n * @module EaselJS\n */\nexport default class Rectangle {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t */\n\tconstructor (x = 0, y = 0, width = 0, height = 0) {\n\t\tthis.setValues(x, y, width, height);\n\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Width.\n\t\t * @property width\n\t\t * @type Number\n\t\t */\n\n\t\t/**\n\t\t * Height.\n\t\t * @property height\n\t\t * @type Number\n\t\t */\n\t}\n\n// public methods:\n\t/**\n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tsetValues (x = 0, y = 0, width = 0, height = 0) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Extends the rectangle's bounds to include the described point or rectangle.\n\t * @method extend\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\textend (x, y, width = 0, height = 0) {\n\t\tif (x+width > this.x+this.width) { this.width = x+width-this.x; }\n\t\tif (y+height > this.y+this.height) { this.height = y+height-this.y; }\n\t\tif (x < this.x) { this.width += this.x-x; this.x = x; }\n\t\tif (y < this.y) { this.height += this.y-y; this.y = y; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the specified padding to the rectangle's bounds.\n\t * @method pad\n\t * @param {Number} top\n\t * @param {Number} left\n\t * @param {Number} bottom\n\t * @param {Number} right\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tpad (top, left, bottom, right) {\n\t\tthis.x -= left;\n\t\tthis.y -= top;\n\t\tthis.width += left+right;\n\t\tthis.height += top+bottom;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Copies all properties from the specified rectangle to this rectangle.\n\t * @method copy\n\t * @param {Rectangle} rectangle The rectangle to copy properties from.\n\t * @return {Rectangle} This rectangle. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tcopy (rectangle) {\n\t\treturn this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n\t}\n\n\t/**\n\t * Returns true if this rectangle fully encloses the described point or rectangle.\n\t * @method contains\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Boolean} True if the described point or rectangle is contained within this rectangle.\n\t*/\n\tcontains (x, y, width = 0, height = 0) {\n\t\treturn (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);\n\t}\n\n\t/**\n\t * Returns a new rectangle which contains this rectangle and the specified rectangle.\n\t * @method union\n\t * @param {Rectangle} rect The rectangle to calculate a union with.\n\t * @return {Rectangle} A new rectangle describing the union.\n\t*/\n\tunion (rect) {\n\t\treturn this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n\t}\n\n\t/**\n\t * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\n\t * or null if they do not intersect.\n\t * @method intersection\n\t * @param {Rectangle} rect The rectangle to calculate an intersection with.\n\t * @return {Rectangle} A new rectangle describing the intersection or null.\n\t*/\n\tintersection (rect) {\n\t\tlet x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;\n\t\tif (this.x > x1) { x1 = this.x; }\n\t\tif (this.y > y1) { y1 = this.y; }\n\t\tif (this.x + this.width < x2) { x2 = this.x + this.width; }\n\t\tif (this.y + this.height < y2) { y2 = this.y + this.height; }\n\t\treturn (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2-x1, y2-y1);\n\t}\n\n\t/**\n\t * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.\n\t * @method intersects\n\t * @param {Rectangle} rect The rectangle to compare.\n\t * @return {Boolean} True if the rectangles intersect.\n\t*/\n\tintersects (rect) {\n\t\treturn (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);\n\t}\n\n\t/**\n\t * Returns true if the width or height are equal or less than 0.\n\t * @method isEmpty\n\t * @return {Boolean} True if the rectangle is empty.\n\t*/\n\tisEmpty () {\n\t\treturn this.width <= 0 || this.height <= 0;\n\t}\n\n\t/**\n\t * Returns a clone of the Rectangle instance.\n\t * @method clone\n\t * @return {Rectangle} a clone of the Rectangle instance.\n\t */\n\tclone () {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (x=${this.x} y=${this.y} width=${this.width} height=${this.height})]`;\n\t}\n\n}\n","/*\n* @license Filter\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\n/**\n * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\n * the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n * {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n *\n * <h4>Example</h4>\n *\n *      myInstance.filters = [\n *          new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n *          new createjs.BlurFilter(5, 5, 10)\n *      ];\n *      myInstance.cache(0,0, 100, 100);\n *\n * Note that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\n * margins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\n * will cause an object to feather outwards, resulting in a margin around the shape.\n *\n * <h4>EaselJS Filters</h4>\n * EaselJS comes with a number of pre-built filters:\n * <ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n *      <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n *      <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n *      <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n *      <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n * </ul>\n *\n * @class Filter\n */\nexport default class Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\t/**\n\t\t * A flag stating that this filter uses a context draw mode and cannot be batched into imageData processing.\n\t\t * @property usesContext\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.usesContext = false;\n\n\t\t/**\n\t\t * Another filter that is required to act as part of this filter and created and managed under the hood.\n\t\t * @private\n\t\t * @property _multiPass\n\t\t * @type {Filter}\n\t\t * @default null\n\t\t */\n\t\tthis._multiPass = null;\n\n\t\t/**\n\t\t * Pre-processing shader code, will be parsed before being fed in.\n\t\t * This should be based upon StageGL.SHADER_VERTEX_BODY_REGULAR\n\t\t * @property VTX_SHADER\n\t\t * @virtual\n\t\t * @type {String}\n\t\t * @readonly\n\t\t */\n\t\tthis.VTX_SHADER_BODY = null;\n\n\t\t/**\n\t\t * Pre-processing shader code, will be parsed before being fed in.\n\t\t * This should be based upon StageGL.SHADER_FRAGMENT_BODY_REGULAR\n\t\t * @property FRAG_SHADER\n\t\t * @virtual\n\t\t * @type {String}\n\t\t * @readonly\n\t\t */\n\t\tthis.FRAG_SHADER_BODY = null;\n\t}\n\n// public methods:\n\t/**\n\t * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.\n\t * @method getBounds\n\t * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.\n\t * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.\n\t */\n\tgetBounds (rect) {\n\t\treturn rect;\n\t}\n\n\t/**\n\t * Assign any unique uniforms or other setup functionality here.\n\t * @method shaderParamSetup\n\t * @virtual\n\t * @param {WebGLContext} gl The context associated with the stage performing the render.\n\t * @param {StageGL} stage The stage instance that will be rendering.\n\t * @param {ShaderProgram} shaderProgram The compiled shader that is going to be sued to perform the render.\n\t */\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\n\t}\n\n\t/**\n\t * Applies the filter to the specified context.\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t */\n\tapplyFilter (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\t// this is the default behaviour because most filters access pixel data. It is overridden when not needed.\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\t\ttry {\n\t\t\tlet imageData = ctx.getImageData(x, y, width, height);\n\t\t\tif (this._applyFilter(imageData)) {\n\t\t\t\ttargetCtx.putImageData(imageData, targetX, targetY);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (e) {}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\t/**\n\t * Returns a clone of this Filter instance.\n\t * @method clone\n\t * @return {Filter} A clone of the current Filter instance.\n\t */\n\tclone () {\n\t\treturn new Filter();\n\t}\n\n// private methods:\n\t/**\n\t * @method _applyFilter\n\t * @param {ImageData} imageData Target ImageData instance.\n\t * @return {Boolean}\n\t */\n\t_applyFilter (imageData) {\n\t\treturn true;\n\t}\n\n}\n","/*\n* @license Filter\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport Filter from \"./Filter\";\nimport Rectangle from \"../geom/Rectangle\";\nimport StageGL from \"../display/StageGL\";\n\n/**\n * The BitmapCache is an internal representation of all the cache properties and logic required in order to \"cache\"\n * an object. This information and functionality used to be located on a {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n * method in {{#crossLink \"DisplayObject\"}}{{/crossLink}}, but was moved to its own class.\n *\n * Caching in this context is purely visual, and will render the DisplayObject out into an image to be used instead\n * of the object. The actual cache itself is still stored on the target with the {{#crossLink \"DisplayObject/cacheCanvas:property\"}}{{/crossLink}}.\n *\n * Working with a singular image like a {{#crossLink \"Bitmap\"}}{{/crossLink}}, there is little benefit to performing\n * a cache operation, as it is already a single image. Caching is best done on containers that have multiple complex\n * parts that do not change often, so that rendering the image will improve overall rendering speed. A cached object\n * will not visually update until explicitly told to do so with a call to {{#crossLink \"Stage/update\"}}{{/crossLink}},\n * much like a Stage. If a cache is being updated every frame, it is likely not improving rendering performance.\n * Caches are best used when updates will be sparse.\n *\n * Caching is also a co-requisite for applying filters to prevent expensive filters running constantly without need.\n * The BitmapCache is also responsible for applying filters to objects, and reads each {{#crossLink \"Filter\"}}{{/crossLink}}.\n * Real-time Filters are not recommended when dealing with a Context2D canvas if performance is a concern. For best\n * performance and to still allow for some visual effects, use a {{#crossLink \"DisplayObject/compositeOperation:property\"}}{{/crossLink}}\n * when possible.\n *\n * @class BitmapCache\n * @module EaselJS\n */\nexport default class BitmapCache extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * Width of the cache relative to the target object.\n\t\t * @property width\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.width = undefined;\n\n\t\t/**\n\t\t * Height of the cache relative to the target object.\n\t\t * @property height\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default undefined\n\t\t * @todo Should the width and height be protected?\n\t\t */\n\t\tthis.height = undefined;\n\n\t\t/**\n\t\t * Horizontal position of the cache relative to the target's origin.\n\t\t * @property x\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.x = undefined;\n\n\t\t/**\n\t\t * Vertical position of the cache relative to target's origin.\n\t\t * @property y\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.y = undefined;\n\n\t\t/**\n\t\t * The internal scale of the cache image, does not affects display size. This is useful to both increase and\n\t\t * decrease render quality. Objects with increased scales are more likely to look good when scaled up. Objects\n\t\t * with decreased scales can save on rendering performance.\n\t\t * @property scale\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t * The relative offset of the {{#crossLink \"BitmapCache/x:property\"}}{{/crossLink}} position, used for drawing\n\t\t * into the cache with the correct offsets. Re-calculated every update call before drawing.\n\t\t * @property offX\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offX = 0;\n\n\t\t/**\n\t\t * The relative offset of the {{#crossLink \"BitmapCache/y:property\"}}{{/crossLink}} position, used for drawing\n\t\t * into the cache with the correct offsets. Re-calculated every update call before drawing.\n\t\t * @property offY\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offY = 0;\n\n\t\t/**\n\t\t * Track how many times the cache has been updated, mostly used for preventing duplicate cacheURLs. This can be\n\t\t * useful to see if a cache has been updated.\n\t\t * @property cacheID\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.cacheID = 0;\n\n// private properties:\n\t\t/**\n\t\t * Relative offset of the x position, used for drawing the cache into other scenes.\n\t\t * Re-calculated every update call before drawing.\n\t\t * @property _filterOffY\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @todo Is this description right? Its the same as offX.\n\t\t */\n\t\tthis._filterOffX = 0;\n\n\t\t/**\n\t\t * Relative offset of the y position, used for drawing into the cache into other scenes.\n\t\t * Re-calculated every update call before drawing.\n\t\t * @property _filterOffY\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @todo Is this description right? Its the same as offY.\n\t\t */\n\t\tthis._filterOffY = 0;\n\n\t\t/**\n\t\t * The cacheID when a DataURL was requested.\n\t\t * @property _cacheDataURLID\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._cacheDataURLID = 0;\n\n\t\t/**\n\t\t * The cache's DataURL, generated on-demand using the getter.\n\t\t * @property _cacheDataURL\n\t\t * @protected\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis._cacheDataURL = null;\n\n\t\t/**\n\t\t * Internal tracking of final bounding width, approximately `width*scale;` however, filters can complicate the\n\t\t * actual value.\n\t\t * @property _drawWidth\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._drawWidth = 0;\n\n\t\t/**\n\t\t * Internal tracking of final bounding height, approximately `height*scale;` however, filters can complicate the\n\t\t * actual value.\n\t\t * @property _drawHeight\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._drawHeight = 0;\n\n\t\t/**\n\t\t * Internal tracking of the last requested bounds, may happen repeadtedly so stored to avoid object creation\n\t\t * @property _boundRect\n\t\t * @protected\n\t\t * @type {Rectangle}\n\t\t * @default Rectangle\n\t\t */\n\t\tthis._boundRect = new Rectangle();\n\n\t}\n\n\t/**\n\t * Returns the bounds that surround all applied filters. This relies on each filter to describe how it changes\n\t * bounds.\n\t * @method getFilterBounds\n\t * @param {DisplayObject} target The object to check the filter bounds for.\n\t * @param {Rectangle} [output=Rectangle] Optional parameter, if provided then calculated bounds will be applied to that\n\t * object.\n\t * @return {Rectangle} a string representation of the instance.\n\t * @todo Please clarify if the return type is a Rectangle or string.\n\t * @static\n\t */\n\tstatic getFilterBounds (target, output = new Rectangle()) {\n\t\tlet filters = target.filters;\n\t\tlet filterCount = filters && filters.length;\n\t\tif (!!filterCount <= 0) { return output; }\n\n\t\tfor (let i=0; i<filterCount; i++) {\n\t\t\tlet f = filters[i];\n\t\t\tif (!f || !f.getBounds) { continue; }\n\t\t\tlet test = f.getBounds();\n\t\t\tif (!test) { continue; }\n\t\t\tif (i==0) {\n\t\t\t\toutput.setValues(test.x, test.y, test.width, test.height);\n\t\t\t} else {\n\t\t\t\toutput.extend(test.x, test.y, test.width, test.height);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n\n// public methods:\n\t/**\n\t * Directly called via {{#crossLink \"DisplayObject/cache:method\"}}{{/crossLink}}. Creates and sets properties needed\n\t * for a cache to function, and performs the initial update.\n\t * @method define\n\t * @param {DisplayObject} target The DisplayObject this cache is linked to.\n\t * @param {Number} [x=0] The x coordinate origin for the cache region.\n\t * @param {Number} [y=0] The y coordinate origin for the cache region.\n\t * @param {Number} [width=1] The width of the cache region.\n\t * @param {Number} [height=1] The height of the cache region.\n\t * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape\n\t * using `myShape.cache(0,0,100,100,2)`, then the resulting cacheCanvas will be 200x200 pixels. This lets you scale\n\t * and rotate cached elements with greater fidelity.\n\t * @param {Object} [options] When using things like {{#crossLink \"StageGL\"}}{{/crossLink}} there may be\n\t * extra caching opportunities or requirements.\n\t */\n\t define (target, x = 0, y = 0, width = 1, height = 1, scale = 1, options) {\n\t\tif (!target) { throw \"No symbol to cache\"; }\n\t\tthis._options = options;\n\t\tthis._useWebGL = options !== undefined;\n\t\tthis.target = target;\n\n\t\tthis.width = width >= 1 ? width : 1;\n\t\tthis.height = height >= 1 ? height : 1;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.scale = scale;\n\n\t\tthis.update();\n\t}\n\n\t/**\n\t * Directly called via {{#crossLink \"DisplayObject/updateCache:method\"}}{{/crossLink}}, but also internally. This\n\t * has the dual responsibility of making sure the surface is ready to be drawn to, and performing the draw. For\n\t * full details of each behaviour, check the protected functions {{#crossLink \"BitmapCache/_updateSurface\"}}{{/crossLink}}\n\t * and {{#crossLink \"BitmapCache/_drawToCache\"}}{{/crossLink}} respectively.\n\t * @method update\n\t * @param {String} [compositeOperation=null] The DisplayObject this cache is linked to.\n\t */\n\tupdate (compositeOperation) {\n\t\tif (!this.target) { throw \"define() must be called before update()\"; }\n\n\t\tlet filterBounds = BitmapCache.getFilterBounds(this.target);\n\t\tlet surface = this.target.cacheCanvas;\n\n\t\tthis._drawWidth = Math.ceil(this.width*this.scale) + filterBounds.width;\n\t\tthis._drawHeight = Math.ceil(this.height*this.scale) + filterBounds.height;\n\n\t\tif (!surface || this._drawWidth != surface.width || this._drawHeight != surface.height) {\n\t\t\tthis._updateSurface();\n\t\t}\n\n\t\tthis._filterOffX = filterBounds.x;\n\t\tthis._filterOffY = filterBounds.y;\n\t\tthis.offX = this.x*this.scale + this._filterOffX;\n\t\tthis.offY = this.y*this.scale + this._filterOffY;\n\n\t\tthis._drawToCache(compositeOperation);\n\n\t\tthis.cacheID = this.cacheID?this.cacheID+1:1;\n\t}\n\n\t/**\n\t * Reset and release all the properties and memory associated with this cache.\n\t * @method release\n\t */\n\trelease () {\n\t\tlet stage = this.target.stage;\n\t\tif (this._useWebGL && this._webGLCache) {\n\t\t\t// if it isn't cache controlled clean up after yourself\n\t\t\tif (!this._webGLCache.isCacheControlled) {\n\t\t\t\tif (this.__lastRT) { this.__lastRT = undefined; }\n\t\t\t\tif (this.__rtA) { this._webGLCache._killTextureObject(this.__rtA); }\n\t\t\t\tif (this.__rtB) { this._webGLCache._killTextureObject(this.__rtB); }\n\t\t\t\tif (this.target && this.target.cacheCanvas) { this._webGLCache._killTextureObject(this.target.cacheCanvas); }\n\t\t\t}\n\t\t\t// set the context to none and let the garbage collector get the rest when the canvas itself gets removed\n\t\t\tthis._webGLCache = false;\n\t\t} else if (stage instanceof StageGL) {\n\t\t\tstage.releaseTexture(this.target.cacheCanvas);\n\t\t}\n\t\tthis.target = this.target.cacheCanvas = null;\n\t\tthis.cacheID = this._cacheDataURLID = this._cacheDataURL = undefined;\n\t\tthis.width = this.height = this.x = this.y = this.offX = this.offY = 0;\n\t\tthis.scale = 1;\n\t}\n\n\t/**\n\t * Returns a data URL for the cache, or `null` if this display object is not cached.\n\t * Uses {{#crossLink \"BitmapCache/cacheID:property\"}}{{/crossLink}} to ensure a new data URL is not generated if the\n\t * cache has not changed.\n\t * @method getCacheDataURL\n\t * @return {String} The image data url for the cache.\n\t */\n\tgetCacheDataURL () {\n\t\tlet cacheCanvas = this.target && this.target.cacheCanvas;\n\t\tif (!cacheCanvas) { return null; }\n\t\tif (this.cacheID != this._cacheDataURLID) {\n\t\t\tthis._cacheDataURLID = this.cacheID;\n\t\t\tthis._cacheDataURL = cacheCanvas.toDataURL?cacheCanvas.toDataURL():null;\t// incase function is\n\t\t}\n\t\treturn this._cacheDataURL;\n\t}\n\n\t/**\n\t * Use context2D drawing commands to display the cache canvas being used.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The context to draw into.\n\t * @return {Boolean} Whether the draw was handled successfully.\n\t */\n\tdraw (ctx) {\n\t\tif (!this.target) { return false; }\n\t\tctx.drawImage(this.target.cacheCanvas,\n\t\t\tthis.x + (this._filterOffX/this.scale),\n\t\t\tthis.y + (this._filterOffY/this.scale),\n\t\t\tthis._drawWidth/this.scale,\n\t\t\tthis._drawHeight/this.scale\n\t\t);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determine the bounds of the shape in local space.\n\t * @method getBounds\n\t * @returns {Rectangle}\n\t */\n\tgetBounds () {\n\t\tconst scale = this.scale;\n\t\treturn this._boundRect.setValue(\n\t\t\tthis._filterOffX/scale,\n\t\t\tthis._filterOffY/scale,\n\t\t\tthis.width/scale,\n\t\t\tthis.height/scale\n\t\t);\n\t}\n\n\n// private methods:\n\t/**\n\t * Basic context2D caching works by creating a new canvas element and setting its physical size. This function will\n\t * create and or size the canvas as needed.\n\t * @method _updateSurface\n\t * @protected\n\t */\n\t_updateSurface () {\n\t\tlet surface;\n\t\tif (!this._useWebGL) {\n\t\t\tsurface = this.target.cacheCanvas;\n\t\t\t// create it if it's missing\n\t\t\tif (!surface) {\n\t\t\t\tsurface = this.target.cacheCanvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\t\t\t}\n\t\t\t// now size it\n\t\t\tsurface.width = this._drawWidth;\n\t\t\tsurface.height = this._drawHeight;\n\t\t\t// skip the webgl-only updates\n\t\t\treturn;\n\t\t}\n\n\t\t// create it if it's missing\n\t\tif (!this._webGLCache) {\n\t\t\tif (this._options.useGL === \"stage\") {\n\t\t\t\tif(!(this.target.stage != null && this.target.stage.isWebGL)) {\n\t\t\t\t\tthrow `Cannot use 'stage' for cache because the object's parent stage is ${this.target.stage != null ? \"non WebGL.\" : \"not set, please addChild to the correct stage.\"}`;\n\t\t\t\t}\n\t\t\t\tthis.target.cacheCanvas = true; // will be replaced with RenderTexture, temporary positive value for old \"isCached\" checks\n\t\t\t\tthis._webGLCache = this.target.stage;\n\t\t\t} else if (this._options.useGL === \"new\") {\n\t\t\t\tthis.target.cacheCanvas = document.createElement(\"canvas\"); // we can turn off autopurge because we wont be making textures here\n\t\t\t\tthis._webGLCache = new StageGL(this.target.cacheCanvas, {antialias: true, transparent: true, autoPurge: -1});\n\t\t\t\tthis._webGLCache.isCacheControlled = true;    // use this flag to control stage sizing and final output\n\t\t\t} else {\n\t\t\t\tthrow \"Invalid option provided to useGL, expected ['stage', 'new', StageGL, undefined], got \"+ this._options.useGL;\n\t\t\t}\n\t\t}\n\n\t\t// now size render surfaces\n\t\tlet stageGL = this._webGLCache;\n\t\tsurface = this.target.cacheCanvas;\n\n\t\t// if we have a dedicated stage we've gotta size it\n\t\tif (stageGL.isCacheControlled) {\n\t\t\tsurface.width = this._drawWidth;\n\t\t\tsurface.height = this._drawHeight;\n\t\t\tstageGL.updateViewport(this._drawWidth, this._drawHeight);\n\t\t}\n\t\tif (this.target.filters) {\n\t\t\t// with filters we can't tell how many we'll need but the most we'll ever need is two, so make them now\n\t\t\tstageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);\n\t\t\tstageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);\n\t\t} else if (!stageGL.isCacheControlled) {\n\t\t\t// without filters then we only need one RenderTexture, and that's only if its not a dedicated stage\n\t\t\tstageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);\n\t\t}\n\t}\n\n\t/**\n\t * Perform the cache draw out for context 2D now that the setup properties have been performed.\n\t * @method _drawToCache\n\t * @protected\n\t */\n\t_drawToCache (compositeOperation) {\n\t\tlet target = this.target;\n\t\tlet surface = target.cacheCanvas;\n\t\tlet webGL = this._webGLCache;\n\n\t\tif (!this._useWebGL || !webGL) {\n\t\t\tlet ctx = surface.getContext(\"2d\");\n\n\t\t\tif (!compositeOperation) {\n\t\t\t\tctx.clearRect(0, 0, this._drawWidth+1, this._drawHeight+1);\n\t\t\t}\n\n\t\t\tctx.save();\n\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t\tctx.setTransform(this.scale,0,0,this.scale, -this._filterOffX,-this._filterOffY);\n\t\t\tctx.translate(-this.x, -this.y);\n\t\t\ttarget.draw(ctx, true);\n\t\t\tctx.restore();\n\n\t\t\tif (target.filters && target.filters.length) {\n\t\t\t\tthis._applyFilters(target);\n\t\t\t}\n\t\t\tsurface._invalid = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._webGLCache.cacheDraw(target, target.filters, this);\n\t\t// NOTE: we may of swapped around which element the surface is, so we re-fetch it\n\t\tsurface = this.target.cacheCanvas;\n\t\tsurface.width = this._drawWidth;\n\t\tsurface.height = this._drawHeight;\n\t\tsurface._invalid = true;\n\t}\n\n\t/**\n\t * Work through every filter and apply its individual transformation to it.\n\t * @method _applyFilters\n\t * @protected\n\t */\n\t_applyFilters () {\n\t\tlet surface = this.target.cacheCanvas;\n\t\tlet filters = this.target.filters;\n\n\t\tlet w = this._drawWidth;\n\t\tlet h = this._drawHeight;\n\n\t\t// setup\n\t\tlet data = surface.getContext(\"2d\").getImageData(0,0, w,h);\n\n\t\t// apply\n\t\tlet l = filters.length;\n\t\tfor (let i=0; i<l; i++) {\n\t\t\tfilters[i]._applyFilter(data);\n\t\t}\n\n\t\t//done\n\t\tsurface.getContext(\"2d\").putImageData(data, 0,0);\n\t}\n\n}\n\n/**\n * Functionality injected to {{#crossLink \"BitmapCache\"}}{{/crossLink}}. Ensure StageGL is loaded after all other\n * standard EaselJS classes are loaded but before making any DisplayObject instances for injection to take full effect.\n * Replaces the context2D cache draw with the option for WebGL or context2D drawing.\n * If options is set to \"true\" a StageGL is created and contained on the object for use when rendering a cache.\n * If options is a StageGL instance it will not create an instance but use the one provided.\n * If possible it is best to provide the StageGL instance that is a parent to this DisplayObject for performance reasons.\n * A StageGL cache does not infer the ability to draw objects a StageGL cannot currently draw,\n * i.e. do not use a WebGL context cache when caching a Shape, Text, etc.\n * <h4>Example</h4>\n * Using WebGL cache with a 2d context\n *\n *     var stage = new createjs.Stage();\n *     var bmp = new createjs.Bitmap(src);\n *     bmp.cache(0, 0, bmp.width, bmp.height, 1, true);          // no StageGL to use, so make one\n *     var shape = new createjs.Shape();\n *     shape.graphics.clear().fill(\"red\").drawRect(0,0,20,20);\n *     shape.cache(0, 0, 20, 20, 1);                             // cannot use WebGL cache\n *\n * <h4>Example</h4>\n * Using WebGL cache with a WebGL context:\n *\n *     var stageGL = new createjs.StageGL();\n *     var bmp = new createjs.Bitmap(src);\n *     bmp.cache(0, 0, bmp.width, bmp.height, 1, stageGL);       // use our StageGL to cache\n *     var shape = new createjs.Shape();\n *     shape.graphics.clear().fill(\"red\").drawRect(0,0,20,20);\n *     shape.cache(0, 0, 20, 20, 1);                             // cannot use WebGL cache\n *\n * You can make your own StageGL and have it render to a canvas if you set \".isCacheControlled\" to true on your stage.\n * You may wish to create your own StageGL instance to control factors like background color/transparency, AA, and etc.\n * You must set \"options\" to its own stage if you wish to use the fast Render Textures available only to StageGLs.\n * If you use WebGL cache on a container with Shapes you will have to cache each shape individually before the container,\n * otherwise the WebGL cache will not render the shapes.\n * @method cache\n * @param {Number} x The x coordinate origin for the cache region.\n * @param {Number} y The y coordinate origin for the cache region.\n * @param {Number} width The width of the cache region.\n * @param {Number} height The height of the cache region.\n * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\n * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n * \tcached elements with greater fidelity. Default is 1.\n * @param {Boolean|StageGL} [options] Select whether to use context 2D, or WebGL rendering, and whether to make a new stage instance or use an existing one.\n */\n","/*\n* @license DisplayObject\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport EventDispatcher from \"createjs/src/events/EventDispatcher\";\nimport UID from \"../utils/UID\";\nimport DisplayProps from \"../geom/DisplayProps\";\nimport Rectangle from \"../geom/Rectangle\";\nimport Point from \"../geom/Point\";\nimport Matrix2D from \"../geom/Matrix2D\";\nimport BitmapCache from \"../filters/BitmapCache\";\n\n/**\n * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n * {{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\n * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\n * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\n * caching, and mouse handlers.\n * @class DisplayObject\n * @extends EventDispatcher\n * @module EaselJS\n */\nexport default class DisplayObject extends EventDispatcher {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.\n\t\t * @property alpha\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.alpha = 1;\n\n\t\t/**\n\t\t* If a cache is active, this returns the canvas that holds the image of this display object. See {{#crossLink \"DisplayObject/cache:method\"}}{{/crossLink}}\n\t\t* for more information. Use this to display the result of a cache. This will be a HTMLCanvasElement unless special cache rules have been deliberately enabled for this cache.\n\t\t * @property cacheCanvas\n\t\t * @type {HTMLCanvasElement | Object}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.cacheCanvas = null;\n\n\t\t/**\n\t\t * If a cache has been made, this returns the class that is managing the cacheCanvas and its properties. See {{#crossLink \"BitmapCache\"}}{{/crossLink}}\n\t\t * for more information.\n\t\t * @property bitmapCache\n\t\t * @type {BitmapCache}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.bitmapCache = null;\n\n\t\t/**\n\t\t * Unique ID for this display object. Makes display objects easier for some uses.\n\t\t * @property id\n\t\t * @type {Number}\n\t\t * @default -1\n\t\t */\n\t\tthis.id = UID.get();\n\n\t\t/**\n\t\t * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\n\t\t * of a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\n\t\t * clicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\n\t\t * method from returning the child.\n\t\t *\n\t\t * <strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\n\t\t * check out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\n\t\t * provided in the next release of EaselJS.\n\t\t * @property mouseEnabled\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.mouseEnabled = true;\n\n\t\t/**\n\t\t * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t * @property tickEnabled\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.tickEnabled = true;\n\n\t\t/**\n\t\t * An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\n\t\t * debugging.\n\t\t * @property name\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.name = null;\n\n\t\t/**\n\t\t * A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\n\t\t * contains this display object, or null if it has not been added\n\t\t * to one.\n\t\t * @property parent\n\t\t * @final\n\t\t * @type {Container}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\n\t\t * around its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.\n\t\t * @property regX\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.regX = 0;\n\n\t\t/**\n\t\t * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\n\t\t * its center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.\n\t\t * @property regY\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.regY = 0;\n\n\t\t/**\n\t\t * The rotation in degrees for this display object.\n\t\t * @property rotation\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation = 0;\n\n\t\t/**\n\t\t * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\n\t\t * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.\n\t\t * @property scaleX\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scaleX = 1;\n\n\t\t/**\n\t\t * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\n\t\t * object to half its nominal height. To vertically flip an object, set the scale to a negative number.\n\t\t * @property scaleY\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scaleY = 1;\n\n\t\t/**\n\t\t * The factor to skew this display object horizontally.\n\t\t * @property skewX\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.skewX = 0;\n\n\t\t/**\n\t\t * The factor to skew this display object vertically.\n\t\t * @property skewY\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.skewY = 0;\n\n\t\t/**\n\t\t * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\n\t\t * null, this property is inherited from the parent container.\n\t\t * @property shadow\n\t\t * @type {Shadow}\n\t\t * @default null\n\t\t */\n\t\tthis.shadow = null;\n\n\t\t/**\n\t\t * Indicates whether this display object should be rendered to the canvas and included when running the Stage\n\t\t * {{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.\n\t\t * @property visible\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * The x (horizontal) position of the display object, relative to its parent.\n\t\t * @property x\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.x = 0;\n\n\t\t/**\n\t\t * The y (vertical) position of the display object, relative to its parent.\n\t\t * @property y\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.y = 0;\n\n\t\t/**\n\t\t * If set, defines the transformation for this display object, overriding all other transformation properties\n\t\t * (x, y, rotation, scale, skew).\n\t\t * @property transformMatrix\n\t\t * @type {Matrix2D}\n\t\t * @default null\n\t\t */\n\t\tthis.transformMatrix = null;\n\n\t\t/**\n\t\t * The composite operation indicates how the pixels of this display object will be composited with the elements\n\t\t * behind it. If `null`, this property is inherited from the parent container. For more information, read the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t\t * whatwg spec on compositing</a>.\n\t\t * @property compositeOperation\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.compositeOperation = null;\n\n\t\t/**\n\t\t * Indicates whether the display object should be drawn to a whole pixel when\n\t\t * {{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\n\t\t * categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).\n\t\t * @property snapToPixel\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.snapToPixel = true;\n\n\t\t/**\n\t\t * An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\n\t\t * or {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\n\t\t * cached.\n\t\t * @property filters\n\t\t * @type {Array}\n\t\t * @default null\n\t\t */\n\t\tthis.filters = null;\n\n\t\t/**\n\t\t * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\n\t\t * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).\n\t\t * @property mask\n\t\t * @type {Shape}\n\t\t * @default null\n\t\t */\n\t\tthis.mask = null;\n\n\t\t/**\n\t\t * A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\n\t\t * The hit area will have its transformation applied relative to this display object's coordinate space (as though\n\t\t * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\n\t\t * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's\n\t\t * ancestors (parents).\n\t\t *\n\t\t * If set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\n\t\t * This is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\n\t\t *\n\t\t * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.\n\t\t * @property hitArea\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\t\tthis.hitArea = null;\n\n\t\t/**\n\t\t * A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\n\t\t * object. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\n\t\t * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.\n\t\t * @property cursor\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.cursor = null;\n\n\n// private properties:\n\t\t/**\n\t\t * @property _props\n\t\t * @protected\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\t\tthis._props = new DisplayProps();\n\n\t\t/**\n\t\t * @property _rectangle\n\t\t * @protected\n\t\t * @type {Rectangle}\n\t\t * @default null\n\t\t */\n\t\tthis._rectangle = new Rectangle();\n\n\t\t/**\n\t\t * @property _bounds\n\t\t * @protected\n\t\t * @type {Rectangle}\n\t\t * @default null\n\t\t */\n\t\tthis._bounds = null;\n\n\t\t/**\n\t\t * Where StageGL should look for required display properties, matters only for leaf display objects. Containers\n\t\t * or cached objects won't use this property, it's for native display of terminal elements.\n\t\t * @property _webGLRenderStyle\n\t\t * @protected\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._webGLRenderStyle = DisplayObject._StageGL_NONE;\n\t}\n\n// accessor properties:\n\t/**\n\t * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.\n\t * @property stage\n\t * @type {Stage}\n\t * @readonly\n\t */\n\tget stage () {\n\t\t// uses dynamic access to avoid circular dependencies;\n\t\tlet o = this;\n\t\twhile (o.parent) { o = o.parent; }\n\t\tif (/^\\[Stage(GL)?(\\s\\(name=\\w+\\))?\\]$/.test(o.toString())) { return o; }\n\t\treturn null;\n\t}\n\n\tget scale () {\n\t\treturn this.scaleX;\n\t}\n\n\t/**\n\t * Set both the {{#crossLink \"DisplayObject/scaleX:property\"}}{{/crossLink}} and the {{#crossLink \"DisplayObject/scaleY\"}}{{/crossLink}}\n\t * property to the same value. Note that when you get the value, if the `scaleX` and `scaleY` are different values,\n\t * it will return only the `scaleX`.\n\t * @property scale\n\t * @type {Number}\n\t * @default 1\n\t */\n\tset scale (value) {\n\t\tthis.scaleX = this.scaleY = value;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n\t}\n\n\t/**\n\t * Alias for draw(). Used by grandchildren (or deeper) in their draw method to directly call DisplayObject.draw, bypassing\n\t * their parent(s).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t */\n\tdraw (ctx, ignoreCache = false) {\n\t\treturn this.drawCache(ctx, ignoreCache);\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns <code>true</code> if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method drawCache\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t */\n\tdrawCache (ctx, ignoreCache = false) {\n\t\tlet cache = this.bitmapCache;\n\t\tif (cache && !ignoreCache) {\n\t\t\treturn cache.draw(ctx);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\n\t * to the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.\n\t * @method updateContext\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.\n\t */\n\tupdateContext (ctx) {\n\t\tlet o=this, mask=o.mask, mtx=o._props.matrix;\n\n\t\tif (mask && mask.graphics && !mask.graphics.isEmpty()) {\n\t\t\tmask.getMatrix(mtx);\n\t\t\tctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\n\t\t\tmask.graphics.drawAsPath(ctx);\n\t\t\tctx.clip();\n\n\t\t\tmtx.invert();\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n\t\t}\n\n\t\tthis.getMatrix(mtx);\n\t\tlet tx = mtx.tx, ty = mtx.ty;\n\t\tif (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\n\t\t\ttx = tx + (tx < 0 ? -0.5 : 0.5) | 0;\n\t\t\tty = ty + (ty < 0 ? -0.5 : 0.5) | 0;\n\t\t}\n\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, tx, ty);\n\t\tctx.globalAlpha *= o.alpha;\n\t\tif (o.compositeOperation) { ctx.globalCompositeOperation = o.compositeOperation; }\n\t\tif (o.shadow) { this._applyShadow(ctx, o.shadow); }\n\t}\n\n\t/**\n\t * Draws the display object into a new element, which is then used for subsequent draws. Intended for complex content\n\t * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\n\t * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The\n\t * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must manually\n\t * update the cache by calling <code>updateCache()</code> again. You must specify the cached area via the x, y, w,\n\t * and h parameters. This defines the rectangle that will be rendered and cached using this display object's coordinates.\n\t *\n\t * <h4>Example</h4>\n\t * For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n\t *\n\t *      var shape = new createjs.Shape();\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t *      myShape.cache(-25, -25, 50, 50);\n\t *\n\t * Note that filters need to be defined <em>before</em> the cache is applied or you will have to call updateCache after\n\t * application. Check out the {{#crossLink \"Filter\"}}{{/crossLink}} class for more information. Some filters\n\t * (ex. BlurFilter) may not work as expected in conjunction with the scale param.\n\t *\n\t * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\n\t * will add padding to the canvas dimensions.\n\t *\n\t * Actual implementation of the caching mechanism can change with a {{#crossLink \"StageGL\"}}{{/crossLink}} and so\n\t * all caching and filter behaviour has been moved to the {{#crossLink \"BitmapCache\"}}{{/crossLink}}\n\t *\n\t * @method cache\n\t * @param {Number} x The x coordinate origin for the cache region.\n\t * @param {Number} y The y coordinate origin for the cache region.\n\t * @param {Number} width The width of the cache region.\n\t * @param {Number} height The height of the cache region.\n\t * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\n\t * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n\t * \tcached elements with greater fidelity. Default is 1.\n\t * @param {Object} [options] When using alternate displays there may be extra caching opportunities or needs.\n\t */\n\tcache (x, y, width, height, scale = 1, options) {\n\t\tif (!this.bitmapCache) {\n\t\t\tthis.bitmapCache = new BitmapCache();\n\t\t}\n\t\tthis.bitmapCache.define(this, x, y, width, height, scale, options);\n\t}\n\n\t/**\n\t * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\n\t * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\n\t * will be drawn over the existing cache using the specified compositeOperation.\n\t *\n\t * <h4>Example</h4>\n\t * Clear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\n\t * will be drawn on top of the old one.\n\t *\n\t *      // Not shown: Creating the shape, and caching it.\n\t *      shapeInstance.clear();\n\t *      shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n\t *      shapeInstance.updateCache();\n\t *\n\t * Actual implementation of the caching mechanism can change with a {{#crossLink \"StageGL\"}}{{/crossLink}} and so\n\t * all caching and filter behaviour has been moved to the {{#crossLink \"BitmapCache\"}}{{/crossLink}}\n\t *\n\t * @method updateCache\n\t * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\n\t * whatwg spec on compositing</a>.\n\t */\n\tupdateCache (compositeOperation) {\n\t\tif (!this.bitmapCache) {\n\t\t\tthrow \"cache() must be called before updateCache()\";\n\t\t}\n\t\tthis.bitmapCache.update(compositeOperation);\n\t}\n\n\t/**\n\t * Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.\n\t * @method uncache\n\t */\n\tuncache () {\n\t\tif (this.bitmapCache) {\n\t\t\tthis.bitmapCache.release();\n\t\t\tthis.bitmapCache = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a data URL for the cache, or null if this display object is not cached.\n\t * Only generated if the cache has changed, otherwise returns last result.\n\t * @method getCacheDataURL\n\t * @return {String} The image data url for the cache.\n\t */\n\tgetCacheDataURL () {\n\t\treturn this.bitmapCache ? this.bitmapCache.getDataURL() : null;\n\t}\n\n\t/**\n\t * Transforms the specified x and y position from the coordinate space of the display object\n\t * to the global (stage) coordinate space. For example, this could be used to position an HTML label\n\t * over a specific point on a nested display object. Returns a Point instance with x and y properties\n\t * correlating to the transformed coordinates on the stage.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.x = 300;\n\t *      displayObject.y = 200;\n\t *      stage.addChild(displayObject);\n\t *      var point = displayObject.localToGlobal(100, 100);\n\t *      // Results in x=400, y=300\n\t *\n\t * @method localToGlobal\n\t * @param {Number} x The x position in the source display object to transform.\n\t * @param {Number} y The y position in the source display object to transform.\n\t * @param {Point | Object} [pt=Point] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.\n\t * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates\n\t * on the stage.\n\t */\n\tlocalToGlobal (x, y, pt = new Point()) {\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).transformPoint(x, y, pt);\n\t}\n\n\t/**\n\t * Transforms the specified x and y position from the global (stage) coordinate space to the\n\t * coordinate space of the display object. For example, this could be used to determine\n\t * the current mouse position within the display object. Returns a Point instance with x and y properties\n\t * correlating to the transformed position in the display object's coordinate space.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.x = 300;\n\t *      displayObject.y = 200;\n\t *      stage.addChild(displayObject);\n\t *      var point = displayObject.globalToLocal(100, 100);\n\t *      // Results in x=-200, y=-100\n\t *\n\t * @method globalToLocal\n\t * @param {Number} x The x position on the stage to transform.\n\t * @param {Number} y The y position on the stage to transform.\n\t * @param {Point | Object} [pt=Point] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.\n\t * @return {Point} A Point instance with x and y properties correlating to the transformed position in the\n\t * display object's coordinate space.\n\t */\n\tglobalToLocal (x, y, pt = new Point()) {\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x, y, pt);\n\t}\n\n\t/**\n\t * Transforms the specified x and y position from the coordinate space of this display object to the coordinate\n\t * space of the target display object. Returns a Point instance with x and y properties correlating to the\n\t * transformed position in the target's coordinate space. Effectively the same as using the following code with\n\t * {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t *\n\t *      var pt = this.localToGlobal(x, y);\n\t *      pt = target.globalToLocal(pt.x, pt.y);\n\t *\n\t * @method localToLocal\n\t * @param {Number} x The x position in the source display object to transform.\n\t * @param {Number} y The y position on the source display object to transform.\n\t * @param {DisplayObject} target The target display object to which the coordinates will be transformed.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.\n\t * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position\n\t * in the target's coordinate space.\n\t */\n\tlocalToLocal (x, y, target, pt) {\n\t\tpt = this.localToGlobal(x, y, pt);\n\t\treturn target.globalToLocal(pt.x, pt.y, pt);\n\t}\n\n\t/**\n\t * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\n\t * Omitted parameters will have the default value set.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      displayObject.setTransform(100, 100, 2, 2);\n\t *\n\t * @method setTransform\n\t * @param {Number} [x=0] The horizontal translation (x position) in pixels\n\t * @param {Number} [y=0] The vertical translation (y position) in pixels\n\t * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1\n\t * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1\n\t * @param {Number} [rotation=0] The rotation, in degrees\n\t * @param {Number} [skewX=0] The horizontal skew factor\n\t * @param {Number} [skewY=0] The vertical skew factor\n\t * @param {Number} [regX=0] The horizontal registration point in pixels\n\t * @param {Number} [regY=0] The vertical registration point in pixels\n\t * @return {DisplayObject} Returns this instance. Useful for chaining commands.\n\t * @chainable\n\t*/\n\tsetTransform (x=0, y=0, scaleX=1, scaleY=1, rotation=0, skewX=0, skewY=0, regX=0, regY=0) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.scaleX = scaleX;\n\t\tthis.scaleY = scaleY;\n\t\tthis.rotation = rotation;\n\t\tthis.skewX = skewX;\n\t\tthis.skewY = skewY;\n\t\tthis.regX = regX;\n\t\tthis.regY = regY;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a matrix based on this object's current transform.\n\t * @method getMatrix\n\t * @param {Matrix2D} [matrix] A Matrix2D object to populate with the calculated values. If null, a new\n\t * Matrix object is returned.\n\t * @return {Matrix2D} A matrix representing this display object's transform.\n\t */\n\tgetMatrix (matrix) {\n\t\tlet o = this, mtx = matrix&&matrix.identity() || new Matrix2D();\n\t\treturn o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t}\n\n\t/**\n\t * Generates a Matrix2D object representing the combined transform of the display object and all of its\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\n\t * be used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\t * @method getConcatenatedMatrix\n\t * @param {Matrix2D} [matrix] A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\n\t * If null, a new Matrix2D object is returned.\n\t * @return {Matrix2D} The combined matrix.\n\t */\n\tgetConcatenatedMatrix (matrix) {\n\t\tlet o = this, mtx = this.getMatrix(matrix);\n\t\twhile (o = o.parent) {\n\t\t\tmtx.prependMatrix(o.getMatrix(o._props.matrix));\n\t\t}\n\t\treturn mtx;\n\t}\n\n\t/**\n\t * Generates a DisplayProps object representing the combined display properties of the  object and all of its\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).\n\t * @method getConcatenatedDisplayProps\n\t * @param {DisplayProps} [props] A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\n\t * If null, a new DisplayProps object is returned.\n\t * @return {DisplayProps} The combined display properties.\n\t */\n\tgetConcatenatedDisplayProps (props) {\n\t\tprops = props ? props.identity() : new DisplayProps();\n\t\tlet o = this, mtx = o.getMatrix(props.matrix);\n\t\tdo {\n\t\t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);\n\n\t\t\t// we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.\n\t\t\t// this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.\n\t\t\tif (o != this) { mtx.prependMatrix(o.getMatrix(o._props.matrix)); }\n\t\t} while (o = o.parent);\n\t\treturn props;\n\t}\n\n\t/**\n\t * Tests whether the display object intersects the specified point in local coordinates (ie. draws a pixel with alpha > 0 at\n\t * the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation of the display object.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      stage.addEventListener(\"stagemousedown\", handleMouseDown);\n\t *      function handleMouseDown(event) {\n\t *          var hit = myShape.hitTest(event.stageX, event.stageY);\n\t *      }\n\t *\n\t * Please note that shape-to-shape collision is not currently supported by EaselJS.\n\t * @method hitTest\n\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\n\t * local Point.\n\t*/\n\thitTest (x, y) {\n\t\tlet ctx = DisplayObject._hitTestContext;\n\t\tctx.setTransform(1, 0, 0, 1, -x, -y);\n\t\tthis.draw(ctx);\n\n\t\tlet hit = this._testHit(ctx);\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, 2, 2);\n\t\treturn hit;\n\t}\n\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n\t *      var shape = stage.addChild(new Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.\n\t * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tset (props) {\n\t\tfor (let n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\n\t * Objects that have been cached will return the bounds of the cache.\n\t *\n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use\n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t * bounds.\n\t *\n\t * <table>\n\t * \t<tr><td><b>All</b></td><td>\n\t * \t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\n\t * \t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\n\t * \t\tthe automatic calculations listed below.\n\t * \t</td></tr>\n\t * \t<tr><td><b>Bitmap</b></td><td>\n\t * \t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\n\t * \t</td></tr>\n\t * \t<tr><td><b>Sprite</b></td><td>\n\t * \t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\n\t * \t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\n\t * \t</td></tr>\n\t * \t<tr><td><b>Container</b></td><td>\n\t * \t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\n\t * \t</td></tr>\n\t * \t<tr><td><b>Shape</b></td><td>\n\t * \t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\n\t * \t</td></tr>\n\t * \t<tr><td><b>Text</b></td><td>\n\t * \t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\n\t * \t\tnot, especially when using textBaseline values other than \"top\".\n\t * \t</td></tr>\n\t * \t<tr><td><b>BitmapText</b></td><td>\n\t * \t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\n\t * \t\tto (x=0,y=0).\n\t * \t</td></tr>\n\t* </table>\n\t *\n\t * Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\n\t * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\n\t * bounds explicitly:\n\t *\n\t * \tvar bounds = obj.getBounds();\n\t * \tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n\t * \t// getBounds will now use the set values, instead of recalculating\n\t *\n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t * values if you need to retain it.\n\t *\n\t * \tvar myBounds = obj.getBounds().clone();\n\t * \t// OR:\n\t * \tmyRect.copy(obj.getBounds());\n\t *\n\t * @method getBounds\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this\n\t * object.\n\t */\n\tgetBounds () {\n\t\tif (this._bounds) { return this._rectangle.copy(this._bounds); }\n\t\tlet cacheCanvas = this.cacheCanvas;\n\t\tif (cacheCanvas) {\n\t\t\tlet scale = this._cacheScale;\n\t\t\treturn this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\n\t * Objects that have been cached will return the transformed bounds of the cache.\n\t *\n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use\n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\n\t * bounds.\n\t *\n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\n\t * values if you need to retain it.\n\t *\n\t * Container instances calculate aggregate bounds for all children that return bounds via getBounds.\n\t * @method getTransformedBounds\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.\n\t */\n\tgetTransformedBounds () {\n\t\treturn this._getBounds();\n\t}\n\n\t/**\n\t * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\n\t * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\n\t * override calculated bounds.\n\t *\n\t * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\n\t * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).\n\t * @method setBounds\n\t * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.\n\t * @param {Number} y The y origin of the bounds.\n\t * @param {Number} width The width of the bounds.\n\t * @param {Number} height The height of the bounds.\n\t */\n\tsetBounds (x, y, width, height) {\n\t\tif (x == null) { this._bounds = x; }\n\t\tthis._bounds = (this._bounds || new Rectangle()).setValues(x, y, width, height);\n\t}\n\n\t/**\n\t * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\n\t * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\n\t * are copied by reference (masks, individual filter instances, hit area)\n\t * @method clone\n\t * @return {DisplayObject} A clone of the current DisplayObject instance.\n\t */\n\tclone () {\n\t\treturn this._cloneProps(new DisplayObject());\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}${this.name ? ` (name=${this.name})` : \"\"}]`;\n\t}\n\n\n// private methods:\n\t// separated so it can be used more easily in subclasses:\n\t/**\n\t * @method _cloneProps\n\t * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject\n\t * instance copied into.\n\t * @return {DisplayObject} o\n\t * @protected\n\t */\n\t_cloneProps (o) {\n\t\to.alpha = this.alpha;\n\t\to.mouseEnabled = this.mouseEnabled;\n\t\to.tickEnabled = this.tickEnabled;\n\t\to.name = this.name;\n\t\to.regX = this.regX;\n\t\to.regY = this.regY;\n\t\to.rotation = this.rotation;\n\t\to.scaleX = this.scaleX;\n\t\to.scaleY = this.scaleY;\n\t\to.shadow = this.shadow;\n\t\to.skewX = this.skewX;\n\t\to.skewY = this.skewY;\n\t\to.visible = this.visible;\n\t\to.x  = this.x;\n\t\to.y = this.y;\n\t\to.compositeOperation = this.compositeOperation;\n\t\to.snapToPixel = this.snapToPixel;\n\t\to.filters = this.filters==null?null:this.filters.slice(0);\n\t\to.mask = this.mask;\n\t\to.hitArea = this.hitArea;\n\t\to.cursor = this.cursor;\n\t\to._bounds = this._bounds;\n\t\treturn o;\n\t}\n\n\t/**\n\t * @method _applyShadow\n\t * @protected\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {Shadow} [shadow=Shadow]\n\t */\n\t_applyShadow (ctx, shadow = Shadow.identity) {\n\t\tshadow = shadow;\n\t\tctx.shadowColor = shadow.color;\n\t\tctx.shadowOffsetX = shadow.offsetX;\n\t\tctx.shadowOffsetY = shadow.offsetY;\n\t\tctx.shadowBlur = shadow.blur;\n\t}\n\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t */\n\t_tick (evtObj) {\n\t\t// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.\n\t\tlet ls = this._listeners;\n\t\tif (ls && ls[\"tick\"]) {\n\t\t\t// reset & reuse the event object to avoid construction / GC costs:\n\t\t\tevtObj.target = null;\n\t\t\tevtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\n\t\t\tthis.dispatchEvent(evtObj);\n\t\t}\n\t}\n\n\t/**\n\t * @method _testHit\n\t * @protected\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @return {Boolean}\n\t */\n\t_testHit (ctx) {\n\t\ttry {\n\t\t\treturn ctx.getImageData(0, 0, 1, 1).data[3] > 1;\n\t\t} catch (e) {\n\t\t\tif (!DisplayObject.suppressCrossDomainErrors) {\n\t\t\t\tthrow \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @method _getBounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t * @return {Rectangle}\n\t * @protected\n\t */\n\t_getBounds (matrix, ignoreTransform) {\n\t\treturn this._transformBounds(this.getBounds(), matrix, ignoreTransform);\n\t}\n\n\t/**\n\t * @method _transformBounds\n\t * @param {Rectangle} bounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform\n\t * @return {Rectangle}\n\t * @protected\n\t */\n\t_transformBounds (bounds, matrix, ignoreTransform) {\n\t\tif (!bounds) { return bounds; }\n\t\tlet { x, y, width, height } = bounds;\n\t\tlet mtx = this._props.matrix;\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\n\t\tif (x || y) { mtx.appendTransform(0,0,1,1,0,0,0,-x,-y); } // TODO: simplify this.\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\n\t\tlet x_a = width*mtx.a, x_b = width*mtx.b;\n\t\tlet y_c = height*mtx.c, y_d = height*mtx.d;\n\t\tlet tx = mtx.tx, ty = mtx.ty;\n\n\t\tlet minX = tx, maxX = tx, minY = ty, maxY = ty;\n\n\t\tif ((x = x_a + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\tif ((x = x_a + y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\t\tif ((x = y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\n\n\t\tif ((y = x_b + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\tif ((y = x_b + y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\t\tif ((y = y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\n\n\t\treturn bounds.setValues(minX, minY, maxX-minX, maxY-minY);\n\t}\n\n\t/**\n\t * Indicates whether the display object has any mouse event listeners or a cursor.\n\t * @method _hasMouseEventListener\n\t * @return {Boolean}\n\t * @protected\n\t */\n\t_hasMouseEventListener () {\n\t\tlet evts = DisplayObject._MOUSE_EVENTS;\n\t\tfor (let i=0, l=evts.length; i<l; i++) {\n\t\t\tif (this.hasEventListener(evts[i])) { return true; }\n\t\t}\n\t\treturn !!this.cursor;\n\t}\n\n}\n\n// static properties:\n/**\n * Listing of mouse event names. Used in _hasMouseEventListener.\n * @property _MOUSE_EVENTS\n * @protected\n * @static\n * @type {Array}\n * @readonly\n */\n\n/**\n * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\n * with cross domain content.\n * @property suppressCrossDomainErrors\n * @static\n * @type {Boolean}\n * @default false\n */\n/**\n * @property _snapToPixelEnabled\n * @protected\n * @static\n * @type {Boolean}\n * @default false\n */\n/**\n * @property _hitTestCanvas\n * @type {HTMLCanvasElement | Object}\n * @static\n * @protected\n */\n/**\n * @property _hitTestContext\n * @type {CanvasRenderingContext2D}\n * @static\n * @protected\n */\n{\n\tlet canvas = createjs && createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); // prevent errors on load in browsers without canvas.\n\tif (canvas.getContext) {\n\t\tDisplayObject._hitTestCanvas = canvas;\n\t\tDisplayObject._hitTestContext = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\t// ES6 does not support static properties, this is a work around.\n\tDisplayObject._MOUSE_EVENTS = [\"click\",\"dblclick\",\"mousedown\",\"mouseout\",\"mouseover\",\"pressmove\",\"pressup\",\"rollout\",\"rollover\"];\n\tDisplayObject.suppressCrossDomainErrors = false;\n\tDisplayObject.snapToPixelEnabled = false;\n\t/**\n\t * Enum like property for determining StageGL render lookup, i.e. where to expect properties.\n\t * @property _StageGL_NONE\n\t * @protected\n\t * @static\n\t * @type {number}\n\t */\n\tDisplayObject._StageGL_NONE = 0;\n\n\t/**\n\t * Enum like property for determining StageGL render lookup, i.e. where to expect properties.\n\t * @property _StageGL_SPRITE\n\t * @protected\n\t * @static\n\t * @type {number}\n\t */\n\tDisplayObject._StageGL_SPRITE = 1;\n\n\t/**\n\t * Enum like property for determining StageGL render lookup, i.e. where to expect properties.\n\t * @property _StageGL_BITMAP\n\t * @protected\n\t * @static\n\t * @type {number}\n\t */\n\tDisplayObject._StageGL_BITMAP = 2;\n\n}\n\n// events:\n\t/**\n\t * Dispatched when the user presses their left mouse button over the display object. See the\n\t * {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mousedown\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user presses their left mouse button and then releases it while over the display object.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event click\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user double clicks their left mouse button over this display object.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event dblclick\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user's mouse enters this display object. This event must be enabled using\n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mouseover\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user's mouse leaves this display object. This event must be enabled using\n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event mouseout\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t * aggregate of their content.\n\t *\n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t * shapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\n\t * myContainer, two events would be received, each targeting a child element:<OL>\n\t * <LI>when the mouse enters shapeA (target=shapeA)</LI>\n\t * <LI>when the mouse enters shapeB (target=shapeB)</LI>\n\t * </OL>\n\t * However, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\n\t * the aggregate myContainer content (target=myContainer).\n\t *\n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event rollover\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\n\t * aggregate of their content.\n\t *\n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\n\t * shapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\n\t * on myContainer, two events would be received, each targeting a child element:<OL>\n\t * <LI>when the mouse leaves shapeA (target=shapeA)</LI>\n\t * <LI>when the mouse leaves shapeB (target=shapeB)</LI>\n\t * </OL>\n\t * However, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\n\t * the aggregate myContainer content (target=myContainer).\n\t *\n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event rollout\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\n\t * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be\n\t * useful for dragging and similar operations.\n\t * @event pressmove\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\n\t * will be generated on that object when that mouse press is released. This can be useful for dragging and similar\n\t * operations.\n\t * @event pressup\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * Dispatched when the display object is added to a parent container.\n\t * @event added\n\t */\n\n\t/**\n\t * Dispatched when the display object is removed from its parent container.\n\t * @event removed\n\t */\n\n\t/**\n\t * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\n\t * rendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\n\t * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\n\t * {{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\n\t * dispatched on their parent.\n\t * @event tick\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Array} params An array containing any arguments that were passed to the Stage.update() method. For\n\t *      example if you called stage.update(\"hello\"), then the params would be [\"hello\"].\n\t * @since 0.6.0\n\t */\n","/*\n* @license Container\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport DisplayObject from './DisplayObject';\n\n/**\n * A Container is a nestable display list that allows you to work with compound display elements. For  example you could\n * group arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\n * transform them as a group, while still being able to move the individual parts relative to each other. Children of\n * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\n * Container.\n *\n * For example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\n * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\n * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.\n *\n * <h4>Example</h4>\n *\n *      var container = new createjs.Container();\n *      container.addChild(bitmapInstance, shapeInstance);\n *      container.x = 100;\n *\n * @class Container\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class Container extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The array of children in the display list. You should usually use the child management methods such as\n\t\t * {{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n\t\t * {{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\n\t\t * included for advanced uses.\n\t\t * @property children\n\t\t * @type Array\n\t\t * @default null\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\n\t\t * If false, the children will be aggregated under the container - for example, a click on a child shape would\n\t\t * trigger a click event on the container.\n\t\t * @property mouseChildren\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.mouseChildren = true;\n\n\t\t/**\n\t\t * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\n\t\t * @property tickChildren\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.tickChildren = true;\n\t\t}\n\n// accessor properties:\n\t/**\n\t * Returns the number of children in the container.\n\t * @property numChildren\n\t * @type {Number}\n\t * @readonly\n\t */\n\tget numChildren () {\n\t\treturn this.children.length;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\tlet hasContent = this.cacheCanvas || this.children.length;\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t */\n\tdraw (ctx, ignoreCache = false) {\n\t\tif (super.draw(ctx, ignoreCache)) { return true; }\n\n\t\t// this ensures we don't have issues with display list changes that occur during a draw:\n\t\tlet list = this.children.slice();\n\t\tfor (let i=0,l=list.length; i<l; i++) {\n\t\t\tlet child = list[i];\n\t\t\tif (!child.isVisible()) { continue; }\n\n\t\t\t// draw the child:\n\t\t\tctx.save();\n\t\t\tchild.updateContext(ctx);\n\t\t\tchild.draw(ctx);\n\t\t\tctx.restore();\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Adds a child to the top of the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tcontainer.addChild(bitmapInstance);\n\t *\n\t * You can also add multiple children at once:\n\t *\n\t * \t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);\n\t *\n\t * @method addChild\n\t * @param {...DisplayObject} children The display object(s) to add.\n\t * @return {DisplayObject} The child that was added, or the last child if multiple children were added.\n\t */\n\taddChild (...children) {\n\t\tconst l = children.length;\n\t\tif (l === 0) { return null; }\n\t\tlet child = children[0];\n\t\tif (l > 1) {\n\t\t\tfor (let i = 0; i < l; i++) { child = this.addChild(children[i]); }\n\t\t\treturn child;\n\t\t}\n    // Note: a lot of duplication with addChildAt, but push is WAY faster than splice.\n    let parent = child.parent, silent = parent === this;\n    parent && parent._removeChildAt(parent.children.indexOf(child), silent);\n\t\tchild.parent = this;\n\t\tthis.children.push(child);\n    if (!silent) { child.dispatchEvent(\"added\"); }\n\t\treturn child;\n\t}\n\n\t/**\n\t * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\n\t * setting its parent to this Container.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      addChildAt(child1, index);\n\t *\n\t * You can also add multiple children, such as:\n\t *\n\t *      addChildAt(child1, child2, ..., index);\n\t *\n\t * The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\n\t * you could use:\n\t *\n\t *      container.addChildAt(myShape, container.getChildIndex(otherShape));\n\t *\n\t * This would also bump otherShape's index up by one. Fails silently if the index is out of range.\n\t *\n\t * @method addChildAt\n\t * @param {...DisplayObject} children The display object(s) to add.\n\t * @param {Number} index The index to add the child at.\n\t * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.\n\t */\n\taddChildAt (...children) {\n\t\tconst l = children.length;\n    if (l === 0) { return null; }\n    let index = children.pop();\n\t\tif (index < 0 || index > this.children.length) { return children[l - 2]; }\n\t\tif (l > 2) {\n\t\t\tfor (let i = 0; i < l - 1; i++) { this.addChildAt(children[i], index++); }\n\t\t\treturn children[l - 2];\n\t\t}\n\t\tlet child = children[0];\n    let parent = child.parent, silent = parent === this;\n    parent && parent._removeChildAt(parent.children.indexOf(child), silent);\n\t\tchild.parent = this;\n\t\tthis.children.splice(index++, 0, child);\n    if (!silent) { child.dispatchEvent(\"added\"); }\n\t\treturn child;\n\t}\n\n\t/**\n\t * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\n\t * already known.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.removeChild(child);\n\t *\n\t * You can also remove multiple children:\n\t *\n\t *      removeChild(child1, child2, ...);\n\t *\n\t * Returns true if the child (or children) was removed, or false if it was not in the display list.\n\t * @method removeChild\n\t * @param {DisplayObject} children The display object(s) to remove.\n\t * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.\n\t */\n\tremoveChild (...children) {\n\t\tconst l = children.length;\n    if (l === 0) { return true; }\n\t\tif (l > 1) {\n\t\t\tlet good = true;\n\t\t\tfor (let i = 0; i < l; i++) { good = good && this.removeChild(children[i]); }\n\t\t\treturn good;\n\t\t}\n\t\treturn this._removeChildAt(this.children.indexOf(children[0]));\n\t}\n\n\t/**\n\t * Removes the child at the specified index from the display list, and sets its parent to null.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.removeChildAt(2);\n\t *\n\t * You can also remove multiple children:\n\t *\n\t *      container.removeChild(2, 7, ...)\n\t *\n\t * Returns true if the child (or children) was removed, or false if any index was out of range.\n\t * @method removeChildAt\n\t * @param {...Number} indexes The indexes of children to remove.\n\t * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\n\t */\n\tremoveChildAt (...indexes) {\n\t\tconst l = indexes.length;\n    if (l === 0) { return true; }\n\t\tif (l > 1) {\n\t\t\tindexes.sort((a, b) => b - a);\n\t\t\tlet good = true;\n\t\t\tfor (let i = 0; i < l; i++) { good = good && this._removeChildAt(indexes[i]); }\n\t\t\treturn good;\n\t\t}\n\t\treturn this._removeChildAt(indexes[0]);\n\t}\n\n\t/**\n\t * Removes all children from the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \tcontainer.removeAllChildren();\n\t *\n\t * @method removeAllChildren\n\t */\n\tremoveAllChildren () {\n\t\tlet kids = this.children;\n\t\twhile (kids.length) { this._removeChildAt(0); }\n\t}\n\n\t/**\n\t * Returns the child at the specified index.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      container.getChildAt(2);\n\t *\n\t * @method getChildAt\n\t * @param {Number} index The index of the child to return.\n\t * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.\n\t */\n\tgetChildAt (index) {\n\t\treturn this.children[index];\n\t}\n\n\t/**\n\t * Returns the child with the specified name.\n\t * @method getChildByName\n\t * @param {String} name The name of the child to return.\n\t * @return {DisplayObject} The child with the specified name.\n\t */\n\tgetChildByName (name) {\n\t\tlet kids = this.children;\n\t\tconst l = kids.length;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tif (kids[i].name === name) { return kids[i]; }\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Performs an array sort operation on the child list.\n\t *\n\t * <h4>Example: Display children with a higher y in front.</h4>\n\t *\n\t *      var sortFunction = function(obj1, obj2, options) {\n\t *          if (obj1.y > obj2.y) { return 1; }\n\t *          if (obj1.y < obj2.y) { return -1; }\n\t *          return 0;\n\t *      }\n\t *      container.sortChildren(sortFunction);\n\t *\n\t * @method sortChildren\n\t * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\n\t * documentation for details.\n\t */\n\tsortChildren (sortFunction) {\n\t\tthis.children.sort(sortFunction);\n\t}\n\n\t/**\n\t * Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var index = container.getChildIndex(child);\n\t *\n\t * @method getChildIndex\n\t * @param {DisplayObject} child The child to return the index of.\n\t * @return {Number} The index of the specified child. -1 if the child is not found.\n\t */\n\tgetChildIndex (child) {\n\t\treturn this.children.indexOf(child);\n\t}\n\n\t/**\n\t * Swaps the children at the specified indexes. Fails silently if either index is out of range.\n\t * @method swapChildrenAt\n\t * @param {Number} index1\n\t * @param {Number} index2\n\t */\n\tswapChildrenAt (index1, index2) {\n\t\tlet kids = this.children;\n\t\tlet o1 = kids[index1];\n\t\tlet o2 = kids[index2];\n\t\tif (!o1 || !o2) { return; }\n\t\tkids[index1] = o2;\n\t\tkids[index2] = o1;\n\t};\n\n\t/**\n\t * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\n\t * Container.\n\t * @method swapChildren\n\t * @param {DisplayObject} child1\n\t * @param {DisplayObject} child2\n\t */\n\tswapChildren (child1, child2) {\n\t\tlet kids = this.children;\n\t\tconst l = kids.length;\n\t\tlet index1,index2;\n\t\tfor (var i = 0; i < l; i++) {\n\t\t\tif (kids[i] === child1) { index1 = i; }\n\t\t\tif (kids[i] === child2) { index2 = i; }\n\t\t\tif (index1 != null && index2 != null) { break; }\n\t\t}\n\t\tif (i === l) { return; } // TODO: throw error?\n\t\tkids[index1] = child2;\n\t\tkids[index2] = child1;\n\t}\n\n\t/**\n\t * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.\n\t * @param {DisplayObject} child\n\t * @param {Number} index\n\t * @method setChildIndex\n\t */\n\tsetChildIndex (child, index) {\n\t\tlet kids = this.children;\n\t\tconst l = kids.length;\n\t\tif (child.parent != this || index < 0 || index >= l) { return; }\n\t\tfor (var i = 0; i < l; i++) {\n\t\t\tif (kids[i] === child) { break; }\n\t\t}\n\t\tif (i === l || i === index) { return; }\n\t\tkids.splice(i, 1);\n\t\tkids.splice(index, 0, child);\n\t}\n\n\t/**\n\t * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\n\t * of this container.\n\t * @method contains\n\t * @param {DisplayObject} child The DisplayObject to be checked.\n\t * @return {Boolean} true if the specified display object either is this container or is a descendent.\n\t */\n\tcontains (child) {\n\t\twhile (child) {\n\t\t\tif (child === this) { return true; }\n\t\t\tchild = child.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\n\t * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\n\t * transform properties including regX/Y.\n\t * @method hitTest\n\t * @param {Number} x The x position to check in the display object's local coordinates.\n\t * @param {Number} y The y position to check in the display object's local coordinates.\n\t * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\n\t * coordinates.\n\t */\n\thitTest (x, y) {\n\t\t// TODO: optimize to use the fast cache check where possible.\n\t\treturn this.getObjectUnderPoint(x, y) != null;\n\t}\n\n\t/**\n\t * Returns an array of all display objects under the specified coordinates that are in this container's display\n\t * list. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t * set to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\n\t * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\n\t * For example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\n\t * and only if the mouse's position has changed.\n\t *\n\t * <ul>\n\t *     <li>By default (mode=0) this method evaluates all display objects.</li>\n\t *     <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t * \t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\n\t * \t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\n\t * \t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\n\t * \t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\n\t * \t   \tin some cases by reducing the number of display objects that need to be tested.</li>\n\t * </li>\n\t *\n\t * This method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.\n\t * @method getObjectsUnderPoint\n\t * @param {Number} x The x position in the container to test.\n\t * @param {Number} y The y position in the container to test.\n\t * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t * @return {Array} An Array of DisplayObjects under the specified coordinates.\n\t */\n\tgetObjectsUnderPoint (x, y, mode = 0) {\n\t\tlet arr = [];\n\t\tlet pt = this.localToGlobal(x, y);\n\t\tthis._getObjectsUnderPoint(pt.x, pt.y, arr, mode > 0, mode === 1);\n\t\treturn arr;\n\t}\n\n\t/**\n\t * Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\n\t * object. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\n\t * operation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.\n\t * @method getObjectUnderPoint\n\t * @param {Number} x The x position in the container to test.\n\t * @param {Number} y The y position in the container to test.\n\t * @param {Number} [mode=0] The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\n\t * @return {DisplayObject} The top-most display object under the specified coordinates.\n\t */\n\tgetObjectUnderPoint (x, y, mode = 0) {\n\t\tlet pt = this.localToGlobal(x, y);\n\t\treturn this._getObjectsUnderPoint(pt.x, pt.y, null, mode > 0, mode === 1);\n\t}\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tgetBounds () {\n\t\treturn this._getBounds(null, true);\n\t}\n\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tgetTransformedBounds () {\n\t\treturn this._getBounds();\n\t}\n\n\t/**\n\t * Returns a clone of this Container. Some properties that are specific to this instance's current context are\n\t * reverted to their defaults (for example .parent).\n\t * @method clone\n\t * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the\n\t * properties of the container will be cloned, but the new instance will not have any children.\n\t * @return {Container} A clone of the current Container instance.\n\t */\n\tclone (recursive = false) {\n\t\tlet o = this._cloneProps(new Container());\n\t\tif (recursive) { this._cloneChildren(o); }\n\t\treturn o;\n\t}\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t */\n\t_tick (evtObj) {\n\t\tif (this.tickChildren) {\n\t\t\tfor (let i = this.children.length - 1; i >= 0; i--) {\n\t\t\t\tlet child = this.children[i];\n\t\t\t\tif (child.tickEnabled && child._tick) { child._tick(evtObj); }\n\t\t\t}\n\t\t}\n\t\tsuper._tick(evtObj);\n\t}\n\n\t/**\n\t * Recursively clones all children of this container, and adds them to the target container.\n\t * @method cloneChildren\n\t * @protected\n\t * @param {Container} o The target container.\n\t */\n\t_cloneChildren (o) {\n\t\tif (o.children.length) { o.removeAllChildren(); }\n\t\tlet arr = o.children;\n\t\tconst l = this.children.length;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tlet clone = this.children[i].clone(true);\n\t\t\tclone.parent = o;\n\t\t\tarr.push(clone);\n\t\t}\n\t}\n\n  /**\n   * Removes the child at the specified index from the display list, and sets its parent to null.\n   * Used by `removeChildAt`, `addChild`, and `addChildAt`.\n   * @method removeChildAt\n   * @protected\n   * @param {Number} index The index of the child to remove.\n   * @param {Boolean} [silent] Prevents dispatch of `removed` event if true.\n   * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\n   **/\n  _removeChildAt (index, silent = false) {\n    if (index < 0 || index > this.children.length - 1) { return false; }\n    let child = this.children[index];\n    if (child) { child.parent = null; }\n    this.children.splice(index, 1);\n    if (!silent) { child.dispatchEvent(\"removed\"); }\n    return true;\n  }\n\n\t/**\n\t * @method _getObjectsUnderPoint\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Array} arr\n\t * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.\n\t * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.\n\t * @param {Number} [currentDepth=0] Indicates the current depth of the search.\n\t * @return {DisplayObject}\n\t * @protected\n\t */\n\t_getObjectsUnderPoint (x, y, arr, mouse, activeListener, currentDepth = 0) {\n\t\tif (!currentDepth && !this._testMask(this, x, y)) { return null; }\n\t\tlet mtx, ctx = DisplayObject._hitTestContext;\n\t\tactiveListener = activeListener || (mouse && this._hasMouseEventListener());\n\n\t\t// draw children one at a time, and check if we get a hit:\n\t\tlet children = this.children;\n\t\tconst l = children.length;\n\t\tfor (let i = l - 1; i >= 0; i--) {\n\t\t\tlet child = children[i];\n\t\t\tlet hitArea = child.hitArea;\n\t\t\tif (!child.visible || (!hitArea && !child.isVisible()) || (mouse && !child.mouseEnabled)) { continue; }\n\t\t\tif (!hitArea && !this._testMask(child, x, y)) { continue; }\n\n\t\t\t// if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:\n\t\t\tif (!hitArea && child instanceof Container) {\n\t\t\t\tlet result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth + 1);\n\t\t\t\tif (!arr && result) { return (mouse && !this.mouseChildren) ? this : result; }\n\t\t\t} else {\n\t\t\t\tif (mouse && !activeListener && !child._hasMouseEventListener()) { continue; }\n\n\t\t\t\t// TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.\n\t\t\t\tlet props = child.getConcatenatedDisplayProps(child._props);\n\t\t\t\tmtx = props.matrix;\n\n\t\t\t\tif (hitArea) {\n\t\t\t\t\tmtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\n\t\t\t\t\tprops.alpha = hitArea.alpha;\n\t\t\t\t}\n\n\t\t\t\tctx.globalAlpha = props.alpha;\n\t\t\t\tctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\t\t\t\t(hitArea || child).draw(ctx);\n\t\t\t\tif (!this._testHit(ctx)) { continue; }\n\t\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\t\tctx.clearRect(0, 0, 2, 2);\n\t\t\t\tif (arr) { arr.push(child); }\n\t\t\t\telse { return (mouse && !this.mouseChildren) ? this : child; }\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @method _testMask\n\t * @param {DisplayObject} target\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Boolean} Indicates whether the x/y is within the masked region.\n\t * @protected\n\t */\n\t_testMask (target, x, y) {\n\t\tlet mask = target.mask;\n\t\tif (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }\n\n\t\tlet mtx = this._props.matrix, parent = target.parent;\n\t\tmtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\n\t\tmtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\n\n\t\tlet ctx = DisplayObject._hitTestContext;\n\t\tctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\n\n\t\t// draw the mask as a solid fill:\n\t\tmask.graphics.drawAsPath(ctx);\n\t\tctx.fillStyle = \"#000\";\n\t\tctx.fill();\n\n\t\tif (!this._testHit(ctx)) { return false; }\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, 2, 2);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @method _getBounds\n\t * @param {Matrix2D} matrix\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\n\t * @return {Rectangle}\n\t * @protected\n\t */\n\t_getBounds (matrix, ignoreTransform) {\n\t\tlet bounds = super.getBounds();\n\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\n\n\t\tlet mtx = this._props.matrix;\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\n\n\t\tconst l = this.children.length;\n\t\tlet rect = null;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tlet child = this.children[i];\n\t\t\tif (!child.visible || !(bounds = child._getBounds(mtx))) { continue; }\n\t\t\tif (rect) { rect.extend(bounds.x, bounds.y, bounds.width, bounds.height); }\n\t\t\telse { rect = bounds.clone(); }\n\t\t}\n\t\treturn rect;\n\t}\n\n}\n","/*\n* @license MouseEvent\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport Event from \"createjs/src/events/Event\";\n\n/**\n * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\n * see the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.\n * @class MouseEvent\n * @extends Event\n * @module EaselJS\n */\nexport default class MouseEvent extends Event {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @param {Number} stageX The normalized x position relative to the stage.\n\t * @param {Number} stageY The normalized y position relative to the stage.\n\t * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.\n\t * @param {Number} pointerID The unique id for the pointer.\n\t * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.\n\t * @param {Number} rawX The raw x position relative to the stage.\n\t * @param {Number} rawY The raw y position relative to the stage.\n\t * @param {DisplayObject} relatedTarget The secondary target for the event.\n\t */\n\tconstructor (type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n\t\tsuper (type, bubbles, cancelable);\n\n// public properties:\n\t\t/**\n\t\t * The normalized x position on the stage. This will always be within the range 0 to stage width.\n\t\t * @property stageX\n\t\t * @type Number\n\t\t*/\n\t\tthis.stageX = stageX;\n\n\t\t/**\n\t\t * The normalized y position on the stage. This will always be within the range 0 to stage height.\n\t\t * @property stageY\n\t\t * @type Number\n\t\t */\n\t\tthis.stageY = stageY;\n\n\t\t/**\n\t\t * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawX\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawX = (rawX==null)?stageX:rawX;\n\n\t\t/**\n\t\t * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawY\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawY = (rawY==null)?stageY:rawY;\n\n\t\t/**\n\t\t * The native MouseEvent generated by the browser. The properties and API for this\n\t\t * event may differ between browsers. This property will be null if the\n\t\t * EaselJS property was not directly generated from a native MouseEvent.\n\t\t * @property nativeEvent\n\t\t * @type HtmlMouseEvent\n\t\t * @default null\n\t\t */\n\t\tthis.nativeEvent = nativeEvent;\n\n\t\t/**\n\t\t * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\n\t\t * supplied id value.\n\t\t * @property pointerID\n\t\t * @type {Number}\n\t\t */\n\t\tthis.pointerID = pointerID;\n\n\t\t/**\n\t\t * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\n\t\t * For touch pointers, the first pointer in the current stack will be considered the primary pointer.\n\t\t * @property primary\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.primary = !!primary;\n\n\t\t/**\n\t\t * The secondary target for the event, if applicable. This is used for mouseout/rollout\n\t\t * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\n\t\t * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n\t\t *\n\t\t * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).\n\t\t * @property relatedTarget\n\t\t * @type {DisplayObject}\n\t\t */\n\t\tthis.relatedTarget = relatedTarget;\n\t}\n\n// accessor properties:\n/**\n * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n * @property localX\n * @type {Number}\n * @readonly\n */\n\tget localX () {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n\t}\n\n\t/**\n\t * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t * @property localY\n\t * @type {Number}\n\t * @readonly\n\t */\n\tget localY () {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n\t}\n\n\t/**\n\t * Indicates whether the event was generated by a touch input (versus a mouse input).\n\t * @property isTouch\n\t * @type {Boolean}\n\t * @readonly\n\t */\n\tget isTouch () {\n\t\treturn this.pointerID !== -1;\n\t}\n\n// public methods:\n\t/**\n\t * Returns a clone of the MouseEvent instance.\n\t * @method clone\n\t * @return {MouseEvent} a clone of the MouseEvent instance.\n\t */\n\tclone () {\n\t\treturn new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (type=${this.type} stageX=${this.stageX} stageY=${this.stageY})]`;\n\t}\n\n}\n","/*\n* @license Stage\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport Container from \"./Container\";\nimport DisplayObject from \"./DisplayObject\";\nimport Event from \"createjs/src/events/Event\";\nimport MouseEvent from \"../events/MouseEvent\";\n\n/**\n * A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n * method is called, it will render its display list to its target canvas.\n *\n * <h4>Example</h4>\n * This example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\n * and redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n *\n *      var stage = new createjs.Stage(\"canvasElementId\");\n *      var image = new createjs.Bitmap(\"imagePath.png\");\n *      stage.addChild(image);\n *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n *      function handleTick(event) {\n *          image.x += 10;\n *          stage.update();\n *      }\n *\n * @class Stage\n * @extends Container\n * @module EaselJS\n */\nexport default class Stage extends Container {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id\n\t * of a canvas object in the current document.\n\t */\n\tconstructor (canvas) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\n\t\t * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\n\t\t * example).\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvasId\");\n\t\t *      stage.autoClear = false;\n\t\t *\n\t\t * @property autoClear\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.autoClear = true;\n\n\t\t/**\n\t\t * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\n\t\t * first stage that will be ticked (or they will clear each other's render).\n\t\t *\n\t\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t\t * new canvas or mouse events will not work as expected. For example:\n\t\t *\n\t\t *      myStage.enableDOMEvents(false);\n\t\t *      myStage.canvas = anotherCanvas;\n\t\t *      myStage.enableDOMEvents(true);\n\t\t *\n\t\t * @property canvas\n\t\t * @type HTMLCanvasElement | Object\n\t\t */\n\t\tthis.canvas = (typeof canvas === \"string\") ? document.getElementById(canvas) : canvas;\n\n\t\t/**\n\t\t * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseX\n\t\t * @type Number\n\t\t * @readonly\n\t\t */\n\t\tthis.mouseX = 0;\n\n\t\t/**\n\t\t * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseY\n\t\t * @type Number\n\t\t * @readonly\n\t\t */\n\t\tthis.mouseY = 0;\n\n\t\t/**\n\t\t * Specifies the area of the stage to affect when calling update. This can be use to selectively\n\t\t * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.\n\t\t * @property drawRect\n\t\t * @type {Rectangle}\n\t\t */\n\t\tthis.drawRect = null;\n\n\t\t/**\n\t\t * Indicates whether display objects should be rendered on whole pixels. You can set the\n\t\t * {{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\n\t\t * display objects to false to enable/disable this behaviour on a per instance basis.\n\t\t * @property snapToPixelEnabled\n\t\t * @type Boolean\n\t\t * @default false\n\t\t */\n\t\tthis.snapToPixelEnabled = false;\n\n\t\t/**\n\t\t * Indicates whether the mouse is currently within the bounds of the canvas.\n\t\t * @property mouseInBounds\n\t\t * @type Boolean\n\t\t * @default false\n\t\t */\n\t\tthis.mouseInBounds = false;\n\n\t\t/**\n\t\t * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\n\t\t * @property tickOnUpdate\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.tickOnUpdate = true;\n\n\t\t/**\n\t\t * If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n\t\t * {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * x/y/rawX/rawY.\n\t\t * @property mouseMoveOutside\n\t\t * @type Boolean\n\t\t * @default false\n\t\t */\n\t\tthis.mouseMoveOutside = false;\n\n\n\t\t/**\n\t\t * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\n\t\t * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.\n\t\t * @property preventSelection\n\t\t * @type Boolean\n\t\t * @default true\n\t\t */\n\t\tthis.preventSelection = true;\n\n\t\t/**\n\t\t * The hitArea property is not supported for Stage.\n\t\t * @property hitArea\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\n// private properties:\n\t\t/**\n\t\t * Holds objects with data for each active pointer id. Each object has the following properties:\n\t\t * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)\n\t\t * @property _pointerData\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerData = {};\n\n\t\t/**\n\t\t * Number of active pointers.\n\t\t * @property _pointerCount\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerCount = 0;\n\n\t\t/**\n\t\t * The ID of the primary pointer.\n\t\t * @property _primaryPointerID\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._primaryPointerID = null;\n\n\t\t/**\n\t\t * @property _mouseOverIntervalID\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._mouseOverIntervalID = null;\n\n\t\t/**\n\t\t * @property _nextStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t */\n\t\tthis._nextStage = null;\n\n\t\t/**\n\t\t * @property _prevStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t */\n\t\tthis._prevStage = null;\n\n\t\tthis.enableDOMEvents(true);\n\t}\n\n// accessor properties:\n\t/**\n\t * Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\n\t * This can be useful in cases where you have multiple layered canvases and want user interactions\n\t * events to pass through. For example, this would relay mouse events from topStage to bottomStage:\n\t *\n\t *      topStage.nextStage = bottomStage;\n\t *\n\t * To disable relaying, set nextStage to null.\n\t *\n\t * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\n\t * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\n\t * Considerations when using roll over in relay targets:<OL>\n\t * <LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n\t * <LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n\t * <LI> All relay targets will share the frequency value of the top-most stage</LI>\n\t * </OL>\n\t * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n\t * 30 as it's desired frequency):\n\t * \ttopStage.nextStage = targetStage;\n\t * \ttopStage.enableMouseOver(10);\n\t * \ttargetStage.enableMouseOver(30);\n\t *\n\t * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\n\t * DOM events using:\n\t *\n\t *\ttargetStage.enableDOMEvents(false);\n\t *\n\t * @property nextStage\n\t * @type {Stage}\n\t */\n\tget nextStage () {\n\t\treturn this._nextStage;\n\t}\n\n\tset nextStage (stage) {\n\t\tif (this._nextStage) { this._nextStage._prevStage = null; }\n\t\tif (stage) { stage._prevStage = this; }\n\t\tthis._nextStage = stage;\n\t}\n\n// public methods:\n\t/**\n\t * Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\n\t * and then render the display list to the canvas.\n\t *\n\t * @method update\n\t * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.\n\t */\n\tupdate (props) {\n\t\tif (!this.canvas) { return; }\n\t\tif (this.tickOnUpdate) { this.tick(props); }\n\t\tif (this.dispatchEvent(\"drawstart\", false, true) === false) { return; }\n\t\tDisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n\t\tlet r = this.drawRect, ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tif (this.autoClear) {\n\t\t\tif (r) { ctx.clearRect(r.x, r.y, r.width, r.height); }\n\t\t\telse { ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); }\n\t\t}\n\t\tctx.save();\n\t\tif (this.drawRect) {\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(r.x, r.y, r.width, r.height);\n\t\t\tctx.clip();\n\t\t}\n\t\tthis.updateContext(ctx);\n\t\tthis.draw(ctx, false);\n\t\tctx.restore();\n\t\tthis.dispatchEvent(\"drawend\");\n\t}\n\n\t/**\n\t * Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n\t *\n\t * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\n\t * propagated to listeners.\n\t *\n\t * Some time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\n\t * a {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\n\t * passed as the `props` parameter to `tick()`. For example:\n\t *\n\t * \tTicker.on(\"tick\", handleTick);\n\t * \tfunction handleTick(evtObj) {\n\t * \t\t// clone the event object from Ticker, and add some custom data to it:\n\t * \t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n\t *\n\t * \t\t// pass it to stage.update():\n\t * \t\tmyStage.update(evt); // subsequently calls tick() with the same param\n\t * \t}\n\t *\n\t * \t// ...\n\t * \tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n\t * \tfunction handleDisplayObjectTick(evt) {\n\t * \t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n\t * \t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n\t * \t}\n\t *\n\t * @method tick\n\t * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.\n\t */\n\ttick (props) {\n\t\tif (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) { return; }\n\t\tlet evtObj = new Event(\"tick\");\n\t\tif (props) {\n\t\t\tfor (let n in props) {\n\t\t\t\tif (props.hasOwnProperty(n)) { evtObj[n] = props[n]; }\n\t\t\t}\n\t\t}\n\t\tthis._tick(evtObj);\n\t\tthis.dispatchEvent(\"tickend\");\n\t}\n\n\t/**\n\t * Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\n\t * event is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t * directly, using:\n\t *\n\t *      Ticker.addEventListener(\"tick\", myStage\");\n\t *\n\t * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\n\t * display object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.\n\t * @property handleEvent\n\t * @type Function\n\t */\n\thandleEvent (evt) {\n\t\tif (evt.type === \"tick\") { this.update(evt); }\n\t}\n\n\t/**\n\t * Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.\n\t * @method clear\n\t */\n\tclear () {\n\t\tif (!this.canvas) { return; }\n\t\tlet ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1);\n\t}\n\n\t/**\n\t * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\n\t * be specified as the src value of an image element.\n\t * @method toDataURL\n\t * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color\n\t * value is allowed. The default value is a transparent background.\n\t * @param {String} [mimeType=\"image/png\"] The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\n\t * is passed in, or if the browser does not support the specified MIME type, the default value will be used.\n\t * @return {String} a Base64 encoded image.\n\t */\n\ttoDataURL (backgroundColor, mimeType = \"image/png\") {\n\t\tlet data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;\n\n\t\tif (backgroundColor) {\n\t\t\tdata = ctx.getImageData(0, 0, w, h);\n\t\t\tvar compositeOperation = ctx.globalCompositeOperation;\n\t\t\tctx.globalCompositeOperation = \"destination-over\";\n\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tctx.fillRect(0, 0, w, h);\n\t\t}\n\n\t\tlet dataURL = this.canvas.toDataURL(mimeType);\n\n\t\tif (backgroundColor) {\n\t\t\tctx.putImageData(data, 0, 0);\n\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t}\n\n\t\treturn dataURL;\n\t};\n\n\t/**\n\t * Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\n\t * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled\n\t * independently of mouse move events via the optional `frequency` parameter.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var stage = new createjs.Stage(\"canvasId\");\n\t *      stage.enableMouseOver(10); // 10 updates per second\n\t *\n\t * @method enableMouseOver\n\t * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast\n\t * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\n\t * responsive, but uses less CPU.\n\t */\n\tenableMouseOver (frequency = 20) {\n\t\tif (this._mouseOverIntervalID) {\n\t\t\tclearInterval(this._mouseOverIntervalID);\n\t\t\tthis._mouseOverIntervalID = null;\n\t\t\tif (frequency === 0) {\n\t\t\t\tthis._testMouseOver(true);\n\t\t\t}\n\t\t}\n\t\tif (frequency <= 0) { return; }\n\t\tthis._mouseOverIntervalID = setInterval(() => this._testMouseOver(), 1000/Math.min(50,frequency));\n\t}\n\n\t/**\n\t * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\n\t * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\n\t * events from the page.\n\t *\n\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t * new canvas or mouse events will not work as expected. For example:\n\t *\n\t *      myStage.enableDOMEvents(false);\n\t *      myStage.canvas = anotherCanvas;\n\t *      myStage.enableDOMEvents(true);\n\t *\n\t * @method enableDOMEvents\n\t * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.\n\t */\n\tenableDOMEvents (enable = true) {\n\t\tlet ls = this._eventListeners;\n\t\tif (!enable && ls) {\n\t\t\tfor (let n in ls) {\n\t\t\t\tlet o = ls[n];\n\t\t\t\to.t.removeEventListener(n, o.f, false);\n\t\t\t}\n\t\t\tthis._eventListeners = null;\n\t\t} else if (enable && !ls && this.canvas) {\n\t\t\tlet t = window.addEventListener ? window : document;\n\t\t\tls = this._eventListeners = {\n\t\t\t\tmouseup: {t, f:e => this._handleMouseUp(e) },\n\t\t\t\tmousemove: {t, f:e => this._handleMouseMove(e) },\n\t\t\t\tdblclick: {t:this.canvas, f:e => this._handleDoubleClick(e) },\n\t\t\t\tmousedown: {t:this.canvas, f:e => this._handleMouseDown(e) }\n\t\t\t};\n\t\t\tfor (let n in ls) {\n\t\t\t\tlet o = ls[n];\n\t\t\t\to.t.addEventListener(n, o.f, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stage instances cannot be cloned.\n\t * @method clone\n\t */\n\tclone () {\n\t\tthrow(\"Stage cannot be cloned.\");\n\t}\n\n// private methods:\n\t/**\n\t * @method _getElementRect\n\t * @protected\n\t * @param {HTMLElement} e\n\t */\n\t_getElementRect (e) {\n\t\tlet bounds;\n\t\ttry { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9\n\t\tcatch (err) { bounds = {top:e.offsetTop, left:e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }\n\n\t\tlet offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n\t\tlet offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop  || document.body.clientTop  || 0);\n\n\t\tlet styles = window.getComputedStyle ? getComputedStyle(e, null) : e.currentStyle; // IE <9 compatibility.\n\t\tlet padL = parseInt(styles.paddingLeft)+parseInt(styles.borderLeftWidth);\n\t\tlet padT = parseInt(styles.paddingTop)+parseInt(styles.borderTopWidth);\n\t\tlet padR = parseInt(styles.paddingRight)+parseInt(styles.borderRightWidth);\n\t\tlet padB = parseInt(styles.paddingBottom)+parseInt(styles.borderBottomWidth);\n\n\t\t// note: in some browsers bounds properties are read only.\n\t\treturn {\n\t\t\tleft: bounds.left+offX+padL,\n\t\t\tright: bounds.right+offX-padR,\n\t\t\ttop: bounds.top+offY+padT,\n\t\t\tbottom: bounds.bottom+offY-padB\n\t\t};\n\t}\n\n\t/**\n\t * @method _getPointerData\n\t * @protected\n\t * @param {Number} id\n\t */\n\t_getPointerData (id) {\n\t\tlet data = this._pointerData[id];\n\t\tif (!data) { data = this._pointerData[id] = {x:0, y:0}; }\n\t\treturn data;\n\t}\n\n\t/**\n\t * @method _handleMouseMove\n\t * @protected\n\t * @param {MouseEvent} [e=window.event]\n\t */\n\t_handleMouseMove (e = window.event) {\n\t\tthis._handlePointerMove(-1, e, e.pageX, e.pageY);\n\t}\n\n\t/**\n\t * @method _handlePointerMove\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t */\n\t_handlePointerMove (id, e, pageX, pageY, owner) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\tif (!this.canvas) { return; }\n\t\tlet nextStage=this._nextStage, o=this._getPointerData(id);\n\n\t\tlet inBounds = o.inBounds;\n\t\tthis._updatePointerPosition(id, e, pageX, pageY);\n\t\tif (inBounds || o.inBounds || this.mouseMoveOutside) {\n\t\t\tif (id === -1 && o.inBounds === !inBounds) {\n\t\t\t\tthis._dispatchMouseEvent(this, (inBounds ? \"mouseleave\" : \"mouseenter\"), false, id, o, e);\n\t\t\t}\n\n\t\t\tthis._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n\t\t\tthis._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n\t\t}\n\n\t\tnextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);\n\t}\n\n\t/**\n\t * @method _updatePointerPosition\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t */\n\t_updatePointerPosition (id, e, pageX, pageY) {\n\t\tlet rect = this._getElementRect(this.canvas);\n\t\tpageX -= rect.left;\n\t\tpageY -= rect.top;\n\n\t\tlet w = this.canvas.width;\n\t\tlet h = this.canvas.height;\n\t\tpageX /= (rect.right-rect.left)/w;\n\t\tpageY /= (rect.bottom-rect.top)/h;\n\t\tlet o = this._getPointerData(id);\n\t\tif (o.inBounds = (pageX >= 0 && pageY >= 0 && pageX <= w-1 && pageY <= h-1)) {\n\t\t\to.x = pageX;\n\t\t\to.y = pageY;\n\t\t} else if (this.mouseMoveOutside) {\n\t\t\to.x = pageX < 0 ? 0 : (pageX > w-1 ? w-1 : pageX);\n\t\t\to.y = pageY < 0 ? 0 : (pageY > h-1 ? h-1 : pageY);\n\t\t}\n\n\t\to.posEvtObj = e;\n\t\to.rawX = pageX;\n\t\to.rawY = pageY;\n\n\t\tif (id === this._primaryPointerID || id === -1) {\n\t\t\tthis.mouseX = o.x;\n\t\t\tthis.mouseY = o.y;\n\t\t\tthis.mouseInBounds = o.inBounds;\n\t\t}\n\t}\n\n\t/**\n\t * @method _handleMouseUp\n\t * @protected\n\t * @param {MouseEvent} e\n\t */\n\t_handleMouseUp (e) {\n\t\tthis._handlePointerUp(-1, e, false);\n\t}\n\n\t/**\n\t * @method _handlePointerUp\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Boolean} clear\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t */\n\t_handlePointerUp (id, e, clear, owner) {\n\t\tlet nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\n\t\tlet target=null, oTarget = o.target;\n\t\tif (!owner && (oTarget || nextStage)) { target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\n\t\tif (o.down) { this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target); o.down = false; }\n\n\t\tif (target === oTarget) { this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e); }\n\t\tthis._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n\n\t\tif (clear) {\n\t\t\tif (id==this._primaryPointerID) { this._primaryPointerID = null; }\n\t\t\tdelete(this._pointerData[id]);\n\t\t} else { o.target = null; }\n\n\t\tnextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);\n\t}\n\n\t/**\n\t * @method _handleMouseDown\n\t * @protected\n\t * @param {MouseEvent} e\n\t */\n\t_handleMouseDown (e) {\n\t\tthis._handlePointerDown(-1, e, e.pageX, e.pageY);\n\t}\n\n\t/**\n\t * @method _handlePointerDown\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t */\n\t_handlePointerDown (id, e, pageX, pageY, owner) {\n\t\tif (this.preventSelection) { e.preventDefault(); }\n\t\tif (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.\n\n\t\tif (pageY != null) { this._updatePointerPosition(id, e, pageX, pageY); }\n\t\tlet target = null, nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (!owner) { target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\n\t\tif (o.inBounds) { this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target); o.down = true; }\n\t\tthis._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n\n\t\tnextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n\t}\n\n\t/**\n\t * @method _testMouseOver\n\t * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t * @param {Stage} eventTarget The stage that the cursor is actively over.\n\t * @protected\n\t */\n\t_testMouseOver (clear, owner, eventTarget) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\n\t\tlet nextStage = this._nextStage;\n\t\tif (!this._mouseOverIntervalID) {\n\t\t\t// not enabled for mouseover, but should still relay the event.\n\t\t\tnextStage&&nextStage._testMouseOver(clear, owner, eventTarget);\n\t\t\treturn;\n\t\t}\n\t\tlet o = this._getPointerData(-1);\n\t\t// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.\n\t\tif (!o || (!clear && this.mouseX === this._mouseOverX && this.mouseY === this._mouseOverY && this.mouseInBounds)) { return; }\n\n\t\tlet e = o.posEvtObj;\n\t\tlet isEventTarget = eventTarget || e&&(e.target === this.canvas);\n\t\tlet target=null, common = -1, cursor=\"\";\n\n\t\tif (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n\t\t\ttarget = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n\t\t\tthis._mouseOverX = this.mouseX;\n\t\t\tthis._mouseOverY = this.mouseY;\n\t\t}\n\n\t\tlet oldList = this._mouseOverTarget||[];\n\t\tlet oldTarget = oldList[oldList.length-1];\n\t\tlet list = this._mouseOverTarget = [];\n\n\t\t// generate ancestor list and check for cursor:\n\t\tlet t = target;\n\t\twhile (t) {\n\t\t\tlist.unshift(t);\n\t\t\tif (!cursor) { cursor = t.cursor; }\n\t\t\tt = t.parent;\n\t\t}\n\t\tthis.canvas.style.cursor = cursor;\n\t\tif (!owner && eventTarget) { eventTarget.canvas.style.cursor = cursor; }\n\n\t\t// find common ancestor:\n\t\tfor (let i=0,l=list.length; i<l; i++) {\n\t\t\tif (list[i] != oldList[i]) { break; }\n\t\t\tcommon = i;\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n\t\t}\n\n\t\tfor (let i=oldList.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n\t\t}\n\n\t\tfor (let i=list.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n\t\t}\n\n\t\tnextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n\t}\n\n\t/**\n\t * @method _handleDoubleClick\n\t * @protected\n\t * @param {MouseEvent} e\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t */\n\t_handleDoubleClick (e, owner) {\n\t\tlet target=null, nextStage=this._nextStage, o=this._getPointerData(-1);\n\t\tif (!owner) {\n\t\t\ttarget = this._getObjectsUnderPoint(o.x, o.y, null, true);\n\t\t\tthis._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n\t\t}\n\t\tnextStage&&nextStage._handleDoubleClick(e, owner || target && this);\n\t}\n\n\t/**\n\t * @method _dispatchMouseEvent\n\t * @protected\n\t * @param {DisplayObject} target\n\t * @param {String} type\n\t * @param {Boolean} bubbles\n\t * @param {Number} pointerId\n\t * @param {Object} o\n\t * @param {MouseEvent} [nativeEvent]\n\t * @param {DisplayObject} [relatedTarget]\n\t */\n\t_dispatchMouseEvent (target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n\t\t// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.\n\t\tif (!target || (!bubbles && !target.hasEventListener(type))) { return; }\n\t\t/*\n\t\t// TODO: account for stage transformations?\n\t\tthis._mtx = this.getConcatenatedMatrix(this._mtx).invert();\n\t\tlet pt = this._mtx.transformPoint(o.x, o.y);\n\t\tlet evt = new MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);\n\t\t*/\n\t\tlet evt = new MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n\t\ttarget.dispatchEvent(evt);\n\t}\n\n}\n\n// events:\n/**\n * Dispatched when the user moves the mouse over the canvas.\n * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n * @event stagemousemove\n * @since 0.6.0\n */\n\n/**\n * Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n * class for a listing of event properties.\n * @event stagemousedown\n * @since 0.6.0\n */\n\n/**\n * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\n * You can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\n * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n * @event stagemouseup\n * @since 0.6.0\n */\n\n/**\n * Dispatched when the mouse moves from within the canvas area (mouseInBounds === true) to outside it (mouseInBounds === false).\n * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n * class for a listing of event properties.\n * @event mouseleave\n * @since 0.7.0\n */\n\n/**\n * Dispatched when the mouse moves into the canvas area (mouseInBounds === false) from outside it (mouseInBounds === true).\n * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n * class for a listing of event properties.\n * @event mouseenter\n * @since 0.7.0\n */\n\n/**\n * Dispatched each update immediately before the tick event is propagated through the display list.\n * You can call preventDefault on the event object to cancel propagating the tick event.\n * @event tickstart\n * @since 0.7.0\n */\n\n/**\n * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\n * tickOnUpdate is false. Precedes the \"drawstart\" event.\n * @event tickend\n * @since 0.7.0\n */\n\n/**\n * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n * You can call preventDefault on the event object to cancel the draw.\n * @event drawstart\n * @since 0.7.0\n */\n\n/**\n * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.\n * @event drawend\n * @since 0.7.0\n */\n","/*\n* @license StageGL\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport Stage from \"./Stage\";\nimport Container from \"./Container\";\nimport Matrix2D from \"../geom/Matrix2D\";\n\n/*\n * README IF EDITING:\n * Terminology for developers:\n *\n * Vertex: a point that help defines a shape, 3 per triangle. Usually has an x,y,z but can have more/less info.\n * Vertex Property: a piece of information attached to the vertex like a vector3 containing x,y,z\n * Index/Indices: used in groups of 3 to define a triangle, points to vertices by their index in an array (some render\n * \t\tmodes do not use these)\n * Card: a group of 2 triangles used to display a rectangular image\n * U/V: common names for the [0-1] texture co-ordinates on an image\n * Batch: a single call to the renderer, best done as little as possible so multiple cards are put into a single batch\n * Buffer: WebGL array data\n * Program/Shader: For every vertex we run the Vertex shader. The results are used per pixel by the Fragment shader. When\n * \t\tcombined and paired these are a shader \"program\"\n * Texture: WebGL representation of image data and associated extra information\n * Slot: A space on the GPU into which textures can be loaded for use in a batch, using \"ActiveTexture\" switches texture slot.\n *\n * @uglify\n */\n\n/**\n * A StageGL instance is the root level {{#crossLink \"Container\"}}{{/crossLink}} for an WebGL-optimized display list,\n * which is used in place of the usual {{#crossLink \"Stage\"}}{{/crossLink}}. This class should behave identically to\n * a {{#crossLink \"Stage\"}}{{/crossLink}} except for WebGL-specific functionality.\n *\n * Each time the {{#crossLink \"Stage/tick\"}}{{/crossLink}} method is called, the display list is rendered to the\n * target &lt;canvas/&gt; instance, ignoring non-WebGL-compatible display objects. On devices and browsers that don't\n * support WebGL, content will automatically be rendered to canvas 2D context instead.\n *\n * <h4>Limitations</h4>\n * - {{#crossLink \"Shape\"}}{{/crossLink}}, {{#crossLink \"Shadow\"}}{{/crossLink}}, and {{#crossLink \"Text\"}}{{/crossLink}}\n * \tare not rendered when added to the display list.\n * - To display something StageGL cannot render, {{#crossLink \"displayObject/cache\"}}{{/crossLink}} the object.\n *\tCaches can be rendered regardless of source.\n * - Images are wrapped as a webGL \"Texture\". Each graphics card has a limit to its concurrent Textures, too many\n * Textures will noticeably slow performance.\n * - Each cache counts as an individual Texture. As such {{#crossLink \"SpriteSheet\"}}{{/crossLink}} and\n * {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}} are recommended practices to help keep texture counts low.\n * - To use any image node (DOM Image/Canvas Element) between multiple StageGL instances it must be a\n * {{#crossLink \"Bitmap/clone\"}}{{/crossLink}}, otherwise the GPU texture loading and tracking  will get confused.\n * - You must call {{#crossLink \"StageGL/updateViewport\"}}{{/crossLink}} if you resize your canvas after making\n * a StageGL instance, this will properly size the WebGL context stored in memory, this won't change the DOM element.\n * - Best performance will come from manual management of texture memory, but it is handled automatically by default.\n * See {{#crossLink \"StageGL/releaseTexture\"}}{{/crossLink}} for details.\n *\n * <h4>Example</h4>\n * This example creates a StageGL instance, adds a child to it, then uses the EaselJS {{#crossLink \"Ticker\"}}{{/crossLink}}\n * to update the child and redraw the stage.\n *\n *      var stage = new createjs.StageGL(\"canvasElementId\", false, false);\n *\n *      var image = new createjs.Bitmap(\"imagePath.png\");\n *      stage.addChild(image);\n *\n *      createjs.Ticker.on(\"tick\", handleTick);\n *\n *      function handleTick(event) {\n *          image.x += 10;\n *          stage.update();\n *      }\n *\n * <h4>Notes</h4>\n * - StageGL is not currently included in the minified version of EaselJS.\n * - {{#crossLink \"SpriteContainer\"}}{{/crossLink}} (the previous approach to WebGL with EaselJS) has been deprecated.\n * - Earlier versions of WebGL support in EaselJS (SpriteStage and SpriteContainer) had hard limitations on images\n * \tper container, which have been solved.\n *\n * @class StageGL\n * @extends Stage\n * @module EaselJS\n */\nexport default class StageGL extends Stage {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {HTMLCanvasElement | String | Object} canvas A canvas object that StageGL will render to, or the string id\n\t *  of a canvas object in the current DOM.\n\t * @param {Object} options All the option parameters in a reference object.\n\t * @param {Boolean} [options.preserveBuffer=false] If `true`, the canvas is NOT auto-cleared by WebGL (the spec\n\t *  discourages setting this to `true`). This is useful if you want persistent draw effects.\n\t * @param {Boolean} [options.antialias=false] Specifies whether or not the browser's WebGL implementation should try\n\t *  to perform anti-aliasing. This will also enable linear pixel sampling on power-of-two textures (smoother images).\n\t * @param {Boolean} [options.transparent=false] If `true`, the canvas is transparent. This is <strong>very</strong>\n\t * expensive, and should be used with caution.\n\t * @param {Boolean} [options.premultiply=false] Alters color handling. If `true`, this assumes the shader must\n\t * account for pre-multiplied alpha. This can help avoid visual halo effects with some assets, but may also cause\n\t * problems with other assets.\n\t * @param {Integer} [options.autoPurge=1200] How often the system should automatically dump unused textures with\n\t * `purgeTextures(autoPurge)` every `autoPurge/2` draws. See {{#crossLink \"StageGL/purgeTextures\"}}{{/crossLink}} for more\n\t * information.\n\t */\n\tconstructor (canvas, { preserveBuffer = false, antialias = false, transparent = false, premultiply = false, autoPurge = 1200 }) {\n\t\tsuper(canvas);\n\n// public properties:\n\t\t/**\n\t\t * Console log potential issues and problems. This is designed to have <em>minimal</em> performance impact, so\n\t\t * if extensive debugging information is required, this may be inadequate. See {{#crossLink \"WebGLInspector\"}}{{/crossLink}}\n\t\t * @property vocalDebug\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.vocalDebug = false;\n\n// private properties:\n\t\t/**\n\t\t * Specifies whether or not the canvas is auto-cleared by WebGL. The WebGL spec discourages `true`.\n\t\t * If true, the canvas is NOT auto-cleared by WebGL. Used when the canvas context is created and requires\n\t\t * context re-creation to update.\n\t\t * @property _preserveBuffer\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._preserveBuffer = preserveBuffer;\n\n\t\t/**\n\t\t * Specifies whether or not the browser's WebGL implementation should try to perform anti-aliasing.\n\t\t * @property _antialias\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._antialias = antialias;\n\n\t\t/**\n\t\t * Specifies whether or not the browser's WebGL implementation should be transparent.\n\t\t * @property _transparent\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._transparent = transparent;\n\n\t\t/**\n\t\t * Specifies whether or not StageGL is handling colours as premultiplied alpha.\n\t\t * @property _premultiply\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._premultiply = premultiply;\n\n\t\t/**\n\t\t * Internal value of {{#crossLink \"StageGL/autoPurge\"}}{{/crossLink}}\n\t\t * @property _autoPurge\n\t\t * @protected\n\t\t * @type {Integer}\n\t\t * @default null\n\t\t */\n\t\tthis._autoPurge = autoPurge;\n\n\t\t/**\n\t\t * The width of the drawing surface used in memory.\n\t\t * @property _viewportWidth\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._viewportWidth = 0;\n\n\t\t/**\n\t\t * The height of the drawing surface used in memory.\n\t\t * @property _viewportHeight\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._viewportHeight = 0;\n\n\t\t/**\n\t\t * A 2D projection matrix used to convert WebGL's viewspace into canvas co-ordinates. Regular canvas display\n\t\t * uses Top-Left values of [0,0] where WebGL uses a Center [0,0] Top-Right [1,1] system.\n\t\t * @property _projectionMatrix\n\t\t * @protected\n\t\t * @type {Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis._projectionMatrix = null;\n\n\t\t/**\n\t\t * The current WebGL canvas context. Often shorthanded to just \"gl\" in many parts of the code.\n\t\t * @property _webGLContext\n\t\t * @protected\n\t\t * @type {WebGLRenderingContext}\n\t\t * @default null\n\t\t */\n\t\tthis._webGLContext = null;\n\n\t\t/**\n\t\t * The color to use when the WebGL canvas has been cleared.\n\t\t * @property _clearColor\n\t\t * @protected\n\t\t * @type {Object}\n\t\t * @default {r: 0.00, g: 0.00, b: 0.00, a: 0.00} (black)\n\t\t */\n\t\tthis._clearColor = {r: 0.00, g: 0.00, b: 0.00, a: 0.00};\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TODO: formalize this approach into regular canvases\n\n\t\t/**\n\t\t * The maximum number of cards (aka a single sprite) that can be drawn in one draw call. Use getter/setters to\n\t\t * modify otherwise internal buffers may be incorrect sizes.\n\t\t * @property _maxCardsPerBatch\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default StageGL.DEFAULT_MAX_BATCH_SIZE (10000)\n\t\t */\n\t\tthis._maxCardsPerBatch = StageGL.DEFAULT_MAX_BATCH_SIZE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TODO: write getter/setters for this\n\n\t\t/**\n\t\t * The shader program used to draw the current batch.\n\t\t * @property _activeShader\n\t\t * @protected\n\t\t * @type {WebGLProgram}\n\t\t * @default null\n\t\t */\n\t\tthis._activeShader = null;\n\n\t\t/**\n\t\t * The vertex position data for the current draw call.\n\t\t * @property _vertices\n\t\t * @protected\n\t\t * @type {Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis._vertices = null;\n\n\t\t/**\n\t\t * The WebGL buffer attached to {{#crossLink \"StageGL/_vertices:property\"}}{{/crossLink}}.\n\t\t * @property _vertexPositionBuffer\n\t\t * @protected\n\t\t * @type {WebGLBuffer}\n\t\t * @default null\n\t\t */\n\t\tthis._vertexPositionBuffer = null;\n\n\t\t/**\n\t\t * The vertex U/V data for the current draw call.\n\t\t * @property _uvs\n\t\t * @protected\n\t\t * @type {Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis._uvs = null;\n\n\t\t/**\n\t\t * The WebGL buffer attached to {{#crossLink \"StageGL/_uvs:property\"}}{{/crossLink}}.\n\t\t * @property _uvPositionBuffer\n\t\t * @protected\n\t\t * @type {WebGLBuffer}\n\t\t * @default null\n\t\t */\n\t\tthis._uvPositionBuffer = null;\n\n\t\t/**\n\t\t * The vertex indices data for the current draw call.\n\t\t * @property _indices\n\t\t * @protected\n\t\t * @type {Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis._indices = null;\n\n\t\t/**\n\t\t * The WebGL buffer attached to {{#crossLink \"StageGL/_indices:property\"}}{{/crossLink}}.\n\t\t * @property _textureIndexBuffer\n\t\t * @protected\n\t\t * @type {WebGLBuffer}\n\t\t * @default null\n\t\t */\n\t\tthis._textureIndexBuffer = null;\n\n\t\t/**\n\t\t * The vertices data for the current draw call.\n\t\t * @property _alphas\n\t\t * @protected\n\t\t * @type {Float32Array}\n\t\t * @default null\n\t\t */\n\t\tthis._alphas = null;\n\n\t\t/**\n\t\t * The WebGL buffer attached to {{#crossLink \"StageGL/_alphas:property\"}}{{/crossLink}}.\n\t\t * @property _alphaBuffer\n\t\t * @protected\n\t\t * @type {WebGLBuffer}\n\t\t * @default null\n\t\t */\n\t\tthis._alphaBuffer = null;\n\n\t\t/**\n\t\t * An index based lookup of every WebGL Texture currently in use.\n\t\t * @property _drawTexture\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._textureDictionary = [];\n\n\t\t/**\n\t\t * A string based lookup hash of which index a texture is stored at in the dictionary. The lookup string is\n\t\t * often the src url.\n\t\t * @property _textureIDs\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._textureIDs = {};\n\n\t\t/**\n\t\t * An array of all the textures currently loaded into the GPU. The index in the array matches the GPU index.\n\t\t * @property _batchTextures\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._batchTextures = [];\n\n\t\t/**\n\t\t * An array of all the simple filler textures used to prevent issues with missing textures in a batch.\n\t\t * @property _baseTextures\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._baseTextures = [];\n\n\t\t/**\n\t\t * The number of concurrent textures the GPU can handle. This value is dynamically set from WebGL during initialization\n\t\t * via `gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)`. The WebGL spec states that the lowest guaranteed value is 8,\n\t\t * but it could be higher. Do not set this value higher than the value returned by the GPU. Setting it lower will\n\t\t * probably reduce performance, but may be advisable to reserve slots for custom filter work.\n\t\t * NOTE: Can also act as a length for {{#crossLink \"StageGL/_batchTextures:property\"}}.\n\t\t * @property _batchTextureCount\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 8\n\t\t */\n\t\tthis._batchTextureCount = 8;\n\n\t\t/**\n\t\t * The location at which the last texture was inserted into a GPU slot in {{#crossLink \"StageGL/_batchTextures:property\"}}{{/crossLink}}.\n\t\t * Manual control of this variable can yield improvements in performance by intelligently replacing textures\n\t\t * inside a batch. It is impossible to write automated general use code, as it requires display list inspection\n\t\t * and/or foreknowledge.\n\t\t * @property _lastTextureInsert\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default -1\n\t\t */\n\t\tthis._lastTextureInsert = -1;\n\n\t\t/**\n\t\t * The current batch being drawn, A batch consists of a call to `drawElements` on the GPU. Many of these calls\n\t\t * can occur per draw.\n\t\t * @property _batchId\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._batchID = 0;\n\n\t\t/**\n\t\t * The current draw being performed, and may contain multiple batches. Comparing to {{#crossLink \"StageGL/_batchID:property\"}}{{/crossLink}}\n\t\t * can reveal batching efficiency.\n\t\t * @property _drawID\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._drawID = 0;\n\n\t\t/**\n\t\t * Used to prevent textures in certain GPU slots from being replaced by an insert.\n\t\t * @property _slotBlackList\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._slotBlacklist = [];\n\n\t\t/**\n\t\t * Used to prevent nested draw calls from accidentally overwriting drawing information by tracking depth.\n\t\t * @property _isDrawing\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._isDrawing = 0;\n\n\t\t/**\n\t\t * Used to ensure every canvas used has a unique ID.\n\t\t * @property _lastTrackedCanvas\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default -1\n\t\t */\n\t\tthis._lastTrackedCanvas = -1;\n\n\t\t/**\n\t\t * Controls whether final rendering output of a {{#crossLink \"cacheDraw\"}}{{/crossLink}} is the canvas or a render\n\t\t * texture. See the {{#crossLink \"cache\"}}{{/crossLink}} function modifications for full implications and discussion.\n\t\t * @property isCacheControlled\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @todo LM: is this supposed to be _isCacheControlled since its private?\n\t\t */\n\t\tthis.isCacheControlled = false;\n\n\t\t/**\n\t\t * Used to counter-position the object being cached so it aligns with the cache surface.\n\t\t * @property _cacheContainer\n\t\t * @protected\n\t\t * @type {Container}\n\t\t * @default An instance of an EaselJS Container.\n\t\t */\n\t\tthis._cacheContainer = new Container();\n\n\t\tthis._initializeWebGL();\n\t}\n\n// static methods:\n\t/**\n\t * Calculate the U/V co-ordinate based info for sprite frames. Instead of pixel count it uses a 0-1 space. Also includes\n\t * the ability to get info back for a specific frame, or only calculate that one frame.\n\t *\n\t *     //generate UV rects for all entries\n\t *     StageGL.buildUVRects( spriteSheetA );\n\t *     //generate all, fetch the first\n\t *     var firstFrame = StageGL.buildUVRects( spriteSheetB, 0 );\n\t *     //generate the rect for just a single frame for performance's sake\n\t *     var newFrame = StageGL.buildUVRects( dynamicSpriteSheet, newFrameIndex, true );\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method buildUVRects\n\t * @param  {SpriteSheet} spritesheet The spritesheet to find the frames on\n\t * @param  {int} [target=-1] The index of the frame to return\n\t * @param  {Boolean} [onlyTarget=false] Whether \"target\" is the only frame that gets calculated\n\t * @static\n\t * @return {Object} the target frame if supplied and present or a generic frame {t, l, b, r}\n\t */\n\tstatic buildUVRects (spritesheet, target = -1, onlyTarget = false) {\n\t\tif (!spritesheet || !spritesheet._frames) { return null; }\n\n\t\tlet start = (target != -1 && onlyTarget) ? target : 0;\n\t\tlet end = (target != -1 && onlyTarget) ? target+1 : spritesheet._frames.length;\n\t\tfor (let i=start; i<end; i++) {\n\t\t\tlet f = spritesheet._frames[i];\n\t\t\tif (f.uvRect || f.image.width <= 0 || f.image.height <= 0) { continue; }\n\n\t\t\tlet r = f.rect;\n\t\t\tf.uvRect = {\n\t\t\t\tt: r.y / f.image.height,\n\t\t\t\tl: r.x / f.image.width,\n\t\t\t\tb: (r.y + r.height) / f.image.height,\n\t\t\t\tr: (r.x + r.width) / f.image.width\n\t\t\t};\n\t\t}\n\t\t// make a copy of the default rect to avoid users modifying the returned object\n\t\t// only create it if needed to avoid slowing down the normal path\n\t\tlet r = StageGL.UV_RECT;\n\t\treturn spritesheet._frames[(target != -1) ? target : 0].uvRect\n\t\t\t|| { t: r.t, l: r.l, b: r.b, r: r.r };\n\t}\n\n\t/**\n\t * Test a context to see if it has WebGL enabled on it.\n\t * @method isWebGLActive\n\t * @param {CanvasContext} ctx The context to test\n\t * @static\n\t * @return {Boolean} Whether WebGL is enabled\n\t */\n\tstatic isWebGLActive (ctx) {\n\t\treturn ctx &&\n\t\t\tctx instanceof WebGLRenderingContext &&\n\t\t\ttypeof WebGLRenderingContext !== 'undefined';\n\t}\n\n// accessor properties:\n\t/**\n\t * Indicates whether WebGL is being used for rendering. For example, this would be `false` if WebGL is not\n\t * supported in the browser.\n\t * @property isWebGL\n\t * @type {Boolean}\n\t * @readonly\n\t */\n\tget isWebGL () {\n\t\treturn !!this._webGLContext;\n\t}\n\n\t/**\n\t * Specifies whether or not StageGL is automatically purging unused textures. Higher numbers purge less\n\t * often. Values below 10 are upgraded to 10, and -1 disables this feature.\n\t * @property autoPurge\n\t * @protected\n\t * @type {Integer}\n\t * @default 1000\n\t */\n\tget autoPurge () {\n\t\treturn Number(this._autoPurge);\n\t}\n\n\tset autoPurge (autoPurge) {\n\t\tautoPurge = isNaN(autoPurge) ? 1200 : autoPurge;\n\t\tif (autoPurge != -1 && autoPurge < 10) { autoPurge = 10; }\n\t\tthis._autoPurge = autoPurge;\n\t}\n\n// constructor methods:\n\t/**\n\t * Create and properly initialize the WebGL instance.\n\t * @method _initializeWebGL\n\t * @protected\n\t * @return {WebGLRenderingContext}\n\t */\n\t_initializeWebGL () {\n\t\tif (this.canvas) {\n\t\t\tif (!this._webGLContext || this._webGLContext.canvas !== this.canvas) {\n\t\t\t\t// A context hasn't been defined yet,\n\t\t\t\t// OR the defined context belongs to a different canvas, so reinitialize.\n\n\t\t\t\t// defaults and options\n\t\t\t\tconst options = {\n\t\t\t\t\tdepth: false, // Disable the depth buffer as it isn't used.\n\t\t\t\t\talpha: this._transparent, // Make the canvas background transparent.\n\t\t\t\t\tstencil: true,\n\t\t\t\t\tantialias: this._antialias,\n\t\t\t\t\tpremultipliedAlpha: this._premultiply, // Assume the drawing buffer contains colors with premultiplied alpha.\n\t\t\t\t\tpreserveDrawingBuffer: this._preserveBuffer\n\t\t\t\t};\n\n\t\t\t\tlet gl = this._webGLContext = this._fetchWebGLContext(this.canvas, options);\n\t\t\t\tif (!gl) { return null; }\n\n\t\t\t\tthis.updateSimultaneousTextureCount(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n\t\t\t\tthis._maxTextureSlots = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\t\t\tthis._createBuffers(gl);\n\t\t\t\tthis._initTextures(gl);\n\n\t\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\t\tgl.enable(gl.BLEND);\n\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._premultiply);\n\t\t\t\t//gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n\n\t\t\t\tthis.setClearColor();\n\t\t\t\tthis.updateViewport(this._viewportWidth || this.canvas.width, this._viewportHeight || this.canvas.height);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._webGLContext = null;\n\t\t}\n\t\treturn this._webGLContext;\n\t}\n\n// public methods:\n\t/**\n\t * Docced in superclass\n\t */\n\tupdate (props) {\n\t\tif (!this.canvas) { return; }\n\t\tif (this.tickOnUpdate) { this.tick(props); }\n\t\tthis.dispatchEvent(\"drawstart\");\n\t\tif (this.autoClear) { this.clear(); }\n\n\t\tif (this._webGLContext) {\n\t\t\t// Use WebGL.\n\t\t\tthis._batchDraw(this, this._webGLContext);\n\t\t\tif (this._autoPurge != -1 && !(this._drawID%((this._autoPurge/2)|0))) {\n\t\t\t\tthis.purgeTextures(this._autoPurge);\n\t\t\t}\n\t\t} else {\n\t\t\t// Use 2D.\n\t\t\tlet ctx = this.canvas.getContext(\"2d\");\n\t\t\tctx.save();\n\t\t\tthis.updateContext(ctx);\n\t\t\tthis.draw(ctx, false);\n\t\t\tctx.restore();\n\t\t}\n\t\tthis.dispatchEvent(\"drawend\");\n\t}\n\n\t/**\n\t * Docced in superclass\n\t */\n\tclear () {\n\t\tif (!this.canvas) { return; }\n\t\tif (StageGL.isWebGLActive(this._webGLContext)) {\n\t\t\tlet gl = this._webGLContext;\n\t\t\t// Use WebGL.\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t} else {\n\t\t\t// Use 2D.\n\t\t\tlet ctx = this.canvas.getContext(\"2d\");\n\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1);\n\t\t\tsuper.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Draws the stage into the supplied context if possible. Many WebGL properties only exist on their context. As such\n\t * you cannot share contexts among many StageGLs and each context requires a unique StageGL instance. Contexts that\n\t * don't match the context managed by this StageGL will be treated as a 2D context.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D | WebGLRenderingContext} context The context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For\n\t *  example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean} If the draw was handled by this function\n\t */\n\tdraw (context, ignoreCache = false) {\n\t\tif (context === this._webGLContext && StageGL.isWebGLActive(this._webGLContext)) {\n\t\t\tlet gl = this._webGLContext;\n\t\t\tthis._batchDraw(this, gl, ignoreCache);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn super.draw(context, ignoreCache);\n\t\t}\n\t}\n\n\t/**\n\t * Draws the target into the correct context, be it a canvas or Render Texture using WebGL.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method cacheDraw\n\t * @param {DisplayObject} target The object we're drawing into cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @param {Array} filters The filters we're drawing into cache.\n\t * @param {BitmapCache} manager The BitmapCache instance looking after the cache\n\t * @return {Boolean} If the draw was handled by this function\n\t */\n\tcacheDraw (target, filters, manager) {\n\t\tif (StageGL.isWebGLActive(this._webGLContext)) {\n\t\t\tthis._cacheDraw(target, filters, manager);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Blocks, or frees a texture \"slot\" on the GPU. Can be useful if you are overflowing textures. When overflowing\n\t * textures they are re-uploaded to the GPU every time they're encountered, this can be expensive with large textures.\n\t * By blocking the slot you reduce available slots, potentially increasing draw calls, but mostly you prevent a\n\t * texture being re-uploaded if it would have moved slots due to overflow.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * For example, block the slot a background image is stored in so there is less re-loading of that image.\n\t * @method protectTextureSlot\n\t * @param  {Number} id The slot to be affected\n\t * @param  {Boolean} [lock=false] Whether this slot is the one being locked.\n\t */\n\tprotectTextureSlot (id, lock = false) {\n\t\tif (id > this._maxTextureSlots || id < 0) {\n\t\t\tthrow \"Slot outside of acceptable range\";\n\t\t}\n\t\tthis._slotBlacklist[id] = !!lock;\n\t}\n\n\t/**\n\t * Render textures can't draw into themselves so any item being used for renderTextures needs two to alternate between.\n\t * This function creates, gets, and toggles the render surface between the two.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method getTargetRenderTexture\n\t * @param  {DisplayObject} target The object associated with the render textures, usually a cached object.\n\t * @param  {Number} w The width to create the texture at.\n\t * @param  {Number} h The height to create the texture at.\n\t * @return {Objet}\n\t * @todo fill in return type\n\t */\n\tgetTargetRenderTexture (target, w, h) {\n\t\tlet result, toggle = false;\n\t\tlet gl = this._webGLContext;\n\t\tif (target.__lastRT !== undefined && target.__lastRT === target.__rtA) { toggle = true; }\n\t\tif (!toggle) {\n\t\t\tif (target.__rtA === undefined) {\n\t\t\t\ttarget.__rtA = this.getRenderBufferTexture(w, h);\n\t\t\t} else {\n\t\t\t\tif (w != target.__rtA._width || h != target.__rtA._height) {\n\t\t\t\t\tthis.resizeTexture(target.__rtA, w, h);\n\t\t\t\t}\n\t\t\t\tthis.setTextureParams(gl);\n\t\t\t}\n\t\t\tresult = target.__rtA;\n\t\t} else {\n\t\t\tif (target.__rtB === undefined) {\n\t\t\t\ttarget.__rtB = this.getRenderBufferTexture(w, h);\n\t\t\t} else {\n\t\t\t\tif (w != target.__rtB._width || h != target.__rtB._height) {\n\t\t\t\t\tthis.resizeTexture(target.__rtB, w, h);\n\t\t\t\t}\n\t\t\t\tthis.setTextureParams(gl);\n\t\t\t}\n\t\t\tresult = target.__rtB;\n\t\t}\n\t\tif (!result) {\n\t\t\tthrow \"Problems creating render textures, known causes include using too much VRAM by not releasing WebGL texture instances\";\n\t\t}\n\t\ttarget.__lastRT = result;\n\t\treturn result;\n\t}\n\n\t/**\n\t * For every image encountered StageGL registers and tracks it automatically. This tracking can cause memory leaks\n\t * if not purged. StageGL, by default, automatically fixes this. This does take performance and may unfortunately\n\t * feature false positives. This function is for manual management of this memory instead of the automatic system.\n\t *\n\t * This function will recursively remove all textures found on the object, its children, cache, etc. It will uncache\n\t * objects and remove any texture it finds REGARDLESS of whether it is currently in use elsewhere. It is up to the user\n\t * to ensure that a texture in use is not removed.\n\t *\n\t * Textures in use, or to be used again shortly, should not be removed. This is simply for performance reasons.\n\t * Removing a texture in use will cause the texture to have to be re-uploaded slowing rendering.\n\t * @method releaseTexture\n\t * @param {DisplayObject | Texture | Image | Canvas} item An object that used the texture to be discarded.\n\t * @param {Boolean} safe Should the release attempt to be \"safe\" and only delete this usage.\n\t */\n\treleaseTexture (item, safe) {\n\t\tif (!item) { return; }\n\n\t\t// this is a container object\n\t\tif (item.children) {\n\t\t\tfor (let i = 0, l = item.children.length; i < l; i++) {\n\t\t\t\tthis.releaseTexture(item.children[i]);\n\t\t\t}\n\t\t}\n\n\t\t// this has a cache canvas\n\t\tif (item.cacheCanvas) {\n\t\t\titem.uncache();\n\t\t}\n\n\t\tlet foundImage;\n\t\tif (item._storeID !== undefined) {\n\t\t\t// this is a texture itself\n\t\t\tif (item === this._textureDictionary[item._storeID]) {\n\t\t\t\tthis._killTextureObject(item);\n\t\t\t\titem._storeID = undefined;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// this is an image or canvas\n\t\t\tfoundImage = item;\n\t\t} else if (item._webGLRenderStyle === 2) {\n\t\t\t// this is a Bitmap class\n\t\t\tfoundImage = item.image;\n\t\t} else if (item._webGLRenderStyle === 1) {\n\t\t\t// this is a SpriteSheet, we can't tell which image we used from the list easily so remove them all!\n\t\t\tfor (let i = 0, l = item.spriteSheet._images.length; i < l; i++) {\n\t\t\t\tthis.releaseTexture(item.spriteSheet._images[i]);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// did we find anything\n\t\tif (foundImage === undefined) {\n\t\t\tif (this.vocalDebug) {\n\t\t\t\tconsole.log(\"No associated texture found on release\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// remove it\n\t\tconst texture = this._textureDictionary[foundImage._storeID];\n\t\tif (safe) {\n\t\t\tconst data = texture._imageData;\n\t\t\tconst index = data.indexOf(foundImage);\n\t\t\tif (index >= 0) { data.splice(index, 1); }\n\t\t\tfoundImage._storeID = undefined;\n\t\t\tif (data.length === 0) { this._killTextureObject(texture); }\n\t\t} else {\n\t\t\tthis._killTextureObject(texture);\n\t\t}\n\t}\n\n\t/**\n\t * Similar to {{#crossLink \"releaseTexture\"}}{{/crossLink}}, but this function differs by searching for textures to\n\t * release. It works by assuming that it can purge any texture which was last used more than \"count\" draw calls ago.\n\t * Because this process is unaware of the objects and whether they may be used on your stage, false positives can\n\t * occur. It is recommended to manually manage your memory with {{#crossLink \"StageGL/releaseTexture\"}}{{/crossLink}},\n\t * however, there are many use cases where this is simpler and error-free. This process is also run by default under\n\t * the hood to prevent leaks. To disable it see the {{#crossLink \"StageGL/autoPurge:property\"}}{{/crossLink}} property.\n\t * @method purgeTextures\n\t * @param {Number} [count=100] How many renders ago the texture was last used\n\t */\n\tpurgeTextures (count = 100) {\n\t\tif (count < 0) { count = 100; }\n\t\tconst dict = this._textureDictionary;\n\t\tconst l = dict.length;\n\t\tlet i, j, k;\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tlet data, texture = dict[i];\n\t\t\tif (!texture || !(data = texture._imageData)) { continue; }\n\n\t\t\tfor (j = 0; j < data.length; j++) {\n\t\t\t\tlet item = data[j];\n\t\t\t\tif (item._drawID + count <= this._drawID) {\n\t\t\t\t\titem._storeID = undefined;\n\t\t\t\t\tdata.splice(j--, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data.length) { this._killTextureObject(texture); }\n\t\t}\n\t}\n\n\t/**\n\t * Try to set the max textures the system can handle. It should default to the hardware maximum, and lower values\n\t * may limit performance. Some devices have been known to mis-report their max textures, or you may need a standard\n\t * baseline cross devices for testing. Barring the previous suggestions, there is little need to call this function\n\t * as the library will automatically try to find the best value.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method updateSimultaneousTextureCount\n\t * @param {Number} [count=1] The number of textures intended for simultaneous loading.\n\t */\n\tupdateSimultaneousTextureCount (count = 1) {\n\t\t// TODO: DHG: make sure API works in all instances, may be some issues with buffers etc I haven't foreseen\n\t\tlet gl = this._webGLContext;\n\t\tlet success = false;\n\n\t\tif (count < 1) { count = 1; }\n\t\tthis._batchTextureCount = count;\n\n\t\twhile (!success) {\n\t\t\ttry {\n\t\t\t\tthis._activeShader = this._fetchShaderProgram(gl);\n\t\t\t\tsuccess = true;\n\t\t\t} catch(e) {\n\t\t\t\tif (this._batchTextureCount === 1) {\n\t\t\t\t\tthrow `Cannot compile shader ${e}`;\n\t\t\t\t}\n\n\t\t\t\tthis._batchTextureCount -= 4;\n\t\t\t\tif (this._batchTextureCount < 1) { this._batchTextureCount = 1; }\n\n\t\t\t\tif (this.vocalDebug) {\n\t\t\t\t\t// TODO-ES6: Directory search for quotations and + next to eachother for string interp.\n\t\t\t\t\tconsole.log(\"Reducing desired texture count due to errors: \" + this._batchTextureCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Update the WebGL viewport. Note that this does <strong>not</strong> update the canvas element's width/height, but\n\t * the render surface's instead. This is necessary after resizing the canvas object.\n\t * @method updateViewport\n\t * @param {Integer} width The width of the render surface in pixels.\n\t * @param {Integer} height The height of the render surface in pixels.\n\t */\n\tupdateViewport (width, height) {\n\t\tthis._viewportWidth = width|0;\n\t\tthis._viewportHeight = height|0;\n\t\tlet gl = this._webGLContext;\n\n\t\tif (gl) {\n\t\t\tgl.viewport(0, 0, this._viewportWidth, this._viewportHeight);\n\n\t\t\t// WebGL works with a -1,1 space on its screen. It also follows Y-Up\n\t\t\t// we need to flip the y, scale and then translate the co-ordinates to match this\n\t\t\t// additionally we offset into they Y so the polygons are inside the camera's \"clipping\" plane\n\t\t\tthis._projectionMatrix = new Float32Array([\n\t\t\t\t2 / this._viewportWidth,\t0,\t\t\t\t\t\t\t\t0,\t\t\t\t\t\t\t0,\n\t\t\t\t0,\t\t\t\t\t\t\t-2 / this._viewportHeight,\t\t1,\t\t\t\t\t\t\t0,\n\t\t\t\t0,\t\t\t\t\t\t\t0,\t\t\t\t\t\t\t\t1,\t\t\t\t\t\t\t0,\n\t\t\t\t-1,\t\t\t\t\t\t\t1,\t\t\t\t\t\t\t\t0.1,\t\t\t\t\t\t0\n\t\t\t]);\n\t\t\t// create the flipped version for use with render texture flipping\n\t\t\t// DHG: this would be a slice but some platforms don't offer slice's for Float32Array\n\t\t\tthis._projectionMatrixFlip = new Float32Array([0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0]);\n\t\t\tthis._projectionMatrixFlip.set(this._projectionMatrix);\n\t\t\tthis._projectionMatrixFlip[5] *= -1;\n\t\t\tthis._projectionMatrixFlip[13] *= -1;\n\t\t}\n\t}\n\n\t/**\n\t * Fetches the shader compiled and set up to work with the provided filter/object. The shader is compiled on first\n\t * use and returned on subsequent calls.\n\t * @method getFilterShader\n\t * @param  {Filter|Object} filter The object which will provide the information needed to construct the filter shader.\n\t * @return {Shader}\n\t * @todo Review return type\n\t */\n\tgetFilterShader (filter) {\n\t\tif (!filter) { filter = this; }\n\n\t\tlet gl = this._webGLContext;\n\t\tlet targetShader = this._activeShader;\n\n\t\tif (filter._builtShader) {\n\t\t\ttargetShader = filter._builtShader;\n\t\t\tif (filter.shaderParamSetup) {\n\t\t\t\tgl.useProgram(targetShader);\n\t\t\t\tfilter.shaderParamSetup(gl, this, targetShader);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\ttargetShader = this._fetchShaderProgram(\n\t\t\t\t\tgl, \"filter\",\n\t\t\t\t\tfilter.VTX_SHADER_BODY, filter.FRAG_SHADER_BODY,\n\t\t\t\t\tfilter.shaderParamSetup && filter.shaderParamSetup.bind(filter)\n\t\t\t\t);\n\t\t\t\tfilter._builtShader = targetShader;\n\t\t\t\ttargetShader._name = filter.toString();\n\t\t\t} catch (e) {\n\t\t\t\t// TODO-ES6: Place this under vocalDebug?\n\t\t\t\tconsole && console.log(e);\n\t\t\t}\n\t\t}\n\t\treturn targetShader;\n\t}\n\n\t/**\n\t * Returns a base texture that has no image or data loaded. Not intended for loading images. It may return `null`\n\t * in some error cases, and trying to use a \"null\" texture can cause renders to fail.\n\t * @method getBaseTexture\n\t * @param  {uint} [w=1] The width of the texture in pixels, defaults to 1\n\t * @param  {uint} [h=1] The height of the texture in pixels, defaults to 1\n\t */\n\tgetBaseTexture (w = 1, h = 1) {\n\t\tlet width = Math.ceil(w > 0 ? w : 1);\n\t\tlet height = Math.ceil(h > 0 ? h : 1);\n\n\t\tlet gl = this._webGLContext;\n\t\tlet texture = gl.createTexture();\n\t\tthis.resizeTexture(texture, width, height);\n\t\tthis.setTextureParams(gl, false);\n\n\t\treturn texture;\n\t}\n\n\t/**\n\t * Resizes a supplied texture element. It may return `null` in some error cases, such as when the texture is too large,\n\t * an out of texture memory error occurs, etc. Trying to use a \"null\" texture can cause renders to fail.\n\t * NOTE: The texture must have been made with \"texImage2D\", all default APIs in StageGL use this, so this note\n\t * only matters for changes and plugins.\n\t * @method resizeTexture\n\t * @param  {WebGLTexture} texture The GL Texture to be modified.\n\t * @param  {uint} [width=1] The width of the texture in pixels, defaults to 1\n\t * @param  {uint} [height=1] The height of the texture in pixels, defaults to 1\n\t */\n\tresizeTexture (texture, width = 1, height = 1) {\n\t\tlet gl = this._webGLContext;\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\tgl.texImage2D(\n\t\t\tgl.TEXTURE_2D,\t\t\t\t// target\n\t\t\t0,\t\t\t\t\t\t\t// level of detail\n\t\t\tgl.RGBA,\t\t\t\t\t// internal format\n\t\t\twidth, height, 0,\t\t\t// width, height, border (only for array/null sourced textures)\n\t\t\tgl.RGBA,\t\t\t\t\t// format (match internal format)\n\t\t\tgl.UNSIGNED_BYTE,\t\t\t// type of texture(pixel color depth)\n\t\t\tnull\t\t\t\t\t\t// image data, we can do null because we're doing array data\n\t\t);\n\t\ttexture.width = width;\n\t\ttexture.height = height;\n\t}\n\n\t/**\n\t * Returns a base texture (see {{#crossLink \"StageGL/getBaseTexture\"}}{{/crossLink}}) for details. Also includes an\n\t * attached and linked render buffer in `texture._frameBuffer`. RenderTextures  can be thought of as an internal\n\t * canvas that can be drawn to.\n\t * @method getRenderBufferTexture\n\t * @param  {Number} w The width of the texture in pixels.\n\t * @param  {Number} h The height of the texture in pixels.\n\t * @return {Texture} the basic texture instance with a render buffer property.\n\t */\n\tgetRenderBufferTexture (w, h) {\n\t\tlet gl = this._webGLContext;\n\n\t\t// get the texture\n\t\tlet renderTexture = this.getBaseTexture(w, h);\n\t\tif (!renderTexture) { return null; }\n\n\t\t// get the frame buffer\n\t\tlet frameBuffer = gl.createFramebuffer();\n\t\tif (!frameBuffer) { return null; }\n\n\t\t// set its width and height for spoofing as an image\n\t\trenderTexture.width = w;\n\t\trenderTexture.height = h;\n\n\t\t// attach frame buffer to texture and provide cross links to look up each other\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, renderTexture, 0);\n\t\tframeBuffer._renderTexture = renderTexture;\n\t\trenderTexture._frameBuffer = frameBuffer;\n\n\t\t// these keep track of themselves simply to reduce complexity of some lookup code\n\t\trenderTexture._storeID = this._textureDictionary.length;\n\t\tthis._textureDictionary[renderTexture._storeID] = renderTexture;\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\treturn renderTexture;\n\t}\n\n\t/**\n\t * Common utility function used to apply the correct texture processing parameters for the bound texture.\n\t * @method setTextureParams\n\t * @param  {WebGLRenderingContext} gl  The canvas WebGL context object to draw into.\n\t * @param  {Boolean} [isPOT=false] Marks whether the texture is \"Power of Two\", this may allow better quality.\n\t */\n\tsetTextureParams (gl, isPOT = false) {\n\t\tif (isPOT && this._antialias) {\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\t} else {\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t}\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t}\n\n\t/**\n\t * Changes the webGL clear, aka \"background\" color to the provided value. A transparent clear is recommended, as\n\t * non-transparent colours may create undesired boxes around some visuals.\n\t *\n\t * The clear color will also be used for filters and other \"render textures\". The stage background will ignore the\n\t * transparency value and display a solid color normally. For the stage to recognize and use transparency it must be\n\t * created with the transparent flag set to `true` (see {{#crossLink \"StageGL/constructor\"}}{{/crossLink}})). Using\n\t * \"transparent white\" to demonstrate, the valid data formats are as follows:\n\t * <ul>\n\t *     <li>\"#FFF\"</li>\n\t *     <li>\"#FFFFFF\"</li>\n\t *     <li>\"#FFFFFF00\"</li>\n\t *     <li>\"rgba(255,255,255,0.0)\"</li>\n\t *     <li>0xFFFFFF00</li>\n\t * </ul>\n\t * @method setClearColor\n\t * @param {String|int} [color=0x00000000] The new color to use as the background\n\t */\n\tsetClearColor (color = 0x00000000) {\n\t\tlet r, g, b, a, output;\n\n\t\tif (typeof color === \"string\") {\n\t\t\tif (color.indexOf(\"#\") === 0) {\n\t\t\t\tif (color.length === 4) {\n\t\t\t\t\tcolor = `#${color.charAt(1)+color.charAt(1) + color.charAt(2)+color.charAt(2) + color.charAt(3)+color.charAt(3)}`;\n\t\t\t\t}\n\t\t\t\tr = Number(`0x${color.slice(1, 3)}`)/255;\n\t\t\t\tg = Number(`0x${color.slice(3, 5)}`)/255;\n\t\t\t\tb = Number(`0x${color.slice(5, 7)}`)/255;\n\t\t\t\ta = Number(`0x${color.slice(7, 9)}`)/255;\n\t\t\t} else if (color.indexOf(\"rgba(\") === 0) {\n\t\t\t\toutput = color.slice(5, -1).split(\",\");\n\t\t\t\tr = Number(output[0])/255;\n\t\t\t\tg = Number(output[1])/255;\n\t\t\t\tb = Number(output[2])/255;\n\t\t\t\ta = Number(output[3]);\n\t\t\t}\n\t\t} else {\t// >>> is an unsigned shift which is what we want as 0x80000000 and up are negative values\n\t\t\tr = ((color & 0xFF000000) >>> 24)/255;\n\t\t\tg = ((color & 0x00FF0000) >>> 16)/255;\n\t\t\tb = ((color & 0x0000FF00) >>> 8)/255;\n\t\t\ta = (color & 0x000000FF)/255;\n\t\t}\n\n\t\tthis._clearColor.r = r || 0;\n\t\tthis._clearColor.g = g || 0;\n\t\tthis._clearColor.b = b || 0;\n\t\tthis._clearColor.a = a || 0;\n\n\t\tif (!this._webGLContext) { return; }\n\t\tthis._webGLContext.clearColor(this._clearColor.r, this._clearColor.g, this._clearColor.b, this._clearColor.a);\n\t}\n\n// private methods:\n\t/**\n\t * Returns a base texture that has no image or data loaded. Not intended for loading images. In some error cases,\n\t * the texture creation will fail. This function differs from {{#crossLink \"StageGL/getBaseTexture\"}}{{/crossLink}}\n\t * in that the failed textures will be replaced with a safe to render \"nothing\" texture.\n\t * @method _getSafeTexture\n\t * @param  {uint} [w=1] The width of the texture in pixels, defaults to 1\n\t * @param  {uint} [h=1] The height of the texture in pixels, defaults to 1\n\t */\n\t_getSafeTexture (w, h) {\n\t\t\tlet texture = this.getBaseTexture(w, h);\n\n\t\t\tif (!texture) {\n\t\t\t\tlet msg = \"Problem creating texture, possible cause: using too much VRAM, please try releasing texture memory\";\n\t\t\t\t(console.error && console.error(msg)) || console.log(msg);\n\t\t\t\ttexture = this._baseTextures[0];\n\t\t\t}\n\n\t\t\treturn texture;\n\t}\n\n\t/**\n\t * Sets up and returns the WebGL context for the canvas. May return undefined in error scenarios. These can include\n\t * situations wher the canvas element already has a context.\n\t * @param  {Canvas} canvas The DOM canvas element to attach to\n\t * @param  {Object} options The options to be handed into the WebGL object, see WebGL spec\n\t * @method _fetchWebGLContext\n\t * @protected\n\t * @return {WebGLRenderingContext} The WebGL context, may return undefined in error scenarios\n\t */\n\t_fetchWebGLContext (canvas, options) {\n\t\tlet gl;\n\n\t\ttry {\n\t\t\tgl = canvas.getContext(\"webgl\", options) || canvas.getContext(\"experimental-webgl\", options);\n\t\t} catch (e) {\n\t\t\t// don't do anything in catch, null check will handle it\n\t\t}\n\n\t\tif (!gl) {\n\t\t\tlet msg = \"Could not initialize WebGL\";\n\t\t\tconsole.error?console.error(msg):console.log(msg);\n\t\t} else {\n\t\t\tgl.viewportWidth = canvas.width;\n\t\t\tgl.viewportHeight = canvas.height;\n\t\t}\n\n\t\treturn gl;\n\t}\n\n\t/**\n\t * Create the completed Shader Program from the vertex and fragment shaders. Allows building of custom shaders for\n\t * filters. Once compiled, shaders are saved so that if the Shader code is dynamically reruns this function when it\n\t * needs to change.\n\t * @method _fetchShaderProgram\n\t * @param  {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param  {String} [shaderName=\"regular\"] Working values: \"regular\", \"override\", and \"filter\". Which type of shader to build.\n\t * Filter and override both accept the custom params. Regular and override have all features. Filter is a special case reduced feature shader meant to be over-ridden.\n\t * @param  {String} [customVTX] Extra vertex shader information to replace a regular draw, see\n\t * {{#crossLink \"StageGL/COVER_VERTEX_BODY\"}}{{/crossLink}} for default and {{#crossLink \"Filter\"}}{{/crossLink}} for examples.\n\t * @param  {String} [customFRAG] Extra fragment shader information to replace a regular draw, see\n\t * {{#crossLink \"StageGL/COVER_FRAGMENT_BODY\"}}{{/crossLink}} for default and {{#crossLink \"Filter\"}}{{/crossLink}} for examples.\n\t * @param  {Function} [shaderParamSetup] Function to run so custom shader parameters can get applied for the render.\n\t * @protected\n\t * @return {ShaderProgram} The compiled and linked shader\n\t */\n\t_fetchShaderProgram (gl, shaderName = \"regular\", customVTX, customFRAG, shaderParamSetup) {\n\t\tgl.useProgram(null); // safety to avoid collisions\n\n\t\t// build the correct shader string out of the right headers and bodies\n\t\tlet targetFrag, targetVtx;\n\t\tswitch (shaderName) {\n\t\t\tcase \"filter\":\n\t\t\t\ttargetVtx = StageGL.COVER_VERTEX_HEADER + (customVTX || StageGL.COVER_VERTEX_BODY);\n\t\t\t\ttargetFrag = StageGL.COVER_FRAGMENT_HEADER + (customFRAG || StageGL.COVER_FRAGMENT_BODY);\n\t\t\t\tbreak;\n\t\t\tcase \"particle\": //TODO\n\t\t\t\ttargetVtx = StageGL.REGULAR_VERTEX_HEADER + StageGL.PARTICLE_VERTEX_BODY;\n\t\t\t\ttargetFrag = StageGL.REGULAR_FRAGMENT_HEADER + StageGL.PARTICLE_FRAGMENT_BODY;\n\t\t\t\tbreak;\n\t\t\tcase \"override\":\n\t\t\t\ttargetVtx = StageGL.REGULAR_VERTEX_HEADER + (customVTX || StageGL.REGULAR_VERTEX_BODY);\n\t\t\t\ttargetFrag = StageGL.REGULAR_FRAGMENT_HEADER + (customFRAG || StageGL.REGULAR_FRAGMENT_BODY);\n\t\t\t\tbreak;\n\t\t\tcase \"regular\":\n\t\t\tdefault:\n\t\t\t\ttargetVtx = StageGL.REGULAR_VERTEX_HEADER + StageGL.REGULAR_VERTEX_BODY;\n\t\t\t\ttargetFrag = StageGL.REGULAR_FRAGMENT_HEADER + StageGL.REGULAR_FRAGMENT_BODY;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// create the separate vars\n\t\tlet vertexShader = this._createShader(gl, gl.VERTEX_SHADER, targetVtx);\n\t\tlet fragmentShader = this._createShader(gl, gl.FRAGMENT_SHADER, targetFrag);\n\n\t\t// link them together\n\t\tlet shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram, vertexShader);\n\t\tgl.attachShader(shaderProgram, fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\tshaderProgram._type = shaderName;\n\n\t\t// check compile status\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tgl.useProgram(this._activeShader);\n\t\t\tthrow gl.getProgramInfoLog(shaderProgram);\n\t\t}\n\n\t\t// set up the parameters on the shader\n\t\tgl.useProgram(shaderProgram);\n\t\tswitch (shaderName) {\n\t\t\tcase \"filter\":\n\t\t\t\t// get the places in memory the shader is stored so we can feed information into them\n\t\t\t\t// then save it off on the shader because it's so tied to the shader itself\n\t\t\t\tshaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"vertexPosition\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);\n\n\t\t\t\tshaderProgram.uvPositionAttribute = gl.getAttribLocation(shaderProgram, \"uvPosition\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.uvPositionAttribute);\n\n\t\t\t\tshaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\n\t\t\t\tgl.uniform1i(shaderProgram.samplerUniform, 0);\n\n\t\t\t\tshaderProgram.uprightUniform = gl.getUniformLocation(shaderProgram, \"uUpright\");\n\t\t\t\tgl.uniform1f(shaderProgram.uprightUniform, 0);\n\n\t\t\t\t// if there's some custom attributes be sure to hook them up\n\t\t\t\tif (shaderParamSetup) {\n\t\t\t\t\tshaderParamSetup(gl, this, shaderProgram);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"override\":\n\t\t\tcase \"particle\":\n\t\t\tcase \"regular\":\n\t\t\tdefault:\n\t\t\t\t// get the places in memory the shader is stored so we can feed information into them\n\t\t\t\t// then save it off on the shader because it's so tied to the shader itself\n\t\t\t\tshaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"vertexPosition\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);\n\n\t\t\t\tshaderProgram.uvPositionAttribute = gl.getAttribLocation(shaderProgram, \"uvPosition\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.uvPositionAttribute);\n\n\t\t\t\tshaderProgram.textureIndexAttribute = gl.getAttribLocation(shaderProgram, \"textureIndex\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.textureIndexAttribute);\n\n\t\t\t\tshaderProgram.alphaAttribute = gl.getAttribLocation(shaderProgram, \"objectAlpha\");\n\t\t\t\tgl.enableVertexAttribArray(shaderProgram.alphaAttribute);\n\n\t\t\t\tlet samplers = [];\n\t\t\t\tfor (let i = 0; i < this._batchTextureCount; i++) {\n\t\t\t\t\tsamplers[i] = i;\n\t\t\t\t}\n\n\t\t\t\tshaderProgram.samplerData = samplers;\n\t\t\t\tshaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\n\t\t\t\tgl.uniform1iv(shaderProgram.samplerUniform, samplers);\n\n\t\t\t\tshaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, \"pMatrix\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tgl.useProgram(this._activeShader);\n\t\treturn shaderProgram;\n\t}\n\n\t/**\n\t * Creates a shader from the specified string. Replaces several template items marked like `{{` `key` `}}``.\n\t * @method _createShader\n\t * @param  {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param  {Number} type The type of shader to create. gl.VERTEX_SHADER | gl.FRAGMENT_SHADER\n\t * @param  {String} str The definition for the shader.\n\t * @return {WebGLShader}\n\t * @protected\n\t */\n\t_createShader (gl, type, str) {\n\t\t// inject the static number\n\t\tstr = str.replace(/\\{\\{count}}/g, this._batchTextureCount);\n\n\t\t// resolve issue with no dynamic samplers by creating correct samplers in if else chain\n\t\tlet insert = \"\";\n\t\tfor (let i = 1; i<this._batchTextureCount; i++) {\n\t\t\tinsert += `} else if (src === ${i}) { color = texture2D(uSampler[${i}], vTextureCoord);`;\n\t\t}\n\t\tstr = str.replace(/\\{\\{alternates}}/g, insert)\n\t\t\t\t\t\t .replace(/\\{\\{fragColor}}/g, this._premultiply ? StageGL.REGULAR_FRAG_COLOR_PREMULTIPLY : StageGL.REGULAR_FRAG_COLOR_NORMAL);\n\n\t\t// actually compile the shader\n\t\tlet shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, str)\n\t\t\t.compileShader(shader);\n\n\t\t// check compile status\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\tthrow gl.getShaderInfoLog(shader);\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\t/**\n\t * Sets up the necessary vertex property buffers, including position and U/V.\n\t * @method _createBuffers\n\t * @param {WebGLRenderingContext} gl\n\t * @protected\n\t */\n\t_createBuffers (gl) {\n\t\tlet groupCount = this._maxCardsPerBatch * StageGL.INDICIES_PER_CARD;\n\t\tlet groupSize;\n\n\t\t// INFO:\n\t\t// all buffers are created using this pattern\n\t\t// create a WebGL buffer\n\t\t// attach it to context\n\t\t// figure out how many parts it has to an entry\n\t\t// fill it with empty data to reserve the memory\n\t\t// attach the empty data to the GPU\n\t\t// track the sizes on the buffer object\n\n\t\t// INFO:\n\t\t// a single buffer may be optimal in some situations and would be approached like this,\n\t\t// currently not implemented due to lack of need and potential complications with drawCover\n\n\t\t// var vertexBuffer = this._vertexBuffer = gl.createBuffer();\n\t\t// gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\t\t// groupSize = 2 + 2 + 1 + 1; //x/y, u/v, index, alpha\n\t\t// var vertexData = this._vertexData = new Float32Array(groupCount * groupSize);\n\t\t// for (i=0; i<vertexData.length; i+=groupSize) {\n\t\t// \tvertexData[i+0] = vertexData[i+1] = 0;\n\t\t// \tvertexData[i+2] = vertexData[i+3] = 0.5;\n\t\t// \tvertexData[i+4] = 0;\n\t\t// \tvertexData[i+5] = 1;\n\t\t// }\n\t\t// vertexBuffer.itemSize = groupSize;\n\t\t// vertexBuffer.numItems = groupCount;\n\t\t// TODO bechmark and test using unified buffer\n\n\t\t// the actual position information\n\t\tlet vertexPositionBuffer = this._vertexPositionBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);\n\t\tgroupSize = 2;\n\t\tlet vertices = this._vertices = new Float32Array(groupCount * groupSize);\n\t\tfor (let i=0, l=vertices.length; i<l; i+=groupSize) { vertices[i] = vertices[i+1] = 0; }\n\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices, gl.DYNAMIC_DRAW);\n\t\tvertexPositionBuffer.itemSize = groupSize;\n\t\tvertexPositionBuffer.numItems = groupCount;\n\n\t\t// where on the texture it gets its information\n\t\tlet uvPositionBuffer = this._uvPositionBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, uvPositionBuffer);\n\t\tgroupSize = 2;\n\t\tlet uvs = this._uvs = new Float32Array(groupCount * groupSize);\n\t\tfor(let i=0, l=uvs.length; i<l; i+=groupSize) { uvs[i] = uvs[i+1] = 0; }\n\t\tgl.bufferData(gl.ARRAY_BUFFER, uvs, gl.DYNAMIC_DRAW);\n\t\tuvPositionBuffer.itemSize = groupSize;\n\t\tuvPositionBuffer.numItems = groupCount;\n\n\t\t// what texture it should use\n\t\tlet textureIndexBuffer = this._textureIndexBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, textureIndexBuffer);\n\t\tgroupSize = 1;\n\t\tlet indices = this._indices = new Float32Array(groupCount * groupSize);\n\t\tfor(let i=0, l=indices.length; i<l; i++) { indices[i] = 0; }\n\t\tgl.bufferData(gl.ARRAY_BUFFER, indices, gl.DYNAMIC_DRAW);\n\t\ttextureIndexBuffer.itemSize = groupSize;\n\t\ttextureIndexBuffer.numItems = groupCount;\n\n\t\t// what alpha it should have\n\t\tlet alphaBuffer = this._alphaBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, alphaBuffer);\n\t\tgroupSize = 1;\n\t\tlet alphas = this._alphas = new Float32Array(groupCount * groupSize);\n\t\tfor(let i=0, l=alphas.length; i<l; i++) { alphas[i] = 1; }\n\t\tgl.bufferData(gl.ARRAY_BUFFER, alphas, gl.DYNAMIC_DRAW);\n\t\talphaBuffer.itemSize = groupSize;\n\t\talphaBuffer.numItems = groupCount;\n\t}\n\n\t/**\n\t * Do all the setup steps for textures in the system.\n\t * @method _initTextures\n\t * @protected\n\t */\n\t_initTextures () {\n\t\t//TODO: DHG: add a cleanup routine in here in case this happens mid stream\n\n\t\t// reset counters\n\t\tthis._lastTextureInsert = -1;\n\n\t\t// clear containers\n\t\tthis._textureDictionary = [];\n\t\tthis._textureIDs = {};\n\t\tthis._baseTextures = [];\n\t\tthis._batchTextures = [];\n\n\t\t// fill in blanks as it helps the renderer be stable while textures are loading and reduces need for safety code\n\t\tfor (let i = 0; i < this._batchTextureCount; i++) {\n\t\t\tconst texture = this.getBaseTexture();\n\t\t\tthis._baseTextures[i] = this._batchTextures[i] = texture;\n\t\t\tif (!texture) {\n\t\t\t\tthrow \"Problems creating basic textures, known causes include using too much VRAM by not releasing WebGL texture instances\";\n\t\t\t} else {\n\t\t\t\ttexture._storeID = -1;\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Load a specific texture, accounting for potential delay, as it might not be preloaded\n\t * @method _loadTextureImage\n\t * @param {WebGLRenderingContext} gl\n\t * @param {Image | Canvas} image Actual image to be loaded\n\t * @return {WebGLTexture} The resulting Texture object\n\t * @protected\n\t */\n\t_loadTextureImage (gl, image) {\n\t\tlet srcPath, texture, msg;\n\n\t\tif (image instanceof Image && image.src) {\n\t\t\tsrcPath = image.src;\n\t\t} else if (image instanceof HTMLCanvasElement) {\n\t\t\timage._isCanvas = true; // canvases are already loaded and assumed unique so note that\n\t\t\tsrcPath = `canvas_${++this._lastTrackedCanvas}`;\n\t\t} else {\n\t\t\tmsg = \"Invalid image provided as source. Please ensure source is a correct DOM element.\";\n\t\t\t(console.error && console.error(msg, image)) || console.log(msg, image);\n\t\t\treturn;\n\t\t}\n\n\t\t// create the texture lookup and texture\n\t\tlet storeID = this._textureIDs[srcPath];\n\t\tif (storeID === undefined) {\n\t\t\tthis._textureIDs[srcPath] = storeID = this._textureDictionary.length;\n\t\t\timage._storeID = storeID;\n\t\t\timage._invalid = !image.isCanvas;\n\t\t\ttexture = this._getSafeTexture();\n\t\t\tthis._textureDictionary[storeID] = texture;\n\t\t} else {\n\t\t\timage._storeID = storeID;\n\t\t\ttexture = this._textureDictionary[storeID];\n\t\t}\n\n\n\t\t// allow the texture to track its references for cleanup, if it's not an error ref\n\t\tif (texture._storeID != -1) {\n\t\t\ttexture._storeID = storeID;\n\t\t\tif (texture._imageData) {\n\t\t\t\ttexture._imageData.push(image);\n\t\t\t} else {\n\t\t\t\ttexture._imageData = [image];\n\t\t\t}\n\t\t}\n\n\t\t// insert texture into batch\n\t\tthis._insertTextureInBatch(gl, texture);\n\n\t\treturn texture;\n\t}\n\n\t/**\n\t * @method _updateTextureImageData\n\t * Necessary to upload the actual image data to the GPU. Without this the texture will be blank. Called automatically\n\t * in most cases due to loading and caching APIs. Flagging an image source with `_invalid = true` will trigger this\n\t * next time the image is rendered.\n\t * @param {WebGLRenderingContext} gl\n\t * @param {Image | Canvas} image The image data to be uploaded\n\t * @protected\n\t */\n\t_updateTextureImageData (gl, image) {\n\t\t// the image isn't loaded and isn't ready to be updated, because we don't set the invalid flag we should try again later\n\t\tif (!(image.complete || image._isCanvas || image.naturalWidth)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// the bitwise & is intentional, cheap exponent 2 check\n\t\tlet isNPOT = (image.width & image.width-1) || (image.height & image.height-1);\n\t\tlet texture = this._textureDictionary[image._storeID];\n\n\t\tgl.activeTexture(gl.TEXTURE0 + texture._activeIndex);\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\t\ttexture.isPOT = !isNPOT;\n\t\tthis.setTextureParams(gl, texture.isPOT);\n\n\t\ttry {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\t\t} catch(e) {\n\t\t\tlet errString = \"\\nAn error has occurred. This is most likely due to security restrictions on WebGL images with local or cross-domain origins\";\n\t\t\tif (console.error) {\n\t\t\t\t//TODO: LM: I recommend putting this into a log function internally, since you do it so often, and each is implemented differently.\n\t\t\t\tconsole.error(e, errString);\n\t\t\t} else {\n\t\t\t\tconsole && console.log(e, errString);\n\t\t\t}\n\t\t}\n\n\t\timage._invalid = false;\n\n\t\ttexture._w = image.width;\n\t\ttexture._h = image.height;\n\n\t\tif (this.vocalDebug) {\n\t\t\tif (isNPOT && this._antialias) {\n\t\t\t\tconsole.warn(\"NPOT(Non Power of Two) Texture w/ antialias on: \"+ image.src);\n\t\t\t}\n\t\t\tif (image.width > gl.MAX_TEXTURE_SIZE || image.height > gl.MAX_TEXTURE_SIZE){\n\t\t\t\tconsole && console.error(\"Oversized Texture: \"+ image.width+\"x\"+image.height +\" vs \"+ gl.MAX_TEXTURE_SIZE +\"max\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds the texture to a spot in the current batch, forcing a draw if no spots are free.\n\t * @method _insertTextureInBatch\n\t * @param {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param {WebGLTexture} texture The texture to be inserted.\n\t * @protected\n\t */\n\t_insertTextureInBatch (gl, texture) {\n\t\t// if it wasn't used last batch\n\t\tif (this._batchTextures[texture._activeIndex] !== texture) {\n\t\t\t// we've got to find it a a spot.\n\t\t\tlet found = -1;\n\t\t\tlet start = (this._lastTextureInsert+1) % this._batchTextureCount;\n\t\t\tlet look = start;\n\t\t\tdo {\n\t\t\t\tif (this._batchTextures[look]._batchID != this._batchID && !this._slotBlacklist[look]) {\n\t\t\t\t\tfound = look;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlook = (look+1) % this._batchTextureCount;\n\t\t\t} while (look !== start);\n\n\t\t\t// we couldn't find anywhere for it go, meaning we're maxed out\n\t\t\tif (found === -1) {\n\t\t\t\tthis.batchReason = \"textureOverflow\";\n\t\t\t\tthis._drawBuffers(gl);\t\t// <------------------------------------------------------------------------\n\t\t\t\tthis.batchCardCount = 0;\n\t\t\t\tfound = start; // TODO: how do we optimize this to be smarter?\n\t\t\t}\n\n\t\t\t// lets put it into that spot\n\t\t\tthis._batchTextures[found] = texture;\n\t\t\ttexture._activeIndex = found;\n\t\t\tlet image = texture._imageData && texture._imageData[0]; // first come first served, potentially problematic\n\t\t\tif (image && image._invalid) {\n\t\t\t\tthis._updateTextureImageData(gl, image);\n\t\t\t} else {\n\t\t\t\tgl.activeTexture(gl.TEXTURE0 + found);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t\tthis.setTextureParams(gl);\n\t\t\t}\n\t\t\tthis._lastTextureInsert = found;\n\t\t} else if(texture._drawID !== this._drawID) {    // hanging around from previous draws means the content might be out of date\n\t\t\tlet image = texture._imageData && texture._imageData[0];\n\t\t\tif (image && image._invalid) {\n\t\t\t\tthis._updateTextureImageData(gl, image);\n\t\t\t}\n\t\t}\n\n\t\ttexture._drawID = this._drawID;\n\t\ttexture._batchID = this._batchID;\n\t}\n\n\t/**\n\t * Remove and clean the texture, expects a texture and is inflexible. Mostly for internal use, recommended to call\n\t * {{#crossLink \"StageGL/releaseTexture\"}}{{/crossLink}} instead as it will call this with the correct texture object(s).\n\t * Note: Testing shows this may not happen immediately, have to wait for WebGL to have actually adjust memory.\n\t * @method _killTextureObject\n\t * @param {Texture} texture The texture to be cleaned out\n\t * @protected\n\t */\n\t_killTextureObject (texture) {\n\t\tif (!texture) { return; }\n\t\tlet gl = this._webGLContext;\n\n\t\t// remove linkage\n\t\tif (texture._storeID !== undefined && texture._storeID >= 0) {\n\t\t\tthis._textureDictionary[texture._storeID] = undefined;\n\t\t\tfor (let n in this._textureIDs) {\n\t\t\t\tif (this._textureIDs[n] === texture._storeID) { delete this._textureIDs[n]; }\n\t\t\t}\n\t\t\tlet data = texture._imageData;\n\t\t\tfor (let i = data.length - 1; i >= 0; i--) { data[i]._storeID = undefined; }\n\t\t\ttexture._imageData = texture._storeID = undefined;\n\t\t}\n\n\t\t// make sure to drop it out of an active slot\n\t\tif (texture._activeIndex !== undefined && this._batchTextures[texture._activeIndex] === texture) {\n\t\t\tthis._batchTextures[texture._activeIndex] = this._baseTextures[texture._activeIndex];\n\t\t}\n\n\t\t// remove buffers if present\n\t\ttry {\n\t\t\tif (texture._frameBuffer) { gl.deleteFramebuffer(texture._frameBuffer); }\n\t\t\ttexture._frameBuffer = undefined;\n\t\t} catch(e) {\n\t\t\t/* suppress delete errors because it's already gone or didn't need deleting probably */\n\t\t\tif (this.vocalDebug) { console.log(e); }\n\t\t}\n\n\t\t// remove entry\n\t\ttry {\n\t\t\tgl.deleteTexture(texture);\n\t\t} catch(e) {\n\t\t\t/* suppress delete errors because it's already gone or didn't need deleting probably */\n\t\t\tif (this.vocalDebug) { console.log(e); }\n\t\t}\n\t}\n\n\t/**\n\t * Store or restore current batch textures into a backup array\n\t * @method _backupBatchTextures\n\t * @param {Boolean} restore Perform a restore instead of a store.\n\t * @param {Array} [target=this._backupTextures] Where to perform the backup, defaults to internal backup.\n\t * @protected\n\t */\n\t_backupBatchTextures (restore, target) {\n\t\tlet gl = this._webGLContext;\n\n\t\tif (!this._backupTextures) { this._backupTextures = []; }\n\t\tif (target === undefined) { target = this._backupTextures; }\n\n\t\tfor (let i=0; i<this._batchTextureCount; i++) {\n\t\t\tgl.activeTexture(gl.TEXTURE0 + i);\n\t\t\tif (restore) {\n\t\t\t\tthis._batchTextures[i] = target[i];\n\t\t\t} else {\n\t\t\t\ttarget[i] = this._batchTextures[i];\n\t\t\t\tthis._batchTextures[i] = this._baseTextures[i];\n\t\t\t}\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this._batchTextures[i]);\n\t\t\tthis.setTextureParams(gl, this._batchTextures[i].isPOT);\n\t\t}\n\n\t\tif (restore && target === this._backupTextures) { this._backupTextures = []; }\n\t}\n\n\t/**\n\t * Begin the drawing process for a regular render.\n\t * @method _batchDraw\n\t * @param {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param {Stage || Container} sceneGraph {{#crossLink \"Container\"}}{{/crossLink}} object with all that needs to rendered, preferably a Stage.\n\t * @param {Boolean} ignoreCache\n\t * @protected\n\t * @todo Review the ignoreCache parameter. Is it a context or a boolean?\n\t */\n\t_batchDraw (sceneGraph, gl, ignoreCache) {\n\t\tif (this._isDrawing > 0) {\n\t\t\tthis._drawBuffers(gl);\n\t\t}\n\t\tthis._isDrawing++;\n\t\tthis._drawID++;\n\n\t\tthis.batchCardCount = 0;\n\t\tthis.depth = 0;\n\n\t\tthis._appendToBatchGroup(sceneGraph, gl, new Matrix2D(), this.alpha, ignoreCache);\n\n\t\tthis.batchReason = \"drawFinish\";\n\t\tthis._drawBuffers(gl);\t\t\t\t\t\t\t\t// <--------------------------------------------------------\n\t\tthis._isDrawing--;\n\t}\n\n\t/**\n\t * Perform the drawing process to fill a specific cache texture, including applying filters.\n\t * @method _cacheDraw\n\t * @param {DisplayObject} target The object we're drawing into the cache. For example, used for drawing the cache\n\t * (to prevent it from simply drawing an existing cache back into itself).\n\t * @param {Array} filters The filters we're drawing into cache.\n\t * @param {BitmapCache} manager The BitmapCache instance looking after the cache\n\t * @protected\n\t */\n\t_cacheDraw (target, filters, manager) {\n\t\t/*\n\t\tImplicitly there are 4 modes to this function: filtered-sameContext, filtered-uniqueContext, sameContext, uniqueContext.\n\t\tEach situation must be handled slightly differently as 'sameContext' or 'uniqueContext' define how the output works,\n\t\tone drawing directly into the main context and the other drawing into a stored renderTexture respectively.\n\t\tWhen the draw is a 'filtered' draw, the filters are applied sequentially and will draw into saved textures repeatedly.\n\t\tOnce the final filter is done the final output is treated depending upon whether it is a same or unique context.\n\t\tThe internal complexity comes from reducing over-draw, shared code, and issues like textures needing to be flipped\n\t\tsometimes when written to render textures.\n\t\t*/\n\t\tlet gl = this._webGLContext;\n\t\tlet renderTexture;\n\t\tlet shaderBackup = this._activeShader;\n\t\tlet blackListBackup = this._slotBlacklist;\n\t\tlet lastTextureSlot = this._maxTextureSlots-1;\n\t\tlet wBackup = this._viewportWidth, hBackup = this._viewportHeight;\n\n\t\t// protect the last slot so that we have somewhere to bind the renderTextures so it doesn't get upset\n\t\tthis.protectTextureSlot(lastTextureSlot, true);\n\n\t\t// create offset container for drawing item\n\t\tlet mtx = target.getMatrix();\n\t\tmtx = mtx.clone();\n\t\tmtx.scale(1/manager.scale, 1/manager.scale);\n\t\tmtx = mtx.invert();\n\t\tmtx.translate(-manager.offX/manager.scale*target.scaleX, -manager.offY/manager.scale*target.scaleY);\n\t\tlet container = this._cacheContainer;\n\t\tcontainer.children = [target];\n\t\tcontainer.transformMatrix = mtx;\n\n\t\tthis._backupBatchTextures(false);\n\n\t\tif (filters && filters.length) {\n\t\t\tthis._drawFilters(target, filters, manager);\n\t\t} else {\n\t\t\t// is this for another stage or mine?\n\t\t\tif (this.isCacheControlled) {\n\t\t\t\t// draw item to canvas\t\t\t\tI -> C\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t\t\tthis._batchDraw(container, gl, true);\n\t\t\t} else {\n\t\t\t\tgl.activeTexture(gl.TEXTURE0 + lastTextureSlot);\n\t\t\t\ttarget.cacheCanvas = this.getTargetRenderTexture(target, manager._drawWidth, manager._drawHeight);\n\t\t\t\trenderTexture = target.cacheCanvas;\n\n\t\t\t\t// draw item to render texture\t\tI -> T\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture._frameBuffer);\n\t\t\t\tthis.updateViewport(manager._drawWidth, manager._drawHeight);\n\t\t\t\tthis._projectionMatrix = this._projectionMatrixFlip;\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t\t\tthis._batchDraw(container, gl, true);\n\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\tthis.updateViewport(wBackup, hBackup);\n\t\t\t}\n\t\t}\n\n\t\tthis._backupBatchTextures(true);\n\n\t\tthis.protectTextureSlot(lastTextureSlot, false);\n\t\tthis._activeShader = shaderBackup;\n\t\tthis._slotBlacklist = blackListBackup;\n\t}\n\n\t/**\n\t * Sub portion of _cacheDraw, split off for readability. Do not call independently.\n\t * @method _drawFilters\n\t * @param {DisplayObject} target The object we're drawing with a filter.\n\t * @param {Array} filters The filters we're drawing into cache.\n\t * @param {BitmapCache} manager The BitmapCache instance looking after the cache\n\t * @protected\n\t * @todo Please doc this method\n\t */\n\t_drawFilters (target, filters, manager) {\n\t\tlet gl = this._webGLContext;\n\t\tlet renderTexture;\n\t\tlet lastTextureSlot = this._maxTextureSlots-1;\n\t\tlet wBackup = this._viewportWidth, hBackup = this._viewportHeight;\n\n\t\tlet container = this._cacheContainer;\n\t\tlet filterCount = filters.length;\n\n\t\t// we don't know which texture slot we're dealing with previously and we need one out of the way\n\t\t// once we're using that slot activate it so when we make and bind our RenderTexture it's safe there\n\t\tgl.activeTexture(gl.TEXTURE0 + lastTextureSlot);\n\t\trenderTexture = this.getTargetRenderTexture(target, manager._drawWidth, manager._drawHeight);\n\n\t\t// draw item to render texture\t\tI -> T\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture._frameBuffer);\n\t\tthis.updateViewport(manager._drawWidth, manager._drawHeight);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis._batchDraw(container, gl, true);\n\n\t\t// bind the result texture to slot 0 as all filters and cover draws assume original content is in slot 0\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, renderTexture);\n\t\tthis.setTextureParams(gl);\n\n\t\tlet flipY = false;\n\n\t\tlet i = 0, filter = filters[i];\n\t\tdo { // this is safe because we wouldn't be in apply filters without a filter count of at least 1\n\n\t\t\t// swap to correct shader\n\t\t\tthis._activeShader = this.getFilterShader(filter);\n\t\t\tif (!this._activeShader) { continue; }\n\n\t\t\t// now the old result is stored in slot 0, make a new render texture\n\t\t\tgl.activeTexture(gl.TEXTURE0 + lastTextureSlot);\n\t\t\trenderTexture = this.getTargetRenderTexture(target, manager._drawWidth, manager._drawHeight);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture._frameBuffer);\n\n\t\t\t// draw result to render texture\tR -> T\n\t\t\tgl.viewport(0, 0, manager._drawWidth, manager._drawHeight);\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t\tthis._drawCover(gl, flipY);\n\n\t\t\t// bind the result texture to slot 0 as all filters and cover draws assume original content is in slot 0\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, renderTexture);\n\t\t\tthis.setTextureParams(gl);\n\n\t\t\t// use flipping to keep things upright, things already cancel out on a single filter\n\t\t\t// this needs to be here as multiPass is not accurate to _this_ frame until after shader acquisition\n\t\t\tif (filterCount > 1 || filters[0]._multiPass) {\n\t\t\t\tflipY = !flipY;\n\t\t\t}\n\n\t\t\t// work through the multipass if it's there, otherwise move on\n\t\t\tfilter = filter._multiPass !== null ? filter._multiPass : filters[++i];\n\t\t} while (filter);\n\n\t\t// is this for another stage or mine\n\t\tif (this.isCacheControlled) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tthis.updateViewport(wBackup, hBackup);\n\n\t\t\t// draw result to canvas\t\t\tR -> C\n\t\t\tthis._activeShader = this.getFilterShader(this);\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t\tthis._drawCover(gl, flipY);\n\t\t} else {\n\t\t\t//TODO: DHG: this is less than ideal a flipped inital render for this circumstance might help, adjust the perspective matrix?\n\t\t\tif (flipY) {\n\t\t\t\tgl.activeTexture(gl.TEXTURE0 + lastTextureSlot);\n\t\t\t\trenderTexture = this.getTargetRenderTexture(target, manager._drawWidth, manager._drawHeight);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture._frameBuffer);\n\n\t\t\t\tthis._activeShader = this.getFilterShader(this);\n\t\t\t\tgl.viewport(0, 0, manager._drawWidth, manager._drawHeight);\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\t\t\tthis._drawCover(gl, !flipY);\n\t\t\t}\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tthis.updateViewport(wBackup, hBackup);\n\n\t\t\t// make sure the last texture is the active thing to draw\n\t\t\ttarget.cacheCanvas = renderTexture;\n\t\t}\n\t}\n\n\t/**\n\t * Add all the contents of a container to the pending buffers, called recursively on each container. This may\n\t * trigger a draw if a buffer runs out of space. This is the main workforce of the render loop.\n\t * @method _appendToBatchGroup\n\t * @param {Container} container The {{#crossLink \"Container\"}}{{/crossLink}} that contains everything to be drawn.\n\t * @param {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param {Matrix2D} concatMtx The effective (concatenated) transformation matrix when beginning this container\n\t * @param {Number} concatAlpha The effective (concatenated) alpha when beginning this container\n\t * @param {Boolean} ignoreCache Don't use an element's cache during this draw\n\t * @protected\n\t */\n\t_appendToBatchGroup (container, gl, concatMtx, concatAlpha, ignoreCache) {\n\t\t// sort out shared properties\n\t\tif (!container._glMtx) { container._glMtx = new Matrix2D(); }\n\t\tlet cMtx = container._glMtx;\n\t\tcMtx.copy(concatMtx);\n\t\tif (container.transformMatrix) {\n\t\t\tcMtx.appendMatrix(container.transformMatrix);\n\t\t} else {\n\t\t\tcMtx.appendTransform(\n\t\t\t\tcontainer.x, container.y,\n\t\t\t\tcontainer.scaleX, container.scaleY,\n\t\t\t\tcontainer.rotation, container.skewX, container.skewY,\n\t\t\t\tcontainer.regX, container.regY\n\t\t\t);\n\t\t}\n\n\t\t// sub components of figuring out the position an object holds\n\t\tlet subL, subT, subR, subB;\n\n\t\t// actually apply its data to the buffers\n\t\tconst l = container.numChildren;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tlet item = container.children[i];\n\n\t\t\tif (!(item.visible && concatAlpha)) { continue; }\n\t\t\tif (!item.cacheCanvas || ignoreCache) {\n\t\t\t\tif (item.children) {\n\t\t\t\t\tthis._appendToBatchGroup(item, gl, cMtx, item.alpha * concatAlpha);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check for overflowing batch, if yes then force a render\n\t\t\tif (this.batchCardCount+1 > this._maxCardsPerBatch) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TODO: DHG: consider making this polygon count dependant for things like vector draws\n\t\t\t\tthis.batchReason = \"vertexOverflow\";\n\t\t\t\tthis._drawBuffers(gl);\t\t\t\t\t// <------------------------------------------------------------\n\t\t\t\tthis.batchCardCount = 0;\n\t\t\t}\n\n\t\t\t// keep track of concatenated position\n\t\t\tif (!item._glMtx) { item._glMtx = new Matrix2D(); }\n\t\t\tlet iMtx = item._glMtx;\n\t\t\tiMtx.copy(cMtx);\n\t\t\tif (item.transformMatrix) {\n\t\t\t\tiMtx.appendMatrix(item.transformMatrix);\n\t\t\t} else {\n\t\t\t\tiMtx.appendTransform(\n\t\t\t\t\titem.x, item.y,\n\t\t\t\t\titem.scaleX, item.scaleY,\n\t\t\t\t\titem.rotation, item.skewX, item.skewY,\n\t\t\t\t\titem.regX, item.regY\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet uvRect, texIndex, image, frame, texture, src;\n\t\t\tlet useCache = item.cacheCanvas && !ignoreCache;\n\n\t\t\t// get the image data, or abort if not present\n\t\t\tif (item._webGLRenderStyle === 2 || useCache) { // BITMAP / Cached Canvas\n\t\t\t\timage = (ignoreCache?false:item.cacheCanvas) || item.image;\n\t\t\t} else if (item._webGLRenderStyle === 1) { // SPRITE\n\t\t\t\tframe = item.spriteSheet.getFrame(item.currentFrame);\t// TODO: Faster way?\n\t\t\t\tif (frame === null) { continue; }\n\t\t\t\timage = frame.image;\n\t\t\t} else { // MISC (DOM objects render themselves later)\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!image) { continue; }\n\n\t\t\tlet uvs = this._uvs;\n\t\t\tlet vertices = this._vertices;\n\t\t\tlet texI = this._indices;\n\t\t\tlet alphas = this._alphas;\n\n\t\t\t// calculate texture\n\t\t\tif (image._storeID === undefined) {\n\t\t\t\t// this texture is new to us so load it and add it to the batch\n\t\t\t\ttexture = this._loadTextureImage(gl, image);\n\t\t\t} else {\n\t\t\t\t// fetch the texture (render textures know how to look themselves up to simplify this logic)\n\t\t\t\ttexture = this._textureDictionary[image._storeID];\n\t\t\t\tif (!texture){ //TODO: this should really not occur but has due to bugs, hopefully this can be removed eventually\n\t\t\t\t\tif (this.vocalDebug) { console.log(\"Image source should not be lookup a non existent texture, please report a bug.\"); }\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// put it in the batch if needed\n\t\t\t\tif (texture._batchID !== this._batchID) {\n\t\t\t\t\tthis._insertTextureInBatch(gl, texture);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttexIndex = texture._activeIndex;\n\t\t\timage._drawID = this._drawID;\n\n\t\t\tif (item._webGLRenderStyle === 2 || useCache) {\t\t\t// BITMAP / Cached Canvas\n\t\t\t\tif (!useCache && item.sourceRect) {\n\t\t\t\t\t// calculate uvs\n\t\t\t\t\tif (!item._uvRect) { item._uvRect = {}; }\n\t\t\t\t\tsrc = item.sourceRect;\n\t\t\t\t\tuvRect = item._uvRect;\n\t\t\t\t\tuvRect.t = (src.y)/image.height;\n\t\t\t\t\tuvRect.l = (src.x)/image.width;\n\t\t\t\t\tuvRect.b = (src.y + src.height)/image.height;\n\t\t\t\t\tuvRect.r = (src.x + src.width)/image.width;\n\n\t\t\t\t\t// calculate vertices\n\t\t\t\t\tsubL = 0;\t\t\t\t\t\t\tsubT = 0;\n\t\t\t\t\tsubR = src.width+subL;\t\t\t\tsubB = src.height+subT;\n\t\t\t\t} else {\n\t\t\t\t\t// calculate uvs\n\t\t\t\t\tuvRect = StageGL.UV_RECT;\n\t\t\t\t\t// calculate vertices\n\t\t\t\t\tif (item.cacheCanvas) {\n\t\t\t\t\t\tsrc = item.bitmapCache;\n\t\t\t\t\t\tsubL = src.x+(src._filterOffX/src.scale);\n\t\t\t\t\t\tsubT = src.y+(src._filterOffY/src.scale);\n\t\t\t\t\t\tsubR = (src._drawWidth/src.scale)+subL;\n\t\t\t\t\t\tsubB = (src._drawHeight/src.scale)+subT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsubL = subT = 0;\n\t\t\t\t\t\tsubR = image.width+subL;\n\t\t\t\t\t\tsubB = image.height+subT;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (item._webGLRenderStyle === 1) {\t\t\t\t\t\t\t\t\t\t\t// SPRITE\n\t\t\t\tlet rect = frame.rect;\n\n\t\t\t\t// calculate uvs\n\t\t\t\tuvRect = frame.uvRect;\n\t\t\t\tif (!uvRect) {\n\t\t\t\t\tuvRect = StageGL.buildUVRects(item.spriteSheet, item.currentFrame, false);\n\t\t\t\t}\n\n\t\t\t\t// calculate vertices\n\t\t\t\tsubL = -frame.regX;\t\t\t\t\t\t\t\tsubT = -frame.regY;\n\t\t\t\tsubR = rect.width-frame.regX;\t\t\t\t\tsubB = rect.height-frame.regY;\n\t\t\t}\n\n\t\t\t// These must be calculated here else a forced draw might happen after they're set\n\t\t\tlet offV1 = this.batchCardCount*StageGL.INDICIES_PER_CARD;\t\t// offset for 1 component vectors\n\t\t\tlet offV2 = offV1*2;\t\t\t\t\t\t\t\t\t\t\t// offset for 2 component vectors\n\n\t\t\t//DHG: See Matrix2D.transformPoint for why this math specifically\n\t\t\t// apply vertices\n\t\t\tvertices[offV2] =\t\tsubL *iMtx.a + subT *iMtx.c +iMtx.tx;\t\tvertices[offV2+1] =\t\tsubL *iMtx.b + subT *iMtx.d +iMtx.ty;\n\t\t\tvertices[offV2+2] =\t\tsubL *iMtx.a + subB *iMtx.c +iMtx.tx;\t\tvertices[offV2+3] =\t\tsubL *iMtx.b + subB *iMtx.d +iMtx.ty;\n\t\t\tvertices[offV2+4] =\t\tsubR *iMtx.a + subT *iMtx.c +iMtx.tx;\t\tvertices[offV2+5] =\t\tsubR *iMtx.b + subT *iMtx.d +iMtx.ty;\n\t\t\tvertices[offV2+6] =\t\tvertices[offV2+2];\t\t\t\t\t\t\tvertices[offV2+7] =\t\tvertices[offV2+3];\n\t\t\tvertices[offV2+8] =\t\tvertices[offV2+4];\t\t\t\t\t\t\tvertices[offV2+9] =\t\tvertices[offV2+5];\n\t\t\tvertices[offV2+10] =\tsubR *iMtx.a + subB *iMtx.c +iMtx.tx;\t\tvertices[offV2+11] =\tsubR *iMtx.b + subB *iMtx.d +iMtx.ty;\n\n\t\t\t// apply uvs\n\t\t\tuvs[offV2] =\tuvRect.l;\t\t\tuvs[offV2+1] =\tuvRect.t;\n\t\t\tuvs[offV2+2] =\tuvRect.l;\t\t\tuvs[offV2+3] =\tuvRect.b;\n\t\t\tuvs[offV2+4] =\tuvRect.r;\t\t\tuvs[offV2+5] =\tuvRect.t;\n\t\t\tuvs[offV2+6] =\tuvRect.l;\t\t\tuvs[offV2+7] =\tuvRect.b;\n\t\t\tuvs[offV2+8] =\tuvRect.r;\t\t\tuvs[offV2+9] =\tuvRect.t;\n\t\t\tuvs[offV2+10] =\tuvRect.r;\t\t\tuvs[offV2+11] =\tuvRect.b;\n\n\t\t\t// apply texture\n\t\t\ttexI[offV1] = texI[offV1+1] = texI[offV1+2] = texI[offV1+3] = texI[offV1+4] = texI[offV1+5] = texIndex;\n\n\t\t\t// apply alpha\n\t\t\talphas[offV1] = alphas[offV1+1] = alphas[offV1+2] = alphas[offV1+3] = alphas[offV1+4] = alphas[offV1+5] = item.alpha * concatAlpha;\n\n\t\t\tthis.batchCardCount++;\n\t\t}\n\t}\n\n\t/**\n\t * Draws all the currently defined cards in the buffer to the render surface.\n\t * @method _drawBuffers\n\t * @param {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @protected\n\t */\n\t_drawBuffers (gl) {\n\t\tif (this.batchCardCount <= 0) { return; }\t// prevents error logs on stages filled with un-renederable content.\n\n\t\tif (this.vocalDebug) {\n\t\t\tconsole.log(`Draw[${this._drawID}:${this._batchID}] : ${this.batchReason}`);\n\t\t}\n\t\tlet shaderProgram = this._activeShader;\n\t\tlet vertexPositionBuffer = this._vertexPositionBuffer;\n\t\tlet textureIndexBuffer = this._textureIndexBuffer;\n\t\tlet uvPositionBuffer = this._uvPositionBuffer;\n\t\tlet alphaBuffer = this._alphaBuffer;\n\n\t\tgl.useProgram(shaderProgram);\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this._vertices);\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, textureIndexBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.textureIndexAttribute, textureIndexBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this._indices);\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, uvPositionBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.uvPositionAttribute, uvPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this._uvs);\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, alphaBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.alphaAttribute, alphaBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this._alphas);\n\n\t\tgl.uniformMatrix4fv(shaderProgram.pMatrixUniform, gl.FALSE, this._projectionMatrix);\n\n\t\tfor (let i = 0; i < this._batchTextureCount; i++) {\n\t\t\tlet texture = this._batchTextures[i];\n\t\t\tgl.activeTexture(gl.TEXTURE0 + i);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\tthis.setTextureParams(gl, texture.isPOT);\n\t\t}\n\n\t\tgl.drawArrays(gl.TRIANGLES, 0, this.batchCardCount*StageGL.INDICIES_PER_CARD);\n\t\tthis._batchID++;\n\t}\n\n\t/**\n\t * Draws a card that covers the entire render surface. Mainly used for filters.\n\t * @method _drawBuffers\n\t * @param {WebGLRenderingContext} gl The canvas WebGL context object to draw into.\n\t * @param {Boolean} flipY Covers are used for things like RenderTextures and because of 3D vs Canvas space this can\n\t * end up meaning the `y` space sometimes requires flipping in the render.\n\t * @protected\n\t */\n\t_drawCover (gl, flipY) {\n\t\tif (this._isDrawing > 0) {\n\t\t\tthis._drawBuffers(gl);\n\t\t}\n\n\t\tif (this.vocalDebug) {\n\t\t\tconsole.log(`Draw[${this._drawID}:${this._batchID}] : Cover`);\n\t\t}\n\t\tlet shaderProgram = this._activeShader;\n\t\tlet vertexPositionBuffer = this._vertexPositionBuffer;\n\t\tlet uvPositionBuffer = this._uvPositionBuffer;\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tgl.useProgram(shaderProgram);\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, StageGL.COVER_VERT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, uvPositionBuffer);\n\t\tgl.vertexAttribPointer(shaderProgram.uvPositionAttribute, uvPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, flipY?StageGL.COVER_UV_FLIP:StageGL.COVER_UV);\n\n\t\tgl.uniform1i(shaderProgram.samplerUniform, 0);\n\t\tgl.uniform1f(shaderProgram.uprightUniform, flipY?0:1);\n\n\t\tgl.drawArrays(gl.TRIANGLES, 0, StageGL.INDICIES_PER_CARD);\n\t}\n\n}\n\n// static properties:\n/**\n * The number of properties defined per vertex (x, y, textureU, textureV, textureIndex, alpha)\n * @property VERTEX_PROPERTY_COUNT\n * @static\n * @final\n * @type {Number}\n * @default 6\n * @readonly\n */\n/**\n * The number of triangle indices it takes to form a Card. 3 per triangle, 2 triangles.\n * @property INDICIES_PER_CARD\n * @static\n * @final\n * @type {Number}\n * @default 6\n * @readonly\n */\n/**\n * The default value for the maximum number of cards we want to process in a batch. See {{#crossLink \"StageGL/WEBGL_MAX_INDEX_NUM:property\"}}{{/crossLink}}\n * for a hard limit.\n * @property DEFAULT_MAX_BATCH_SIZE\n * @static\n * @final\n * @type {Number}\n * @default 10000\n * @readonly\n */\n/**\n * The maximum size WebGL allows for element index numbers. Uses a 16 bit unsigned integer. It takes 6 indices to\n * make a unique card.\n * @property WEBGL_MAX_INDEX_NUM\n * @static\n * @final\n * @type {Number}\n * @default 65536\n * @readonly\n */\n/**\n * Default U/V rect for dealing with full coverage from an image source.\n * @property UV_RECT\n * @static\n * @final\n * @type {Object}\n * @default {t:0, l:0, b:1, r:1}\n * @readonly\n */\n/**\n * Vertex positions for a card that covers the entire render. Used with render targets primarily.\n * @property COVER_VERT\n * @static\n * @final\n * @type {Float32Array}\n * @readonly\n */\n/**\n * U/V for {{#crossLink \"StageGL/COVER_VERT:property\"}}{{/crossLink}}.\n * @property COVER_UV\n * @static\n * @final\n * @type {Float32Array}\n * @readonly\n */\n/**\n * Flipped U/V for {{#crossLink \"StageGL:COVER_VERT:property\"}}{{/crossLink}}.\n * @property COVER_UV_FLIP\n * @static\n * @final\n * @type {Float32Array}\n * @readonly\n */\n/**\n * Portion of the shader that contains the \"varying\" properties required in both vertex and fragment shaders. The\n * regular shader is designed to render all expected objects. Shader code may contain templates that are replaced\n * pre-compile.\n * @property REGULAR_VARYING_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Actual full header for the vertex shader. Includes the varying header. The regular shader is designed to render\n * all expected objects. Shader code may contain templates that are replaced pre-compile.\n * @property REGULAR_VERTEX_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Actual full header for the fragment shader. Includes the varying header. The regular shader is designed to render\n * all expected objects. Shader code may contain templates that are replaced pre-compile.\n * @property REGULAR_FRAGMENT_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Body of the vertex shader. The regular shader is designed to render all expected objects. Shader code may contain\n * templates that are replaced pre-compile.\n * @property REGULAR_VERTEX_BODY\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Body of the fragment shader. The regular shader is designed to render all expected objects. Shader code may\n * contain templates that are replaced pre-compile.\n * @property REGULAR_FRAGMENT_BODY\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n// TODO: DHG: a real particle shader\n/**\n * @property PARTICLE_VERTEX_BODY\n * @todo\n * @final\n * @static\n * @type {String}\n * @readonly\n */\n/**\n * @property PARTICLE_FRAGMENT_BODY\n * @todo\n * @final\n * @static\n * @type {String}\n * @readonly\n */\n/**\n * Portion of the shader that contains the \"varying\" properties required in both vertex and fragment shaders. The\n * cover shader is designed to be a simple vertex/uv only texture render that covers the render surface. Shader\n * code may contain templates that are replaced pre-compile.\n * @property COVER_VARYING_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Actual full header for the vertex shader. Includes the varying header. The cover shader is designed to be a\n * simple vertex/uv only texture render that covers the render surface. Shader code may contain templates that are\n * replaced pre-compile.\n * @property COVER_VERTEX_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Actual full header for the fragment shader. Includes the varying header. The cover shader is designed to be a\n * simple vertex/uv only texture render that covers the render surface. Shader code may contain templates that are\n * replaced pre-compile.\n * @property COVER_FRAGMENT_HEADER\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Body of the vertex shader. The cover shader is designed to be a simple vertex/uv only texture render that covers\n * the render surface. Shader code may contain templates that are replaced pre-compile.\n * @property COVER_VERTEX_BODY\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n/**\n * Body of the fragment shader. The cover shader is designed to be a simple vertex/uv only texture render that\n * covers the render surface. Shader code may contain templates that are replaced pre-compile.\n * @property COVER_FRAGMENT_BODY\n * @static\n * @final\n * @type {String}\n * @readonly\n */\n{\n\tStageGL.VERTEX_PROPERTY_COUNT = 6;\n\tStageGL.INDICIES_PER_CARD = 6;\n\tStageGL.DEFAULT_MAX_BATCH_SIZE = 10000;\n\tStageGL.WEBGL_MAX_INDEX_NUM = Math.pow(2, 16);\n\tStageGL.UV_RECT = {t:0, l:0, b:1, r:1};\n\ttry {\n\t\tStageGL.COVER_VERT = new Float32Array([\n\t\t\t-1,\t\t 1,\t\t// TL\n\t\t\t1,\t\t 1,\t\t// TR\n\t\t\t-1,\t\t-1,\t\t// BL\n\t\t\t1,\t\t 1,\t\t// TR\n\t\t\t1,\t\t-1,\t\t// BR\n\t\t\t-1,\t\t-1\t\t// BL\n\t\t]);\n\t\tStageGL.COVER_UV = new Float32Array([\n\t\t\t 0,\t\t 0,\t\t// TL\n\t\t\t 1,\t\t 0,\t\t// TR\n\t\t\t 0,\t\t 1,\t\t// BL\n\t\t\t 1,\t\t 0,\t\t// TR\n\t\t\t 1,\t\t 1,\t\t// BR\n\t\t\t 0,\t\t 1\t\t// BL\n\t\t]);\n\t\tStageGL.COVER_UV_FLIP = new Float32Array([\n\t\t\t 0,\t\t 1,\t\t// TL\n\t\t\t 1,\t\t 1,\t\t// TR\n\t\t\t 0,\t\t 0,\t\t// BL\n\t\t\t 1,\t\t 1,\t\t// TR\n\t\t\t 1,\t\t 0,\t\t// BR\n\t\t\t 0,\t\t 0\t\t// BL\n\t\t]);\n\t} catch (e) {\n\t\t// Breaking in older browsers, but those browsers wont run StageGL so no recovery or warning needed\n\t}\n\tStageGL.REGULAR_VARYING_HEADER = `\n\t\tprecision mediump float;\n\t\tvarying vec2 vTextureCoord;\n\t\tvarying lowp float indexPicker;\n\t\tvarying lowp float alphaValue;\n\t`;\n\tStageGL.REGULAR_VERTEX_HEADER = `\n\t\t${StageGL.REGULAR_VARYING_HEADER}\n\t\tattribute vec2 vertexPosition;\n\t\tattribute vec2 uvPosition;\n\t\tattribute lowp float textureIndex;\n\t\tattribute lowp float objectAlpha;\n\t\tuniform mat4 pMatrix;\n\t`;\n\tStageGL.REGULAR_FRAGMENT_HEADER = `\n\t\t${StageGL.REGULAR_VARYING_HEADER}\n\t\tuniform sampler2D uSampler[{{count}}];\n\t`;\n\tStageGL.REGULAR_VERTEX_BODY = `\n\t\tvoid main (void) {\n\t\t\t// DHG TODO: This doesn't work. Must be something wrong with the hand built matrix see js... bypass for now\n\t\t\t// vertexPosition, round if flag\n\t\t\t// gl_Position = pMatrix * vec4(vertexPosition.x, vertexPosition.y, 0.0, 1.0);\n\t\t\tgl_Position = vec4(\n\t\t\t\t(vertexPosition.x * pMatrix[0][0]) + pMatrix[3][0],\n\t\t\t\t(vertexPosition.y * pMatrix[1][1]) + pMatrix[3][1],\n\t\t\t\tpMatrix[3][2],\n\t\t\t\t1.0\n\t\t\t);\n\t\t\talphaValue = objectAlpha;\n\t\t\tindexPicker = textureIndex;\n\t\t\tvTextureCoord = uvPosition;\n\t\t}\n\t`;\n\tStageGL.REGULAR_FRAGMENT_BODY = `\n\t\tvoid main (void) {\n\t\t\tint src = int(indexPicker);\n\t\t\tvec4 color = vec4(1.0, 0.0, 0.0, 1.0);\n\n\t\t\tif (src === 0) {\n\t\t\t\tcolor = texture2D(uSampler[0], vTextureCoord);\n\t\t\t\t{{alternates}}\n\t\t\t}\n\n\t\t\t{{fragColor}};\n\t\t}\n\t`;\n\tStageGL.REGULAR_FRAG_COLOR_NORMAL = `\n\t\tgl_FragColor = vec4(color.rgb, color.a * alphaValue);\n\t`;\n\tStageGL.REGULAR_FRAG_COLOR_PREMULTIPLY = `\n\t\tif (color.a > 0.0035) {\n\t\t\tgl_FragColor = vec4(color.rgb / color.a, color.a * alphaValue);\n\t\t} else {\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t`;\n\tStageGL.PARTICLE_VERTEX_BODY = `\n\t\t${StageGL.REGULAR_VERTEX_BODY}\n\t`;\n\tStageGL.PARTICLE_FRAGMENT_BODY = `\n\t\t${StageGL.REGULAR_FRAGMENT_BODY}\n\t`;\n\tStageGL.COVER_VARYING_HEADER = `\n\t\tprecision mediump float;\n\t\tvarying highp vec2 vRenderCoord;\n\t\tvarying highp vec2 vTextureCoord;\n\t`;\n\tStageGL.COVER_VERTEX_HEADER = `\n\t\t${StageGL.COVER_VARYING_HEADER}\n\t\tattribute vec2 vertexPosition;\n\t\tattribute vec2 uvPosition;\n\t\tuniform float uUpright;\n\t`;\n\tStageGL.COVER_FRAGMENT_HEADER = `\n\t\t${StageGL.COVER_VARYING_HEADER}\n\t\tuniform sampler2D uSampler;\n\t`;\n\tStageGL.COVER_VERTEX_BODY = `\n\t\tvoid main (void) {\n\t\t\tgl_Position = vec4(vertexPosition.x, vertexPosition.y, 0.0, 1.0);\n\t\t\tvRenderCoord = uvPosition;\n\t\t\tvTextureCoord = vec2(uvPosition.x, abs(uUpright - uvPosition.y));\n\t\t}\n\t`;\n\tStageGL.COVER_FRAGMENT_BODY = `\n\t\tvoid main (void) {\n\t\t\tvec4 color = texture2D(uSampler, vRenderCoord);\n\t\t\tgl_FragColor = color;\n\t\t}\n\t`;\n}\n\n// events:\n/**\n * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n * You can call {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} on the event to cancel the draw.\n * @event drawstart\n */\n\n/**\n * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is\n * restored.\n * @event drawend\n */\n","/**\n* @license VideoBuffer\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * When an HTML video seeks, including when looping, there is an indeterminate period before a new frame is available.\n * This can result in the video blinking or flashing when it is drawn to a canvas. The VideoBuffer class resolves\n * this issue by drawing each frame to an off-screen canvas and preserving the prior frame during a seek.\n *\n * \tvar myBuffer = new createjs.VideoBuffer(myVideo);\n * \tvar myBitmap = new Bitmap(myBuffer);\n *\n * @class VideoBuffer\n * @param {HTMLVideoElement} video The HTML video element to buffer.\n * @constructor\n **/\nexport default class VideoBuffer {\n\n  constructor (video) {\n// private properties:\n  \t/**\n  \t * Used by Bitmap to determine when the video buffer is ready to be drawn. Not intended for general use.\n  \t * @property readyState\n  \t * @protected\n  \t * @type {Number}\n  \t * @default 0\n  \t **/\n  \tthis.readyState = video.readyState;\n\n  \t/**\n  \t * @property _video\n  \t * @protected\n  \t * @type {HTMLVideoElement}\n  \t * @default 0\n  \t **/\n  \tthis._video = video;\n\n  \t/**\n  \t * @property _canvas\n  \t * @protected\n  \t * @type {HTMLCanvasElement}\n  \t * @default 0\n  \t **/\n  \tthis._canvas = null;\n\n  \t/**\n  \t * @property _lastTime\n  \t * @protected\n  \t * @type {Number}\n  \t * @default -1\n  \t **/\n  \tthis._lastTime = -1;\n\n  \tif (this.readyState < 2) {\n      video.addEventListener(\"canplaythrough\", this._videoReady.bind(this));\n    } //once:true isn't supported everywhere, but its a non-critical optimization here.\n  }\n\n// public methods:\n  /**\n   * Gets an HTML canvas element showing the current video frame, or the previous frame if in a seek / loop.\n   * Primarily for use by {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n   * @method getImage\n   **/\n  getImage () {\n  \tif (this.readyState < 2) { return; }\n  \tlet canvas = this._canvas, video = this._video;\n  \tif (!canvas) {\n\t\t\tcanvas = this._canvas = document.createElement(\"canvas\");\n  \t\tcanvas.width = video.videoWidth;\n  \t\tcanvas.height = video.videoHeight;\n  \t}\n  \tif (video.readyState >= 2 && video.currentTime !== this._lastTime) {\n  \t\tconst ctx = canvas.getContext(\"2d\");\n  \t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n  \t\tctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n  \t\tthis._lastTime = video.currentTime;\n  \t}\n  \treturn canvas;\n  }\n\n  // private methods:\n  /**\n   * @method _videoReady\n   * @protected\n   **/\n  _videoReady () {\n  \tthis.readyState = 2;\n  }\n\n}\n","/*\n* @license Bitmap\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport DisplayObject from \"./DisplayObject\";\nimport VideoBuffer from \"../utils/VideoBuffer\";\n\n/**\n * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\n * HTML element, or a string.\n *\n * <h4>Example</h4>\n *\n *      var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n *\n * <strong>Notes:</strong>\n * <ol>\n *     <li>When using a video source that may loop or seek, use a {{#crossLink \"VideoBuffer\"}}{{/crossLink}} object to\n *      blinking / flashing.\n *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n *      will be displayed.</li>\n *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n *     the Bitmap can be cached.</li>\n *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n *     happens in all browsers except recent Firefox builds.</li>\n *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n * </ol>\n *\n * @class Bitmap\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class Bitmap extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @param {CanvasImageSource | String | Object} imageOrUri The source image to display. This can be a CanvasImageSource\n\t * (image, video, canvas), an object with a `getImage` method that returns a CanvasImageSource, or a string URL to an image.\n\t * If the latter, a new Image instance with the URL as its src will be used.\n\t * @constructor\n\t */\n\tconstructor (imageOrUri) {\n\t\tsuper();\n// public properties:\n\t\t/**\n\t\t * The source image to display. This can be a CanvasImageSource\n\t\t * (image, video, canvas), an object with a `getImage` method that returns a CanvasImageSource, or a string URL to an image.\n\t\t * If the latter, a new Image instance with the URL as its src will be used.\n\t\t * @property image\n\t\t * @type CanvasImageSource | Object\n\t\t */\n\t\tif (typeof imageOrUri === \"string\") {\n\t\t\tthis.image = document.createElement(\"img\");\n\t\t\tthis.image.src = imageOrUri;\n\t\t} else {\n\t\t\tthis.image = imageOrUri;\n\t\t}\n\n\t\t/**\n\t\t * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\n\t\t * Note that video sources must have a width / height set to work correctly with `sourceRect`.\n\t\t * @property sourceRect\n\t\t * @type Rectangle\n\t\t * @default null\n\t\t */\n\t\tthis.sourceRect = null;\n\n\t\t/**\n\t\t * Set as compatible with WebGL.\n\t\t * @property _webGLRenderStyle\n\t\t * @protected\n\t\t * @type {Number}\n\t\t */\n\t\tthis._webGLRenderStyle = DisplayObject._StageGL_BITMAP;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\tlet image = this.image;\n\t\tlet hasContent = this.cacheCanvas || (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t */\n\tdraw (ctx, ignoreCache = false) {\n\t\tif (super.draw(ctx, ignoreCache)) { return true; }\n\t\tlet img = this.image, rect = this.sourceRect;\n\t\tif (img instanceof VideoBuffer) { img = img.getImage(); }\n\t\tif (img == null) { return true; }\n\t\tif (rect) {\n\t\t\t// some browsers choke on out of bound values, so we'll fix them:\n\t\t\tlet x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;\n\t\t\tif (x1 < 0) { x -= x1; x1 = 0; }\n\t\t\tif (x2 > w) { x2 = w; }\n\t\t\tif (y1 < 0) { y -= y1; y1 = 0; }\n\t\t\tif (y2 > h) { y2 = h; }\n\t\t\tctx.drawImage(img, x1, y1, x2-x1, y2-y1, x, y, x2-x1, y2-y1);\n\t\t} else {\n\t\t\tctx.drawImage(img, 0, 0);\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Note, the doc sections below document using the specified APIs (from DisplayObject) from\n\t// Bitmap. This is why they have no method implementations.\n\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method cache\n\t */\n\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method updateCache\n\t */\n\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method uncache\n\t */\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tgetBounds () {\n\t\tlet rect = super.getBounds();\n\t\tif (rect) { return rect; }\n\t\tlet image = this.image, o = this.sourceRect || image;\n\t\tlet hasContent = (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n\t}\n\n\t/**\n\t * Returns a clone of the Bitmap instance.\n\t * @method clone\n\t * @param {Boolean} [node] Whether the underlying DOM element should be cloned as well.\n\t * @return {Bitmap} a clone of the Bitmap instance.\n\t */\n\tclone (node) {\n\t\tlet img = this.image;\n\t\tif (img != null && node != null) { img = img.cloneNode(); }\n\t\tlet bmp = new Bitmap(img);\n\t\tif (this.sourceRect) { bmp.sourceRect = this.sourceRect.clone(); }\n\t\tthis._cloneProps(bmp);\n\t\treturn bmp;\n\t}\n\n}\n","/*\n* @license Sprite\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport DisplayObject from \"./DisplayObject\";\nimport Event from \"createjs/src/events/Event\";\n\n/**\n * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\n * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\n * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\n * play frames as an animation, and even sequence animations together.\n *\n * See the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n *\n * <h4>Example</h4>\n *\n *      var instance = new createjs.Sprite(spriteSheet);\n *      instance.gotoAndStop(\"frameName\");\n *\n * Until {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\n * only the first defined frame defined in the sprite sheet will be displayed.\n *\n * @class Sprite\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class Sprite extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame\n\t * dimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.\n\t */\n\tconstructor (spriteSheet, frameOrAnimation) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\n\t\t * definitions, this will advance non-sequentially. This will always be an integer value.\n\t\t * @property currentFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.currentFrame = 0;\n\n\t\t/**\n\t\t * Returns the name of the currently playing animation.\n\t\t * @property currentAnimation\n\t\t * @type {String}\n\t\t * @final\n\t\t * @readonly\n\t\t */\n\t\tthis.currentAnimation = null;\n\n\t\t/**\n\t\t * Prevents the animation from advancing each tick automatically. For example, you could create a sprite\n\t\t * sheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.\n\t\t * @property paused\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = true;\n\n\t\t/**\n\t\t * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\n\t\t * data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t\t * @property spriteSheet\n\t\t * @type {SpriteSheet}\n\t\t * @readonly\n\t\t */\n\t\tthis.spriteSheet = spriteSheet;\n\n\t\t/**\n\t\t * Specifies the current frame index within the currently playing animation. When playing normally, this will increase\n\t\t * from 0 to n-1, where n is the number of frames in the current animation.\n\t\t *\n\t\t * This could be a non-integer value if\n\t\t * using time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\n\t\t * not an integer.\n\t\t * @property currentAnimationFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.currentAnimationFrame = 0;\n\n\t\t/**\n\t\t * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\n\t\t * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t * framerate.\n\t\t *\n\t\t * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\n\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t * vary slightly between frames.\n\t\t *\n\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t * @property framerate\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.framerate = 0;\n\n\n// private properties:\n\t\t/**\n\t\t * Current animation object.\n\t\t * @property _animation\n\t\t * @protected\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis._animation = null;\n\n\t\t/**\n\t\t * Current frame index.\n\t\t * @property _currentFrame\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentFrame = null;\n\n\t\t/**\n\t\t * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame\n\t\t * @property _skipAdvance\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._skipAdvance = false;\n\n\t\t/**\n\t\t * Set as compatible with WebGL.\n\t\t * @property _webGLRenderStyle\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis._webGLRenderStyle = DisplayObject._StageGL_SPRITE;\n\n\t\tif (frameOrAnimation != null) { this.gotoAndPlay(frameOrAnimation); }\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\tlet hasContent = this.cacheCanvas || this.spriteSheet.complete;\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t */\n\tdraw (ctx, ignoreCache) {\n\t\tif (super.draw(ctx, ignoreCache)) { return true; }\n\t\tthis._normalizeFrame();\n\t\tlet o = this.spriteSheet.getFrame(this._currentFrame|0);\n\t\tif (!o) { return false; }\n\t\tlet rect = o.rect;\n\t\tif (rect.width && rect.height) { ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height); }\n\t\treturn true;\n\t}\n\n\t// Note, the doc sections below document using the specified APIs (from DisplayObject) from\n\t// Bitmap. This is why they have no method implementations.\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method cache\n\t */\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method updateCache\n\t */\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method uncache\n\t */\n\n\t/**\n\t * Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\n\t * or {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\n\t * unchanged.\n\t * @method play\n\t */\n\tplay () {\n\t\tthis.paused = false;\n\t}\n\n\t/**\n\t * Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\n\t * is called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\n\t * will resume playback.\n\t * @method stop\n\t */\n\tstop () {\n\t\tthis.paused = true;\n\t}\n\n\t/**\n\t * Sets paused to false and plays the specified animation name, named frame, or frame number.\n\t * @method gotoAndPlay\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and begin playing.\n\t */\n\tgotoAndPlay (frameOrAnimation) {\n\t\tthis.paused = false;\n\t\tthis._skipAdvance = true;\n\t\tthis._goto(frameOrAnimation);\n\t}\n\n\t/**\n\t * Sets paused to true and seeks to the specified animation name, named frame, or frame number.\n\t * @method gotoAndStop\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and stop.\n\t */\n\tgotoAndStop (frameOrAnimation) {\n\t\tthis.paused = true;\n\t\tthis._goto(frameOrAnimation);\n\t}\n\n\t/**\n\t * Advances the playhead. This occurs automatically each tick by default.\n\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\n\t * or its SpriteSheet.\n\t * @method advance\n\t*/\n\tadvance (time) {\n\t\tlet fps = this.framerate || this.spriteSheet.framerate;\n\t\tlet t = (fps && time != null) ? time/(1000/fps) : 1;\n\t\tthis._normalizeFrame(t);\n\t}\n\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\n\t * the origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\n\t * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n\t *\n\t * Also see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.\n\t * @method getBounds\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\n\t * loaded.\n\t */\n\tgetBounds () {\n\t\t// TODO: should this normalizeFrame?\n\t\treturn super.getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n\t}\n\n\t/**\n\t * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\n\t * instances.\n\t * @method clone\n\t * @return {Sprite} a clone of the Sprite instance.\n\t */\n\tclone () {\n\t\treturn this._cloneProps(new Sprite(this.spriteSheet));\n\t}\n\n// private methods:\n\t/**\n\t * @method _cloneProps\n\t * @param {Sprite} o\n\t * @return {Sprite} o\n\t * @protected\n\t */\n\t_cloneProps (o) {\n\t\tsuper._cloneProps(o);\n\t\to.currentFrame = this.currentFrame;\n\t\to.currentAnimation = this.currentAnimation;\n\t\to.paused = this.paused;\n\t\to.currentAnimationFrame = this.currentAnimationFrame;\n\t\to.framerate = this.framerate;\n\n\t\to._animation = this._animation;\n\t\to._currentFrame = this._currentFrame;\n\t\to._skipAdvance = this._skipAdvance;\n\t\treturn o;\n\t}\n\n\t/**\n\t * Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\n\t * ticks.\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t * @method _tick\n\t */\n\t_tick (evtObj) {\n\t\tif (!this.paused) {\n\t\t\tif (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }\n\t\t\tthis._skipAdvance = false;\n\t\t}\n\t\tsuper._tick(evtObj);\n\t}\n\n\n\t/**\n\t * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.\n\t * @protected\n\t * @method _normalizeFrame\n\t * @param {Number} [frameDelta=0]\n\t */\n\t_normalizeFrame (frameDelta = 0) {\n\t\tlet animation = this._animation;\n\t\tlet paused = this.paused;\n\t\tlet frame = this._currentFrame;\n\n\t\tif (animation) {\n\t\t\tlet speed = animation.speed || 1;\n\t\t\tlet animFrame = this.currentAnimationFrame;\n\t\t\tlet l = animation.frames.length;\n\t\t\tif (animFrame + frameDelta * speed >= l) {\n\t\t\t\tlet next = animation.next;\n\t\t\t\tif (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n\t\t\t\t\t// something changed in the event stack, so we shouldn't make any more changes here.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (next) {\n\t\t\t\t\t// sequence. Automatically calls _normalizeFrame again with the remaining frames.\n\t\t\t\t\treturn this._goto(next, frameDelta - (l - animFrame) / speed);\n\t\t\t\t} else {\n\t\t\t\t\t// end.\n\t\t\t\t\tthis.paused = true;\n\t\t\t\t\tanimFrame = animation.frames.length - 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanimFrame += frameDelta * speed;\n\t\t\t}\n\t\t\tthis.currentAnimationFrame = animFrame;\n\t\t\tthis._currentFrame = animation.frames[animFrame | 0]\n\t\t} else {\n\t\t\tframe = (this._currentFrame += frameDelta);\n\t\t\tlet l = this.spriteSheet.getNumFrames();\n\t\t\tif (frame >= l && l > 0) {\n\t\t\t\tif (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n\t\t\t\t\t// looped.\n\t\t\t\t\tif ((this._currentFrame -= l) >= l) { return this._normalizeFrame(); }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tframe = this._currentFrame | 0;\n\t\tif (this.currentFrame != frame) {\n\t\t\tthis.currentFrame = frame;\n\t\t\tthis.dispatchEvent(\"change\");\n\t\t}\n\t};\n\n\t/**\n\t * Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n\t * {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)\n\t * @method _dispatchAnimationEnd\n\t * @param animation\n\t * @param frame\n\t * @param paused\n\t * @param next\n\t * @param end\n\t * @private\n\t */\n\t_dispatchAnimationEnd (animation, frame, paused, next, end) {\n\t\tlet name = animation ? animation.name : null;\n\t\tif (this.hasEventListener(\"animationend\")) {\n\t\t\tlet evt = new Event(\"animationend\");\n\t\t\tevt.name = name;\n\t\t\tevt.next = next;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t\t// did the animation get changed in the event stack?:\n\t\tlet changed = (this._animation != animation || this._currentFrame != frame);\n\t\t// if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:\n\t\tif (!changed && !paused && this.paused) { this.currentAnimationFrame = end; changed = true; }\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Moves the playhead to the specified frame number or animation.\n\t * @method _goto\n\t * @param {String|Number} frameOrAnimation The frame number or animation that the playhead should move to.\n\t * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.\n\t * @protected\n\t */\n\t_goto (frameOrAnimation, frame) {\n\t\tthis.currentAnimationFrame = 0;\n\t\tif (isNaN(frameOrAnimation)) {\n\t\t\tlet data = this.spriteSheet.getAnimation(frameOrAnimation);\n\t\t\tif (data) {\n\t\t\t\tthis._animation = data;\n\t\t\t\tthis.currentAnimation = frameOrAnimation;\n\t\t\t\tthis._normalizeFrame(frame);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentAnimation = this._animation = null;\n\t\t\tthis._currentFrame = frameOrAnimation;\n\t\t\tthis._normalizeFrame();\n\t\t}\n\t}\n\n}\n\n// events:\n/**\n * Dispatched when an animation reaches its ends.\n * @event animationend\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n * @param {String} name The name of the animation that just ended.\n * @param {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.\n * @since 0.6.0\n */\n\n/**\n * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\n * or calling gotoAndPlay() or gotoAndStop().\n * @event change\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n */\n","/*\n* @license BitmapText\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport Container from \"./Container\";\nimport Sprite from \"./Sprite\";\n\n// ES6 does not support static properties, this is a work around.\nlet _maxPoolSize = 100;\nlet _spritePool = [];\n\n/**\n * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported using new line characters,\n * but automatic wrapping is not supported. See the {{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\n * property for more information on defining glyphs.\n *\n * <strong>Important:</strong> While BitmapText extends Container, it is not designed to be used as one.\n * As such, methods like addChild and removeChild are disabled.\n *\n * @class BitmapText\n * @extends Container\n * @module EaselJS\n */\nexport default class BitmapText extends Container {\n\n// constructor:\n\t/**\n\t * @param {String} [text=\"\"] The text to display.\n\t * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.\n\t * @constructor\n\t */\n\tconstructor (text = \"\", spriteSheet = null) {\n\t\tsuper();\n// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t * @default \"\"\n\t\t */\n\t\tthis.text = text;\n\n\t\t/**\n\t\t * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\n\t\t * should have a single frame animation defined in the sprite sheet named the same as\n\t\t * corresponding character. For example, the following animation definition:\n\t\t *\n\t\t * \t\t\"A\": {frames: [0]}\n\t\t *\n\t\t * would indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\n\t\t * is also acceptable:\n\t\t *\n\t\t * \t\t\"A\": 0\n\t\t *\n\t\t * Note that if a character in the text is not found in the sprite sheet, it will also\n\t\t * try to use the alternate case (upper or lower).\n\t\t *\n\t\t * See SpriteSheet for more information on defining sprite sheet data.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t * @default null\n\t\t */\n\t\tthis.spriteSheet = spriteSheet;\n\n\t\t/**\n\t\t * The height of each line of text. If 0, then it will use a line height calculated\n\t\t * by checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\n\t\t * those characters are not defined, it will use the height of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.lineHeight = 0;\n\n\t\t/**\n\t\t * This spacing (in pixels) will be added after each character in the output.\n\t\t * @property letterSpacing\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.letterSpacing = 0;\n\n\t\t/**\n\t\t * If a space character is not defined in the sprite sheet, then empty pixels equal to\n\t\t * spaceWidth will be inserted instead. If 0, then it will use a value calculated\n\t\t * by checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\n\t\t * those characters are not defined, it will use the width of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property spaceWidth\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.spaceWidth = 0;\n\n\n// private properties:\n\t \t/**\n\t\t * @property _oldProps\n\t\t * @type Object\n\t\t * @protected\n\t\t */\n\t\tthis._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};\n\n\t\t/**\n\t\t * Used to track the object which this class attached listeners to, helps optimize listener attachment.\n\t\t * @property _oldStage\n\t\t * @type Stage\n\t\t * @protected\n\t\t */\n\t\tthis._oldStage = null;\n\n\t\t/**\n\t\t * The event listener proxy triggered drawing draw for special circumstances.\n\t\t * @property _drawAction\n\t\t * @type function\n\t\t * @protected\n\t\t */\n\t\tthis._drawAction = null;\n\n\t}\n\n// static properties:\n\t/**\n\t * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\n\t * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\n\t * retained, slightly increasing memory use, but reducing instantiation.\n\t * @property maxPoolSize\n\t * @type Number\n\t * @static\n\t * @default 100\n\t */\n\tstatic get maxPoolSize () { return _maxPoolSize; }\n\tstatic set maxPoolSize (maxPoolSize) { _maxPoolSize = maxPoolSize;}\n\n\t/**\n\t * Sprite object pool.\n\t * @type {Array}\n\t * @static\n\t * @private\n\t * @readonly\n\t */\n\tstatic get _spritePool () { return _spritePool; }\n\n// public methods:\n\t/**\n\t * Docced in superclass.\n\t */\n\tdraw (ctx, ignoreCache) {\n\t\tif (this.drawCache(ctx, ignoreCache)) { return; }\n\t\tthis._updateState();\n\t\tsuper.draw(ctx, ignoreCache);\n\t}\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tgetBounds () {\n\t\tthis._updateText();\n\t\treturn super.getBounds();\n\t}\n\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\tlet hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n\t}\n\n\tclone () {\n\t\treturn this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n\t}\n\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChild\n\t */\n\taddChild () {}\n\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChildAt\n\t */\n\taddChildAt () {}\n\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChild\n\t */\n\tremoveChild () {}\n\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChildAt\n\t */\n\tremoveChildAt () {}\n\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeAllChildren\n\t */\n\tremoveAllChildren () {}\n\n// private methods:\n\t/**\n\t * Docced in superclass.\n\t **/\n\t_updateState () {\n\t\tthis._updateText();\n\t}\n\n \t/**\n\t * @method _cloneProps\n\t * @param {BitmapText} o\n\t * @return {BitmapText} o\n\t * @protected\n\t */\n\t_cloneProps (o) {\n\t\tsuper._cloneProps(o);\n\t\to.lineHeight = this.lineHeight;\n\t\to.letterSpacing = this.letterSpacing;\n\t\to.spaceWidth = this.spaceWidth;\n\t\treturn o;\n\t}\n\n\t/**\n\t * @method _getFrameIndex\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Number}\n\t * @protected\n\t */\n\t_getFrameIndex (character, spriteSheet) {\n\t\tlet c, o = spriteSheet.getAnimation(character);\n\t\tif (!o) {\n\t\t\t(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c = null);\n\t\t\tif (c) { o = spriteSheet.getAnimation(c); }\n\t\t}\n\t\treturn o && o.frames[0];\n\t}\n\n\t/**\n\t * @method _getFrame\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Object}\n\t * @protected\n\t */\n\t_getFrame (character, spriteSheet) {\n\t\tlet index = this._getFrameIndex(character, spriteSheet);\n\t\treturn index == null ? index : spriteSheet.getFrame(index);\n\t}\n\n\t/**\n\t * @method _getLineHeight\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t */\n\t_getLineHeight (ss) {\n\t\tlet frame = this._getFrame(\"1\", ss) || this._getFrame(\"T\", ss) || this._getFrame(\"L\", ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.height : 1;\n\t}\n\n\t/**\n\t * @method _getSpaceWidth\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t */\n\t_getSpaceWidth (ss) {\n\t\tlet frame = this._getFrame(\"1\", ss) || this._getFrame(\"l\", ss) || this._getFrame(\"e\", ss) || this._getFrame(\"a\", ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.width : 1;\n\t}\n\n\t_tick (evtObj) {\n\t\tlet stage = this.stage;\n\t\tstage && stage.on(\"drawstart\", this._updateText, this, true);\n\t\tsuper._tick(evtObj);\n\t}\n\n\t/**\n\t * @method _updateText\n\t * @protected\n\t */\n\t_updateText () {\n\t\tlet x = 0, y = 0, o = this._oldProps, change = false, spaceW = this.spaceWidth, lineH = this.lineHeight, ss = this.spriteSheet;\n\t\tlet pool = BitmapText._spritePool, kids = this.children, childIndex = 0, numKids = kids.length, sprite;\n\n\t\tfor (let n in o) {\n\t\t\tif (o[n] != this[n]) {\n\t\t\t\to[n] = this[n];\n\t\t\t\tchange = true;\n\t\t\t}\n\t\t}\n\t\tif (!change) { return; }\n\n\t\tlet hasSpace = !!this._getFrame(\" \", ss);\n\t\tif (!hasSpace && !spaceW) { spaceW = this._getSpaceWidth(ss); }\n\t\tif (!lineH) { lineH = this._getLineHeight(ss); }\n\n\t\tfor (let i = 0, l = this.text.length; i < l; i++) {\n\t\t\tlet character = this.text.charAt(i);\n\t\t\tif (character === \" \" && !hasSpace) {\n\t\t\t\tx += spaceW;\n\t\t\t\tcontinue;\n\t\t\t} else if (character === \"\\n\" || character === \"\\r\") {\n\t\t\t\tif (character === \"\\r\" && this.text.charAt(i+1) === \"\\n\") { i++; } // crlf\n\t\t\t\tx = 0;\n\t\t\t\ty += lineH;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet index = this._getFrameIndex(character, ss);\n\t\t\tif (index == null) { continue; }\n\n\t\t\tif (childIndex < numKids) {\n\t\t\t\tsprite = kids[childIndex];\n\t\t\t} else {\n\t\t\t\tkids.push(sprite = pool.length ? pool.pop() : new Sprite());\n\t\t\t\tsprite.parent = this;\n\t\t\t\tnumKids++;\n\t\t\t}\n\t\t\tsprite.spriteSheet = ss;\n\t\t\tsprite.gotoAndStop(index);\n\t\t\tsprite.x = x;\n\t\t\tsprite.y = y;\n\t\t\tchildIndex++;\n\n\t\t\tx += sprite.getBounds().width + this.letterSpacing;\n\t\t}\n\n\t\twhile (numKids > childIndex) {\n\t\t\t // faster than removeChild.\n\t\t\tpool.push(sprite = kids.pop());\n\t\t\tsprite.parent = null;\n\t\t\tnumKids--;\n\t\t}\n\t\tif (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }\n\t}\n\n}\n","/*\n* @license DOMElement\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport DisplayObject from \"./DisplayObject\";\nimport DisplayProps from \"../geom/DisplayProps\";\n\n/**\n * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n *\n * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\n * within the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\n * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\n * drawn in front of or behind the canvas).\n *\n * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that\n * the DOM Object be added to a div that also contains the canvas so that they share the same position\n * on the page.\n *\n * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements\n * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\n * content.\n *\n * <h4>Mouse Interaction</h4>\n *\n * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\n * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\n * the htmlElement (note, this does not support EventDispatcher)\n *\n *      var domElement = new createjs.DOMElement(htmlElement);\n *      domElement.htmlElement.onclick = function() {\n *          console.log(\"clicked\");\n *      }\n *\n * <strong>Important:</strong> This class needs to be notified it is about to be drawn, this will happen automatically\n * if you call stage.update, calling stage.draw or disabling tickEnabled will miss important steps and it will render\n * stale information.\n *\n * @class DOMElement\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class DOMElement extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {HTMLElement|String} htmlElement A reference or id for the DOM element to manage.\n\t */\n\tconstructor (htmlElement) {\n\t\tsuper();\n\n\t\tif (typeof(htmlElement) === \"string\") { htmlElement = document.getElementById(htmlElement); }\n\t\tthis.mouseEnabled = false;\n\n\t\tlet style = htmlElement.style;\n\t\tstyle.position = \"absolute\";\n\t\tstyle.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\";\n\n// public properties:\n\t\t/**\n\t\t * The DOM object to manage.\n\t\t * @property htmlElement\n\t\t * @type HTMLElement\n\t\t */\n\t\tthis.htmlElement = htmlElement;\n\n// private properties:\n\t\t/**\n\t\t * @property _oldMtx\n\t\t * @type Matrix2D\n\t\t * @protected\n\t\t */\n\t\tthis._oldProps = null;\n\n\t\t/**\n\t\t * Used to track the object which this class attached listeners to, helps optimize listener attachment.\n\t\t * @property _oldStage\n\t\t * @type Stage\n\t\t * @protected\n\t\t */\n\t\tthis._oldStage = null;\n\t\t/**\n\t\t * The event listener proxy triggered drawing draw for special circumstances.\n\t\t * @property _drawAction\n\t\t * @type function\n\t\t * @protected\n\t\t */\n\t\tthis._drawAction = null;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\treturn this.htmlElement != null;\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t */\n\tdraw (ctx, ignoreCache) {\n\t\t// this relies on the _tick method because draw isn't called if the parent is not visible.\n\t\t// the actual update happens in _handleDrawEnd\n\t\treturn true;\n\t}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method cache\n\t */\n\tcache () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method uncache\n\t */\n\tuncache () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method updateCache\n\t */\n\tupdateCache () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method hitTest\n\t */\n\thitTest () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToGlobal\n\t */\n\tlocalToGlobal () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method globalToLocal\n\t */\n\tglobalToLocal () {}\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToLocal\n\t */\n\tlocalToLocal () {}\n\n\t/**\n\t * DOMElement cannot be cloned. Throws an error.\n\t * @method clone\n\t */\n\tclone () {\n\t\tthrow(\"DOMElement cannot be cloned.\")\n\t}\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * function.\n\t * @protected\n\t */\n\t_tick (evtObj) {\n\t\tlet stage = this.stage;\n\t\tif (stage != null && stage !== this._oldStage) {\n\t\t\tthis._drawAction && stage.off(\"drawend\", this._drawAction);\n\t\t\tthis._drawAction = stage.on(\"drawend\", this._handleDrawEnd, this);\n\t\t\tthis._oldStage = stage;\n\t\t}\n\t\tsuper._tick(evtObj);\n\t}\n\n\t/**\n\t * @method _handleDrawEnd\n\t * @param {Event} evt\n\t * @protected\n\t */\n\t_handleDrawEnd (evt) {\n\t\tlet o = this.htmlElement;\n\t\tif (!o) { return; }\n\t\tlet style = o.style;\n\n\t\tlet props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;\n\n\t\tlet visibility = props.visible ? \"visible\" : \"hidden\";\n\t\tif (visibility != style.visibility) { style.visibility = visibility; }\n\t\tif (!props.visible) { return; }\n\n\t\tlet oldProps = this._oldProps, oldMtx = oldProps&&oldProps.matrix;\n\t\tlet n = 10000; // precision\n\n\t\tif (!oldMtx || !oldMtx.equals(mtx)) {\n\t\t\tlet str = \"matrix(\" + (mtx.a*n|0)/n +\",\"+ (mtx.b*n|0)/n +\",\"+ (mtx.c*n|0)/n +\",\"+ (mtx.d*n|0)/n +\",\"+ (mtx.tx+0.5|0);\n\t\t\tstyle.transform = style.WebkitTransform = style.OTransform = style.msTransform = str +\",\"+ (mtx.ty+0.5|0) +\")\";\n\t\t\tstyle.MozTransform = str +\"px,\"+ (mtx.ty+0.5|0) +\"px)\";\n\t\t\tif (!oldProps) { oldProps = this._oldProps = new DisplayProps(true, null); }\n\t\t\toldProps.matrix.copy(mtx);\n\t\t}\n\n\t\tif (oldProps.alpha != props.alpha) {\n\t\t\tstyle.opacity = \"\"+(props.alpha*n|0)/n;\n\t\t\toldProps.alpha = props.alpha;\n\t\t}\n\t}\n\n}\n\n/**\n * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n * @event click\n */\n\n/**\n * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n * @event dblClick\n */\n\n/**\n * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n * @event mousedown\n */\n\n/**\n * The HTMLElement can listen for the mouseover event, not the DOMElement instance.\n * Since DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.\n * @event mouseover\n */\n\n/**\n * Not applicable to DOMElement.\n * @event tick\n */\n","/**\n* @license Graphics\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\n * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\n * directly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\n * context of an EaselJS display list.\n *\n * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\n * instantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n *\n *      var g = new createjs.Graphics();\n *      g.setStrokeStyle(1);\n *      g.beginStroke(\"#000000\");\n *      g.beginFill(\"red\");\n *      g.drawCircle(0,0,30);\n *\n * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\n * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n *\n *      myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n *\n * Each graphics API call generates a command object (see below). The last command to be created can be accessed via\n * {{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n *\n *      var fillCommand = myGraphics.beginFill(\"red\").command;\n *      // ... later, update the fill style/color:\n *      fillCommand.style = \"blue\";\n *      // or change it to a bitmap fill:\n *      fillCommand.bitmap(myImage);\n *\n * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\n * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n *\n *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n *      myGraphics.append(createjs.Graphics.beginCmd);\n *      // we need to define the path before applying the fill:\n *      var circle = new createjs.Graphics.Circle(0,0,30);\n *      myGraphics.append(circle);\n *      // fill the path we just defined:\n *      var fill = new createjs.Graphics.Fill(\"red\");\n *      myGraphics.append(fill);\n *\n * These approaches can be used together, for example to insert a custom command:\n *\n *      myGraphics.beginFill(\"red\");\n *      var customCommand = new CustomSpiralCommand(etc);\n *      myGraphics.append(customCommand);\n *      myGraphics.beginFill(\"blue\");\n *      myGraphics.drawCircle(0, 0, 30);\n *\n * See {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n *\n * <h4>Tiny API</h4>\n * The Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\n * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\n * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\n * descriptions in the docs.\n *\n * <table>\n *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n *     <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n *     <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n *     <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n *     <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n *     <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n *     <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n *     <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n *     <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n *     <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n *     <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n *     <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n *     <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n *     <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n *     <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n *     <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n *     <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n *     <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n *     <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n *     <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n *     <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n *     <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n *     <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n *     <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n *     <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n *     <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n *     <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n * </table>\n *\n * Here is the above example, using the tiny API instead.\n *\n *      myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);\n *\n * @class Graphics\n * @module EaselJS\n */\nexport default class Graphics {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n// public properties\n\t\t/**\n\t\t * Holds a reference to the last command that was created or appended. For example, you could retain a reference\n\t\t * to a Fill command in order to dynamically update the color later by using:\n\t\t *\n\t\t * \t\tvar myFill = myGraphics.beginFill(\"red\").command;\n\t\t * \t\t// update color later:\n\t\t * \t\tmyFill.style = \"yellow\";\n\t\t *\n\t\t * @property command\n\t\t * @type Object\n\t\t */\n\t\tthis.command = null;\n\n\n\t// private properties\n\t\t/**\n\t\t * @property _stroke\n\t\t * @protected\n\t\t * @type {Stroke}\n\t\t */\n\t\tthis._stroke = null;\n\n\t\t/**\n\t\t * @property _strokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t */\n\t\tthis._strokeStyle = null;\n\n\t\t/**\n\t\t * @property _oldStrokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t */\n\t\tthis._oldStrokeStyle = null;\n\n\t\t/**\n\t\t * @property _strokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t */\n\t\tthis._strokeDash = null;\n\n\t\t/**\n\t\t * @property _oldStrokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t */\n\t\tthis._oldStrokeDash = null;\n\n\t\t/**\n\t\t * @property _strokeIgnoreScale\n\t\t * @protected\n\t\t * @type Boolean\n\t\t */\n\t\tthis._strokeIgnoreScale = false;\n\n\t\t/**\n\t\t * @property _fill\n\t\t * @protected\n\t\t * @type {Fill}\n\t\t */\n\t\tthis._fill = null;\n\n\t\t/**\n\t\t * @property _instructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._instructions = [];\n\n\t\t/**\n\t\t * Indicates the last instruction index that was committed.\n\t\t * @property _commitIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t */\n\t\tthis._commitIndex = 0;\n\n\t\t/**\n\t\t * Uncommitted instructions.\n\t\t * @property _activeInstructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._activeInstructions = [];\n\n\t\t/**\n\t\t * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.\n\t\t * @property _dirty\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._dirty = false;\n\n\t\t/**\n\t\t * Index to draw from if a store operation has happened.\n\t\t * @property _storeIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._storeIndex = 0;\n\n// ActionScript mappings:\n\t\t/**\n\t\t * Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method curveTo\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t */\n\t\tthis.curveTo = this.quadraticCurveTo;\n\n\t\t/**\n\t\t * Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n\t\t * method.\n\t\t * @method drawRect\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t */\n\t\tthis.drawRect = this.rect;\n\n// tiny API:\n\t\t/**\n\t\t * Shortcut to moveTo.\n\t\t * @method mt\n\t\t * @param {Number} x The x coordinate the drawing point should move to.\n\t\t * @param {Number} y The y coordinate the drawing point should move to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.mt = this.moveTo;\n\n\t\t/**\n\t\t * Shortcut to lineTo.\n\t\t * @method lt\n\t\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.lt = this.lineTo;\n\n\t\t/**\n\t\t * Shortcut to arcTo.\n\t\t * @method at\n\t\t * @param {Number} x1\n\t\t * @param {Number} y1\n\t\t * @param {Number} x2\n\t\t * @param {Number} y2\n\t\t * @param {Number} radius\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.at = this.arcTo;\n\n\t\t/**\n\t\t * Shortcut to bezierCurveTo.\n\t\t * @method bt\n\t\t * @param {Number} cp1x\n\t\t * @param {Number} cp1y\n\t\t * @param {Number} cp2x\n\t\t * @param {Number} cp2y\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.bt = this.bezierCurveTo;\n\n\t\t/**\n\t\t * Shortcut to quadraticCurveTo / curveTo.\n\t\t * @method qt\n\t\t * @param {Number} cpx\n\t\t * @param {Number} cpy\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @protected\n\t\t * @chainable\n\t\t */\n\t\tthis.qt = this.quadraticCurveTo;\n\n\t\t/**\n\t\t * Shortcut to arc.\n\t\t * @method a\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} radius\n\t\t * @param {Number} startAngle Measured in radians.\n\t\t * @param {Number} endAngle Measured in radians.\n\t\t * @param {Boolean} anticlockwise\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @protected\n\t\t * @chainable\n\t\t */\n\t\tthis.a = this.arc;\n\n\t\t/**\n\t\t * Shortcut to rect.\n\t\t * @method r\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.r = this.rect;\n\n\t\t/**\n\t\t * Shortcut to closePath.\n\t\t * @method cp\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.cp = this.closePath;\n\n\t\t/**\n\t\t * Shortcut to clear.\n\t\t * @method c\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.c = this.clear;\n\n\t\t/**\n\t\t * Shortcut to beginFill.\n\t\t * @method f\n\t\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no fill.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.f = this.beginFill;\n\n\t\t/**\n\t\t * Shortcut to beginLinearGradientFill.\n\t\t * @method lf\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t\t * drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t\t * the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.lf = this.beginLinearGradientFill;\n\n\t\t/**\n\t\t * Shortcut to beginRadialGradientFill.\n\t\t * @method rf\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.rf = this.beginRadialGradientFill;\n\n\t\t/**\n\t\t * Shortcut to beginBitmapFill.\n\t\t * @method bf\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern.\n\t\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t\t * will be applied relative to the parent transform.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.bf = this.beginBitmapFill;\n\n\t\t/**\n\t\t * Shortcut to endFill.\n\t\t * @method ef\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.ef = this.endFill;\n\n\t\t/**\n\t\t * Shortcut to setStrokeStyle.\n\t\t * @method ss\n\t\t * @param {Number} thickness The width of the stroke.\n\t\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t\t * the tiny API.\n\t\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t\t * for use with the tiny API.\n\t\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t\t * controls at what point a mitered joint will be clipped.\n\t\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t\t * of active transformations.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.ss = this.setStrokeStyle;\n\n\t\t/**\n\t\t * Shortcut to setStrokeDash.\n\t\t * @method sd\n\t\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t\t * For example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t\t * Passing null or an empty array will clear any existing dash.\n\t\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.sd = this.setStrokeDash;\n\n\t\t/**\n\t\t * Shortcut to beginStroke.\n\t\t * @method s\n\t\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t\t * null will result in no stroke.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.s = this.beginStroke;\n\n\t\t/**\n\t\t * Shortcut to beginLinearGradientStroke.\n\t\t * @method ls\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.ls = this.beginLinearGradientStroke;\n\n\t\t/**\n\t\t * Shortcut to beginRadialGradientStroke.\n\t\t * @method rs\n\t\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t\t * a gradient drawing from red to blue.\n\t\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t\t * to 100%.\n\t\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.rs = this.beginRadialGradientStroke;\n\n\t\t/**\n\t\t * Shortcut to beginBitmapStroke.\n\t\t * @method bs\n\t\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t\t * as the pattern.\n\t\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.bs = this.beginBitmapStroke;\n\n\t\t/**\n\t\t * Shortcut to endStroke.\n\t\t * @method es\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.es = this.endStroke;\n\n\t\t/**\n\t\t * Shortcut to drawRect.\n\t\t * @method dr\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w Width of the rectangle\n\t\t * @param {Number} h Height of the rectangle\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.dr = this.drawRect;\n\n\t\t/**\n\t\t * Shortcut to drawRoundRect.\n\t\t * @method rr\n\t\t * @param {Number} x\n\t\t * @param {Number} y\n\t\t * @param {Number} w\n\t\t * @param {Number} h\n\t\t * @param {Number} radius Corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.rr = this.drawRoundRect;\n\n\t\t/**\n\t\t * Shortcut to drawRoundRectComplex.\n\t\t * @method rc\n\t\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t\t * @param {Number} w The width of the round rect.\n\t\t * @param {Number} h The height of the round rect.\n\t\t * @param {Number} radiusTL Top left corner radius.\n\t\t * @param {Number} radiusTR Top right corner radius.\n\t\t * @param {Number} radiusBR Bottom right corner radius.\n\t\t * @param {Number} radiusBL Bottom left corner radius.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.rc = this.drawRoundRectComplex;\n\n\t\t/**\n\t\t * Shortcut to drawCircle.\n\t\t * @method dc\n\t\t * @param {Number} x x coordinate center point of circle.\n\t\t * @param {Number} y y coordinate center point of circle.\n\t\t * @param {Number} radius Radius of circle.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.dc = this.drawCircle;\n\n\t\t/**\n\t\t * Shortcut to drawEllipse.\n\t\t * @method de\n\t\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from center.\n\t\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t\t * which draws from the center.\n\t\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t\t * number.\n\t\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.de = this.drawEllipse;\n\n\t\t/**\n\t\t * Shortcut to drawPolyStar.\n\t\t * @method dp\n\t\t * @param {Number} x Position of the center of the shape.\n\t\t * @param {Number} y Position of the center of the shape.\n\t\t * @param {Number} radius The outer radius of the shape.\n\t\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t\t * directly to the right of the center.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.dp = this.drawPolyStar;\n\n\t\t/**\n\t\t * Shortcut to decodePath.\n\t\t * @method p\n\t\t * @param {String} str The path string to decode.\n\t\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t\t * @chainable\n\t\t * @protected\n\t\t */\n\t\tthis.p = this.decodePath;\n\n\t\tthis.clear();\n\t}\n\n// static public methods:\n\t/**\n\t * Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\t *\n\t *      createjs.Graphics.getRGB(50, 100, 150, 0.5);\n\t *      // Returns \"rgba(50,100,150,0.5)\"\n\t *\n\t * It also supports passing a single hex color value as the first param, and an optional alpha value as the second\n\t * param. For example,\n\t *\n\t *      createjs.Graphics.getRGB(0xFF00FF, 0.2);\n\t *      // Returns \"rgba(255,0,255,0.2)\"\n\t *\n\t * @method getRGB\n\t * @static\n\t * @param {Number} r The red component for the color, between 0 and 0xFF (255).\n\t * @param {Number} g The green component for the color, between 0 and 0xFF (255).\n\t * @param {Number} b The blue component for the color, between 0 and 0xFF (255).\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".\n\t */\n\tstatic getRGB (r, g, b, alpha) {\n\t\tif (r != null && b == null) {\n\t\t\talpha = g;\n\t\t\tb = r&0xFF;\n\t\t\tg = r>>8&0xFF;\n\t\t\tr = r>>16&0xFF;\n\t\t}\n\t\tif (alpha == null) {\n\t\t\treturn `rgb(${r},${g},${b})`;\n\t\t} else {\n\t\t\treturn `rgba(${r},${g},${b},${alpha})`;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\n\t * or if alpha is null then in the format \"hsl(360,100,100)\".\n\t *\n\t *      createjs.Graphics.getHSL(150, 100, 70);\n\t *      // Returns \"hsl(150,100,70)\"\n\t *\n\t * @method getHSL\n\t * @static\n\t * @param {Number} hue The hue component for the color, between 0 and 360.\n\t * @param {Number} saturation The saturation component for the color, between 0 and 100.\n\t * @param {Number} lightness The lightness component for the color, between 0 and 100.\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format\n\t * \"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".\n\t */\n\tstatic getHSL (hue, saturation, lightness, alpha) {\n\t\tif (alpha == null) {\n\t\t\treturn `hsl(${hue % 360},${saturation}%,${lightness}%)`;\n\t\t} else {\n\t\t\treturn `hsl(${hue % 360},${saturation}%,${lightness}%,${alpha})`;\n\t\t}\n\t}\n\n// accessor properties:\n\t/**\n\t * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\n\t * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n\t *\n\t * This property is mainly intended for introspection of the instructions (ex. for graphics export).\n\t * @property instructions\n\t * @type {Array}\n\t * @readonly\n\t */\n\tget instructions () {\n\t\tthis._updateInstructions();\n\t\treturn this._instructions;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true if this Graphics instance has no drawing commands.\n\t * @method isEmpty\n\t * @return {Boolean} Returns true if this Graphics instance has no drawing commands.\n\t */\n\tisEmpty () {\n\t\treturn !(this._instructions.length || this._activeInstructions.length);\n\t}\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.\n\t */\n\tdraw (ctx, data) {\n\t\tthis._updateInstructions();\n\t\tlet instr = this._instructions;\n\t\tconst l = instr.length;\n\t\tfor (let i = this._storeIndex; i < l; i++) {\n\t\t\tinstr[i].exec(ctx, data);\n\t\t}\n\t}\n\n\t/**\n\t * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\n\t * stroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method drawAsPath\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t */\n\tdrawAsPath (ctx) {\n\t\tthis._updateInstructions();\n\t\tlet instr, instrs = this._instructions;\n\t\tconst l = instrs.length;\n\t\tfor (let i = this._storeIndex; i < l; i++) {\n\t\t\t// the first command is always a beginPath command.\n\t\t\tif ((instr = instrs[i]).path !== false) { instr.exec(ctx); }\n\t\t}\n\t}\n\n\n// public methods that map directly to context 2D calls:\n\t/**\n\t * Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.\n\t * @method moveTo\n\t * @param {Number} x The x coordinate the drawing point should move to.\n\t * @param {Number} y The y coordinate the drawing point should move to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t * @chainable\n\t */\n\tmoveTo (x, y) {\n\t\treturn this.append(new MoveTo(x,y), true);\n\t}\n\n\t/**\n\t * Draws a line from the current drawing point to the specified position, which become the new current drawing\n\t * point. Note that you *must* call {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} before the first `lineTo()`.\n\t * A tiny API method \"lt\" also exists.\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\n\t * whatwg spec</a>.\n\t * @method lineTo\n\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tlineTo (x, y) {\n\t\treturn this.append(new LineTo(x,y));\n\t}\n\n\t/**\n\t * Draws an arc with the specified control points and radius.  For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\n\t * whatwg spec</a>. A tiny API method \"at\" also exists.\n\t * @method arcTo\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tarcTo (x1, y1, x2, y2, radius) {\n\t\treturn this.append(new ArcTo(x1, y1, x2, y2, radius));\n\t}\n\n\t/**\n\t * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\n\t * example, to draw a full circle with a radius of 20 centered at (100, 100):\n\t *\n\t *      arc(100, 100, 20, 0, Math.PI*2);\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\n\t * A tiny API method \"a\" also exists.\n\t * @method arc\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle Measured in radians.\n\t * @param {Number} endAngle Measured in radians.\n\t * @param {Boolean} anticlockwise\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tarc (x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\treturn this.append(new Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n\t}\n\n\t/**\n\t * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n\t * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n\t * whatwg spec</a>. A tiny API method \"qt\" also exists.\n\t * @method quadraticCurveTo\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tquadraticCurveTo (cpx, cpy, x, y) {\n\t\treturn this.append(new QuadraticCurveTo(cpx, cpy, x, y));\n\t}\n\n\t/**\n\t * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\n\t * cp2y). For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\n\t * whatwg spec</a>. A tiny API method \"bt\" also exists.\n\t * @method bezierCurveTo\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbezierCurveTo (cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\treturn this.append(new BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n\t}\n\n\t/**\n\t * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\n\t * whatwg spec</a>. A tiny API method \"r\" also exists.\n\t * @method rect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\trect (x, y, w, h) {\n\t\treturn this.append(new Rect(x, y, w, h));\n\t}\n\n\t/**\n\t * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n\t * since the fill or stroke was last set. A tiny API method \"cp\" also exists.\n\t * @method closePath\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tclosePath () {\n\t\treturn this._activeInstructions.length ? this.append(new ClosePath()) : this;\n\t}\n\n\n// public methods that roughly map to Adobe Flash/Animate graphics APIs:\n\t/**\n\t * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\n\t * to be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.\n\t * @method clear\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tclear () {\n\t\tthis._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n\t\tthis._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n\t\tthis._dirty = this._strokeIgnoreScale = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.\n\t * @method beginFill\n\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no fill.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginFill (color) {\n\t\treturn this._setFill(color ? new Fill(color) : null);\n\t}\n\n\t/**\n\t * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"lf\" also exists.\n\t * @method beginLinearGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t * drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t * the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginLinearGradientFill (colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setFill(new Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t}\n\n\t/**\n\t * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\t *\n\t *      myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\t *\n\t * A tiny API method \"rf\" also exists.\n\t * @method beginRadialGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginRadialGradientFill (colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setFill(new Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t}\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\n\t * exists.\n\t * @method beginBitmapFill\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t * will be applied relative to the parent transform.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginBitmapFill (image, repetition, matrix) {\n\t\treturn this._setFill(new Fill(null, matrix).bitmap(image, repetition));\n\t}\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\n\t * A tiny API method \"ef\" also exists.\n\t * @method endFill\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tendFill () {\n\t\treturn this.beginFill();\n\t}\n\n\t/**\n\t * Sets the stroke style. Like all drawing methods, this can be chained, so you can define\n\t * the stroke style and color in a single line of code like so:\n\t *\n\t * \tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\t *\n\t * A tiny API method \"ss\" also exists.\n\t * @method setStrokeStyle\n\t * @param {Number} thickness The width of the stroke.\n\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t * the tiny API.\n\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t * for use with the tiny API.\n\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t * controls at what point a mitered joint will be clipped.\n\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t * of active transformations.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tsetStrokeStyle (thickness, caps = 0, joints = 0, miterLimit = 10, ignoreScale = false) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeStyle = this.command = new StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);\n\n\t\t// ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:\n\t\tif (this._stroke) { this._stroke.ignoreScale = ignoreScale; }\n\t\tthis._strokeIgnoreScale = ignoreScale;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets or clears the stroke dash pattern.\n\t *\n\t * \tmyGraphics.setStrokeDash([20, 10], 0);\n\t *\n\t * A tiny API method `sd` also exists.\n\t * @method setStrokeDash\n\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t * Passing null or an empty array will clear the existing stroke dash.\n\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tsetStrokeDash (segments, offset = 0) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeDash = this.command = new StrokeDash(segments, offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.\n\t * @method beginStroke\n\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no stroke.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginStroke (color) {\n\t\treturn this._setStroke(color ? new Stroke(color) : null);\n\t}\n\n\t/**\n\t * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10).\n\t *          beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"ls\" also exists.\n\t * @method beginLinearGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginLinearGradientStroke (colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setStroke(new Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t}\n\n\t/**\n\t * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10)\n\t *          .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n\t *          .drawRect(50, 90, 150, 110);\n\t *\n\t * A tiny API method \"rs\" also exists.\n\t * @method beginRadialGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t * to 100%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginRadialGradientStroke (colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setStroke(new Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t}\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\n\t * strokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\n\t * also exists.\n\t * @method beginBitmapStroke\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tbeginBitmapStroke (image, repetition = \"repeat\") {\n\t\t// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.\n\t\treturn this._setStroke(new Stroke().bitmap(image, repetition));\n\t}\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\n\t * A tiny API method \"es\" also exists.\n\t * @method endStroke\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tendStroke () {\n\t\treturn this.beginStroke();\n\t}\n\n\t/**\n\t * Draws a rounded rectangle with all corners with the specified radius.\n\t * @method drawRoundRect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radius Corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdrawRoundRect (x, y, w, h, radius) {\n\t\treturn this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n\t}\n\n\t/**\n\t * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\n\t * method \"rc\" also exists.\n\t * @method drawRoundRectComplex\n\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t * @param {Number} w The width of the round rect.\n\t * @param {Number} h The height of the round rect.\n\t * @param {Number} radiusTL Top left corner radius.\n\t * @param {Number} radiusTR Top right corner radius.\n\t * @param {Number} radiusBR Bottom right corner radius.\n\t * @param {Number} radiusBL Bottom left corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdrawRoundRectComplex (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\treturn this.append(new RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n\t}\n\n\t/**\n\t * Draws a circle with the specified radius at (x, y).\n\t *\n\t *      var g = new createjs.Graphics();\n\t *\t    g.setStrokeStyle(1);\n\t *\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n\t *\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n\t *\t    g.drawCircle(0,0,3);\n\t *\n\t *\t    var s = new createjs.Shape(g);\n\t *\t\t  s.x = 100;\n\t *\t\t  s.y = 100;\n\t *\n\t *\t    stage.addChild(s);\n\t *\t    stage.update();\n\t *\n\t * A tiny API method \"dc\" also exists.\n\t * @method drawCircle\n\t * @param {Number} x x coordinate center point of circle.\n\t * @param {Number} y y coordinate center point of circle.\n\t * @param {Number} radius Radius of circle.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdrawCircle (x, y, radius) {\n\t\treturn this.append(new Circle(x, y, radius));\n\t}\n\n\t/**\n\t * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\n\t * except the width and height can be different. A tiny API method \"de\" also exists.\n\t * @method drawEllipse\n\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from center.\n\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from the center.\n\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t * number.\n\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdrawEllipse (x, y, w, h) {\n\t\treturn this.append(new Ellipse(x, y, w, h));\n\t}\n\n\t/**\n\t * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\n\t * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\n\t * radius of 50:\n\t *\n\t *      myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n\t *      // Note: -90 makes the first point vertical\n\t *\n\t * A tiny API method \"dp\" also exists.\n\t *\n\t * @method drawPolyStar\n\t * @param {Number} x Position of the center of the shape.\n\t * @param {Number} y Position of the center of the shape.\n\t * @param {Number} radius The outer radius of the shape.\n\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t * directly to the right of the center.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdrawPolyStar (x, y, radius, sides, pointSize, angle) {\n\t\treturn this.append(new PolyStar(x, y, radius, sides, pointSize, angle));\n\t}\n\n\t/**\n\t * Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\n\t * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n\t * {{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n\t *\n\t * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\n\t * built-in or custom graphics commands. For example:\n\t *\n\t * \t\t// attach data to our shape, so we can access it during the draw:\n\t * \t\tmyShape.color = \"red\";\n\t *\n\t * \t\t// append a Circle command object:\n\t * \t\tmyShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));\n\t *\n\t * \t\t// append a custom command object with an exec method that sets the fill style\n\t * \t\t// based on the shape's data, and then fills the circle.\n\t * \t\tmyShape.graphics.append({exec:function(ctx, shape) {\n\t * \t\t\tctx.fillStyle = shape.color;\n\t * \t\t\tctx.fill();\n\t * \t\t}});\n\t *\n\t * @method append\n\t * @param {Object} command A graphics command object exposing an \"exec\" method.\n\t * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tappend (command, clean) {\n\t\tthis._activeInstructions.push(command);\n\t\tthis.command = command;\n\t\tif (!clean) { this._dirty = true; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Decodes a compact encoded path string into a series of draw instructions.\n\t * This format is not intended to be human readable, and is meant for use by authoring tools.\n\t * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw\n\t * commands.\n\t *\n\t * Each command is comprised of a single \"header\" character followed by a variable number of alternating x and y\n\t * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\n\t * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\n\t * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\n\t * latter. Bits 5 and 6 are currently unused.\n\t *\n\t * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\n\t * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n\t * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\n\t * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\n\t * case of move operations which are absolute, this value is a delta from the previous x or y position (as\n\t * appropriate).\n\t *\n\t * For example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n\t * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\n\t * parameter.\n\t * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\n\t * indicate 1500 tenths of a pixel.\n\t * <br />AA - 000000000000. Absolute y position of 0.\n\t * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n\t * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\n\t * provide an absolute position of +150.0px.\n\t * <br />AAA - 000000000000000000. A y delta value of 0.\n\t *\n\t * A tiny API method \"p\" also exists.\n\t * @method decodePath\n\t * @param {String} str The path string to decode.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tdecodePath (str) {\n\t\tlet instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n\t\tlet paramCount = [2, 2, 4, 6, 0];\n\t\tlet i = 0;\n\t\tconst l = str.length;\n\t\tlet params = [];\n\t\tlet x = 0, y = 0;\n\t\tlet base64 = Graphics.BASE_64;\n\n\t\twhile (i < l) {\n\t\t\tlet c = str.charAt(i);\n\t\t\tlet n = base64[c];\n\t\t\tlet fi = n>>3; // highest order bits 1-3 code for operation.\n\t\t\tlet f = instructions[fi];\n\t\t\t// check that we have a valid instruction & that the unused bits are empty:\n\t\t\tif (!f || (n&3)) { throw(`bad path data (@${i}):c`); }\n\t\t\tconst pl = paramCount[fi];\n\t\t\tif (!fi) { x=y=0; } // move operations reset the position.\n\t\t\tparams.length = 0;\n\t\t\ti++;\n\t\t\tlet charCount = (n>>2&1)+2;  // 4th header bit indicates number size for this operation.\n\t\t\tfor (let p = 0; p < pl; p++) {\n\t\t\t\tlet num = base64[str.charAt(i)];\n\t\t\t\tlet sign = (num>>5) ? -1 : 1;\n\t\t\t\tnum = ((num&31)<<6)|(base64[str.charAt(i+1)]);\n\t\t\t\tif (charCount === 3) { num = (num<<6)|(base64[str.charAt(i+2)]); }\n\t\t\t\tnum = sign*num/10;\n\t\t\t\tif (p%2) { x = (num += x); }\n\t\t\t\telse { y = (num += y); }\n\t\t\t\tparams[p] = num;\n\t\t\t\ti += charCount;\n\t\t\t}\n\t\t\tf.apply(this, params);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\n\t * the existing store. This also affects `drawAsPath()`.\n\t *\n\t * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\n\t * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\n\t * of the vector instructions for later use (ex. scaling, modifying, or exporting).\n\t *\n\t * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing\n\t * the fill or stroke.\n\t *\n\t * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\n\t * segments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\n\t * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVGraphics.\n\t *\n\t * \t// set up cache:\n\t * \tmyShape.cache(0,0,500,500,scale);\n\t *\n\t * \t// when the user drags, draw a new line:\n\t * \tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n\t * \t// then draw it into the existing cache:\n\t * \tmyShape.updateCache(\"source-over\");\n\t * \t// store the new line, so it isn't redrawn next time:\n\t * \tmyShape.store();\n\t *\n\t * \t// then, when the window resizes, we can re-render at a different scale:\n\t * \t// first, unstore all our lines:\n\t * \tmyShape.unstore();\n\t * \t// then cache using the new scale:\n\t * \tmyShape.cache(0,0,500,500,newScale);\n\t * \t// finally, store the existing commands again:\n\t * \tmyShape.store();\n\t *\n\t * @method store\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tstore () {\n\t\tthis._updateInstructions(true);\n\t\tthis._storeIndex = this._instructions.length;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\n\t * so that they will be executed in subsequent draw calls.\n\t *\n\t * @method unstore\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tunstore () {\n\t\tthis._storeIndex = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.\n\t * @method clone\n\t * @return {Graphics} A clone of the current Graphics instance.\n\t */\n\tclone () {\n\t\tlet o = new Graphics();\n\t\to.command = this.command;\n\t\to._stroke = this._stroke;\n\t\to._strokeStyle = this._strokeStyle;\n\t\to._strokeDash = this._strokeDash;\n\t\to._strokeIgnoreScale = this._strokeIgnoreScale;\n\t\to._fill = this._fill;\n\t\to._instructions = this._instructions.slice();\n\t\to._commitIndex = this._commitIndex;\n\t\to._activeInstructions = this._activeInstructions.slice();\n\t\to._dirty = this._dirty;\n\t\to._storeIndex = this._storeIndex;\n\t\treturn o;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n// private methods:\n\t/**\n\t * @method _updateInstructions\n\t * @param commit\n\t * @protected\n\t */\n\t_updateInstructions (commit) {\n\t\tlet instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;\n\n\t\tif (this._dirty && active.length) {\n\t\t\tinstr.length = commitIndex; // remove old, uncommitted commands\n\t\t\tinstr.push(Graphics.beginCmd);\n\n\t\t\tconst l = active.length, ll = instr.length;\n\t\t\tinstr.length = ll+l;\n\t\t\tfor (let i = 0; i < l; i++) { instr[i+ll] = active[i]; }\n\n\t\t\tif (this._fill) { instr.push(this._fill); }\n\t\t\tif (this._stroke) {\n\t\t\t\t// doesn't need to be re-applied if it hasn't changed.\n\t\t\t\tif (this._strokeDash !== this._oldStrokeDash) {\n\t\t\t\t\tinstr.push(this._strokeDash);\n\t\t\t\t}\n\t\t\t\tif (this._strokeStyle !== this._oldStrokeStyle) {\n\t\t\t\t\tinstr.push(this._strokeStyle);\n\t\t\t\t}\n\t\t\t\tif (commit) {\n\t\t\t\t\tthis._oldStrokeDash = this._strokeDash;\n\t\t\t\t\tthis._oldStrokeStyle = this._strokeStyle;\n\t\t\t\t}\n\t\t\t\tinstr.push(this._stroke);\n\t\t\t}\n\n\t\t\tthis._dirty = false;\n\t\t}\n\n\t\tif (commit) {\n\t\t\tactive.length = 0;\n\t\t\tthis._commitIndex = instr.length;\n\t\t}\n\t};\n\n\t/**\n\t * @method _setFill\n\t * @param fill\n\t * @protected\n\t */\n\t_setFill (fill) {\n\t\tthis._updateInstructions(true);\n\t\tthis.command = this._fill = fill;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @method _setStroke\n\t * @param stroke\n\t * @protected\n\t */\n\t_setStroke (stroke) {\n\t\tthis._updateInstructions(true);\n\t\tif (this.command = this._stroke = stroke) {\n\t\t\tstroke.ignoreScale = this._strokeIgnoreScale;\n\t\t}\n\t\treturn this;\n\t}\n\n}\n\n// Command Objects:\n\n/**\n * @namespace Graphics\n */\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class LineTo\n */\nexport class LineTo {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n\tconstructor (x, y) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t\tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\texec (ctx) {\n\t\tctx.lineTo(this.x, this.y);\n\t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class MoveTo\n */\nexport class MoveTo {\n\t/**\n\t * @constructor\n   * @param {Number} x\n   * @param {Number} y\n\t */\n \tconstructor (x, y) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n \t\tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n \t}\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n \texec (ctx) {\n \t\tctx.moveTo(this.x, this.y);\n \t}\n}\n\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class ArcTo\n */\nexport class ArcTo {\n\t/**\n\t * @constructor\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t */\n \tconstructor (x1, y1, x2, y2, radius) {\n\t\t/**\n\t\t * @property x1\n\t\t * @type Number\n\t\t */\n\t \tthis.x1 = x1;\n\t\t/**\n\t\t * @property y1\n\t\t * @type Number\n\t\t */\n\t\tthis.y1 = y1;\n\t\t/**\n\t\t * @property x2\n\t\t * @type Number\n\t\t */\n\t \tthis.x2 = x2;\n\t\t/**\n\t\t * @property y2\n\t\t * @type Number\n\t\t */\n\t\tthis.y2 = y2;\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t \tthis.radius = radius;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Arc\n */\nexport class Arc {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle\n\t * @param {Number} endAngle\n\t * @param {Number} anticlockwise\n\t */\n \tconstructor (x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t \tthis.radius = radius;\n\t\t/**\n\t\t * @property startAngle\n\t\t * @type Number\n\t\t */\n\t \tthis.startAngle = startAngle;\n\t\t/**\n\t\t * @property endAngle\n\t\t * @type Number\n\t\t */\n\t\tthis.endAngle = endAngle;\n\t\t/**\n\t\t * @property anticlockwise\n\t\t * @type Number\n\t\t */\n\t \tthis.anticlockwise = !!anticlockwise;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class QuadraticCurveTo\n */\nexport class QuadraticCurveTo {\n\t/**\n\t * @constructor\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n \tconstructor (cpx, cpy, x, y) {\n\t\t/**\n\t\t * @property cpx\n\t\t * @type Number\n\t\t */\n\t \tthis.cpx = cpx;\n\t\t/**\n\t\t * @property cpy\n\t\t * @type Number\n\t\t */\n\t\tthis.cpy = cpy;\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class BezierCurveTo\n */\nexport class BezierCurveTo {\n\t/**\n\t * @constructor\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t */\n \tconstructor (cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\t/**\n\t\t * @property cp1x\n\t\t * @type Number\n\t\t */\n\t \tthis.cp1x = cp1x;\n\t\t/**\n\t\t * @property cp1y\n\t\t * @type Number\n\t\t */\n\t\tthis.cp1y = cp1y;\n\t\t/**\n\t\t * @property cp2x\n\t\t * @type Number\n\t\t */\n\t \tthis.cp2x = cp2x;\n\t\t/**\n\t\t * @property cp2y\n\t\t * @type Number\n\t\t */\n\t\tthis.cp2y = cp2y;\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Rect\n */\nexport class Rect {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t */\n \tconstructor (x, y, w, h) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t \tthis.w = w;\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\tthis.h = h;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.rect(this.x, this.y, this.w, this.h);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class ClosePath\n */\nexport class ClosePath {\n\t/**\n\t * @constructor\n\t */\n \tconstructor () { }\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.closePath();\n \t}\n}\n\n/**\n * Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class BeginPath\n */\nexport class BeginPath {\n\t/**\n\t * @constructor\n\t */\n \tconstructor () { }\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.beginPath();\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Fill\n */\nexport class Fill {\n\t/**\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Matrix2D} matrix\n\t */\n\tconstructor (style, matrix) {\n\t\t/**\n\t\t * A valid Context2D fillStyle.\n\t\t * @property style\n\t\t * @type Object\n\t\t */\n\t\tthis.style = style;\n\t\t/**\n\t\t * @property matrix\n\t\t * @type Matrix2D\n\t\t */\n\t\tthis.matrix = matrix;\n\t\t/**\n\t\t * @property path\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.path = false;\n\t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\texec (ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.fillStyle = this.style;\n\t\tlet mtx = this.matrix;\n\t\tif (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }\n\t\tctx.fill();\n\t\tif (mtx) { ctx.restore(); }\n\t}\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t *\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tlinearGradient (colors, ratios, x0, y0, x1, y1) {\n\t\tlet o = this.style = Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n\t\tconst l = colors.length;\n\t\tfor (let i = 0; i < l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors, ratios, x0, y0, x1, y1, type:\"linear\"};\n\t\treturn this;\n\t}\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tradialGradient (colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\tlet o = this.style = Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\t\tconst l = colors.length;\n\t\tfor (let i = 0; i < l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors, ratios, x0, y0, r0, x1, y1, r1, type: \"radial\"};\n\t\treturn this;\n\t}\n\t/**\n\t * Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tbitmap (image, repetition = \"\") {\n\t\tif (image.naturalWidth || image.getContext || image.readyState >= 2) {\n\t\t\tlet o = this.style = Graphics._ctx.createPattern(image, repetition);\n\t\t\to.props = {image, repetition, type: \"bitmap\"};\n\t\t}\n\t\treturn this;\n\t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Stroke\n */\nexport class Stroke {\n\t/**\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Boolean} ignoreScale\n\t */\n\tconstructor (style, ignoreScale) {\n\t\t/**\n\t\t * A valid Context2D strokeStyle.\n\t\t * @property style\n\t\t * @type Object\n\t\t */\n\t\tthis.style = style;\n\t\t/**\n\t\t * @property ignoreScale\n\t\t * @type Boolean\n\t\t */\n\t\tthis.ignoreScale = ignoreScale;\n\t\t/**\n\t\t * @property path\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.path = false;\n\t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\texec (ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.strokeStyle = this.style;\n\t\tif (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }\n\t\tctx.stroke();\n\t\tif (this.ignoreScale) { ctx.restore(); }\n\t}\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tlinearGradient (...args) {\n\t\t// TODO-ES6: Anything but this...\n\t\tFill.prototype.linearGradient.apply(this, args);\n\t}\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tradialGradient (...args) {\n \t\tFill.prototype.radialGradient.apply(this, args);\n \t}\n\t/**\n\t * Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement} image\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tbitmap (...args) {\n \t\tFill.prototype.bitmap.apply(this, args);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class StrokeStyle\n */\nexport class StrokeStyle {\n\t/**\n\t * @constructor\n\t * @param {Number} [width=1]\n\t * @param {String} [caps=butt]\n\t * @param {String} [joints=miter]\n\t * @param {Number} [miterLimit=10]\n\t * @param {Boolean} [ignoreScale=false]\n\t * @type {String}\n\t */\n\tconstructor (width, caps = \"butt\", joints = \"miter\", miterLimit = 10, ignoreScale = false) {\n\t\t/**\n\t\t * @property width\n\t\t * @type Number\n\t\t */\n\t\tthis.width = width;\n\t\t/**\n\t\t * One of: butt, round, square\n\t\t * @property caps\n\t\t * @type String\n\t\t */\n\t\tthis.caps = caps;\n\t\t/**\n\t\t * One of: round, bevel, miter\n\t\t * @property joints\n\t\t * @type String\n\t\t */\n\t\tthis.joints = joints;\n\t\t/**\n\t\t * @property miterLimit\n\t\t * @type Number\n\t\t */\n\t\tthis.miterLimit = miterLimit;\n\t\t/**\n\t\t * @property ignoreScale\n\t\t * @type Boolean\n\t\t */\n\t\tthis.ignoreScale = ignoreScale;\n\t\t/**\n\t\t * @property path\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.path = false;\n\t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n\texec (ctx) {\n\t\tctx.lineWidth = this.width;\n\t\tctx.lineCap = (isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps]);\n\t\tctx.lineJoin = (isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints]);\n\t\tctx.miterLimit = this.miterLimit;\n\t\tctx.ignoreScale = this.ignoreScale;\n\t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class StrokeDash\n */\nexport class StrokeDash {\n\t/**\n\t * @constructor\n\t * @param {Array} [segments=[]]\n\t * @param {Number} [offset=0]\n\t */\n \tconstructor (segments = StrokeDash.EMPTY_SEGMENTS, offset = 0) {\n\t\t/**\n\t\t * @property segments\n\t\t * @type Array\n\t\t */\n\t \tthis.segments = segments;\n\t\t/**\n\t\t * @property offset\n\t\t * @type Number\n\t\t */\n\t \tthis.offset = offset;\n \t}\n\t/**\n\t * The default value for segments (ie. no dash).\n\t * Used instead of [] to reduce churn.\n\t * @property EMPTY_SEGMENTS\n\t * @static\n\t * @final\n\t * @readonly\n\t * @protected\n\t * @type {Array}\n\t */\n\tstatic get EMPTY_SEGMENTS () { return _EMPTY_SEGMENTS; }\n\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tif (ctx.setLineDash) { // feature detection.\n\t \t\tctx.setLineDash(this.segments);\n\t \t\tctx.lineDashOffset = this.offset;\n\t \t}\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class RoundRect\n */\nexport class RoundRect {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radiusTL\n\t * @param {Number} radiusTR\n\t * @param {Number} radiusBR\n\t * @param {Number} radiusBL\n\t */\n \tconstructor (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t \tthis.w = w;\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\tthis.h = h;\n\t\t/**\n\t\t * @property radiusTL\n\t\t * @type Number\n\t\t */\n\t \tthis.radiusTL = radiusTL;\n\t\t/**\n\t\t * @property radiusTR\n\t\t * @type Number\n\t\t */\n\t\tthis.radiusTR = radiusTR;\n\t\t/**\n\t\t * @property radiusBR\n\t\t * @type Number\n\t\t */\n\t \tthis.radiusBR = radiusBR;\n\t\t/**\n\t\t * @property radiusBL\n\t\t * @type Number\n\t\t */\n\t\tthis.radiusBL = radiusBL;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tlet max = (w<h?w:h)/2;\n\t \tlet mTL=0, mTR=0, mBR=0, mBL=0;\n\t \tlet x = this.x, y = this.y, w = this.w, h = this.h;\n\t \tlet rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;\n\n\t \tif (rTL < 0) { rTL *= (mTL=-1); }\n\t \tif (rTL > max) { rTL = max; }\n\t \tif (rTR < 0) { rTR *= (mTR=-1); }\n\t \tif (rTR > max) { rTR = max; }\n\t \tif (rBR < 0) { rBR *= (mBR=-1); }\n\t \tif (rBR > max) { rBR = max; }\n\t \tif (rBL < 0) { rBL *= (mBL=-1); }\n\t \tif (rBL > max) { rBL = max; }\n\n\t \tctx.moveTo(x+w-rTR, y);\n\t \tctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);\n\t \tctx.lineTo(x+w, y+h-rBR);\n\t \tctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);\n\t \tctx.lineTo(x+rBL, y+h);\n\t \tctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);\n\t \tctx.lineTo(x, y+rTL);\n\t \tctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);\n\t \tctx.closePath();\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Circle\n */\nexport class Circle {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t */\n \tconstructor (x, y, radius) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t \tthis.radius = radius;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class Ellipse\n */\nexport class Ellipse {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t */\n \tconstructor (x, y, w, h) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property w\n\t\t * @type Number\n\t\t */\n\t \tthis.w = w;\n\t\t/**\n\t\t * @property h\n\t\t * @type Number\n\t\t */\n\t\tthis.h = h;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tlet x = this.x, y = this.y;\n\t \tlet w = this.w, h = this.h;\n\n\t \tlet k = 0.5522848;\n\t \tlet ox = (w / 2) * k;\n\t \tlet oy = (h / 2) * k;\n\t \tlet xe = x + w;\n\t \tlet ye = y + h;\n\t \tlet xm = x + w / 2;\n\t \tlet ym = y + h / 2;\n\n\t \tctx.moveTo(x, ym);\n\t \tctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);\n\t \tctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);\n\t \tctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);\n\t \tctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);\n \t}\n}\n\n/**\n * Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n * @class PolyStar\n */\nexport class PolyStar {\n\t/**\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} sides\n\t * @param {Number} [pointSize=0]\n\t * @param {Number} [angle=0]\n\t */\n \tconstructor (x, y, radius, sides, pointSize = 0, angle = 0) {\n\t\t/**\n\t\t * @property x\n\t\t * @type Number\n\t\t */\n\t \tthis.x = x;\n\t\t/**\n\t\t * @property y\n\t\t * @type Number\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * @property radius\n\t\t * @type Number\n\t\t */\n\t \tthis.radius = radius;\n\t\t/**\n\t\t * @property sides\n\t\t * @type Number\n\t\t */\n\t \tthis.sides = sides;\n\t\t/**\n\t\t * @property pointSize\n\t\t * @type Number\n\t\t */\n\t \tthis.pointSize = pointSize;\n\t\t/**\n\t\t * @property angle\n\t\t * @type Number\n\t\t */\n\t \tthis.angle = angle;\n \t}\n\t/**\n\t * Execute the Graphics command in the provided Canvas context.\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx The canvas rendering context\n\t */\n \texec (ctx) {\n \t\tlet x = this.x, y = this.y;\n\t \tlet radius = this.radius;\n\t \tlet angle = this.angle/180*Math.PI;\n\t \tlet sides = this.sides;\n\t \tlet ps = 1-this.pointSize;\n\t \tlet a = Math.PI/sides;\n\n\t \tctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t \tfor (let i = 0; i < sides; i++) {\n\t \t\tangle += a;\n\t \t\tif (ps != 1) {\n\t \t\t\tctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);\n\t \t\t}\n\t \t\tangle += a;\n\t \t\tctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t \t}\n\t \tctx.closePath();\n \t}\n}\n\n// static properties:\n/**\n * A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\n * unnecessary instantiation.\n * @property beginCmd\n * @type {Graphics.BeginPath}\n * @static\n * @readonly\n */\n/**\n * Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.\n * @property BASE_64\n * @static\n * @final\n * @readonly\n * @type {Object}\n */\n/**\n * Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n * \"butt\", 1 to \"round\", and 2 to \"square\".\n * For example, to set the line caps to \"square\":\n *\n *      myGraphics.ss(16, 2);\n *\n * @property STROKE_CAPS_MAP\n * @static\n * @final\n * @readonly\n * @type {Array}\n */\n/**\n * Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n * \"miter\", 1 to \"round\", and 2 to \"bevel\".\n * For example, to set the line joints to \"bevel\":\n *\n *      myGraphics.ss(16, 0, 2);\n *\n * @property STROKE_JOINTS_MAP\n * @static\n * @final\n * @readonly\n * @type {Array}\n */\n/**\n * @property _ctx\n * @static\n * @protected\n * @type {CanvasRenderingContext2D}\n */\n{\n\tlet canvas = (createjs && createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) {\n\t\tGraphics._ctx = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\tGraphics.beginCmd = new BeginPath();\n\tGraphics.BASE_64 = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8,\"J\":9,\"K\":10,\"L\":11,\"M\":12,\"N\":13,\"O\":14,\"P\":15,\"Q\":16,\"R\":17,\"S\":18,\"T\":19,\"U\":20,\"V\":21,\"W\":22,\"X\":23,\"Y\":24,\"Z\":25,\"a\":26,\"b\":27,\"c\":28,\"d\":29,\"e\":30,\"f\":31,\"g\":32,\"h\":33,\"i\":34,\"j\":35,\"k\":36,\"l\":37,\"m\":38,\"n\":39,\"o\":40,\"p\":41,\"q\":42,\"r\":43,\"s\":44,\"t\":45,\"u\":46,\"v\":47,\"w\":48,\"x\":49,\"y\":50,\"z\":51,\"0\":52,\"1\":53,\"2\":54,\"3\":55,\"4\":56,\"5\":57,\"6\":58,\"7\":59,\"8\":60,\"9\":61,\"+\":62,\"/\":63};\n\tGraphics.STROKE_CAPS_MAP = [\"butt\", \"round\", \"square\"];\n\tGraphics.STROKE_JOINTS_MAP = [\"miter\", \"round\", \"bevel\"];\n\tGraphics.EMPTY_SEGMENTS = [];\n}\n","/*\n* @license Shadow\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\n * via its <code>shadow</code> property.\n *\n * <h4>Example</h4>\n *\n *      myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);\n *\n * @class Shadow\n * @module EaselJS\n */\nexport default class Shadow {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {String} color The color of the shadow. This can be any valid CSS color value.\n\t * @param {Number} offsetX The x offset of the shadow in pixels.\n\t * @param {Number} offsetY The y offset of the shadow in pixels.\n\t * @param {Number} blur The size of the blurring effect.\n\t */\n\tconstructor (color = \"black\", offsetX = 0, offsetY = 0, blur = 0) {\n// public properties:\n\t\t/**\n\t\t * The color of the shadow. This can be any valid CSS color value.\n\t\t * @property color\n\t\t * @type String\n\t\t * @default black\n\t\t */\n\t\tthis.color = color;\n\n\t\t/**\n\t\t * The x offset of the shadow.\n\t\t * @property offsetX\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetX = offsetX;\n\n\t\t/**\n\t\t * The y offset of the shadow.\n\t\t * @property offsetY\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetY = offsetY;\n\n\t\t/**\n\t\t * The blur of the shadow.\n\t\t * @property blur\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.blur = blur;\n\t}\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\t/**\n\t * Returns a clone of this Shadow instance.\n\t * @method clone\n\t * @return {Shadow} A clone of the current Shadow instance.\n\t */\n\tclone () {\n\t\treturn new Shadow(this.color, this.offsetX, this.offsetY, this.blur);\n\t}\n\n}\n\n// static public properties:\n/**\n * An identity shadow object (all properties are set to 0).\n * @property identity\n * @type Shadow\n * @static\n * @final\n * @readonly\n */\n{\n\tShadow.identity = new Shadow(\"transparent\");\n}\n","/*\n* @license Shape\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport DisplayObject from \"./DisplayObject\";\nimport Graphics from \"./Graphics\";\n\n/**\n * A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\n * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\n * instances to display the same vector graphics with different positions or transforms.\n *\n * If the vector art will not\n * change between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\n * rendering cost.\n *\n * <h4>Example</h4>\n *\n *      var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n *      var shape = new createjs.Shape(graphics);\n *\n *      //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n *      var shape = new createjs.Shape();\n *      shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n *\n * @class Shape\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class Shape extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Graphics} [graphics=Graphics] Optional. The graphics instance to display. If null, a new Graphics instance will be created.\n\t */\n\tconstructor (graphics = new Graphics()) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The graphics instance to display.\n\t\t * @property graphics\n\t\t * @type Graphics\n\t\t */\n\t\tthis.graphics = graphics;\n\t}\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas\n\t */\n\tisVisible () {\n\t\tlet hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t}\n\n\t/**\n\t * Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\n\t * the draw was handled (useful for overriding functionality).\n\t *\n\t * <i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t */\n\tdraw (ctx, ignoreCache = false) {\n\t\tif (super.draw(ctx, ignoreCache)) { return true; }\n\t\tthis.graphics.draw(ctx, this);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\n\t * their defaults (for example .parent).\n\t * @method clone\n\t * @param {Boolean} recursive If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\n\t * cloned. If false, the Graphics instance will be shared with the new Shape.\n\t */\n\tclone (recursive = false) {\n\t\tlet g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;\n\t\treturn  this._cloneProps(new Shape(g));\n\t}\n\n}\n","/*\n * @license SpriteSheet\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPliED, INCLUDING BUT NOT liMITED TO THE WARRANTIES\n * OF MERCHANTABIliTY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HolDERS BE liABLE FOR ANY CLAIM, DAMAGES OR OTHER liABIliTY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEAliNGS IN THE SOFTWARE.\n */\n\nimport EventDispatcher from \"createjs/src/events/EventDispatcher\";\nimport Event from \"createjs/src/events/Event\";\nimport Rectangle from \"../geom/Rectangle\";\n\n/**\n * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\n * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\n * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n *\n * The data passed to the SpriteSheet constructor defines:\n * <ol>\n * \t<li> The source image or images to use.</li>\n * \t<li> The positions of individual image frames.</li>\n * \t<li> Sequences of frames that form named animations. Optional.</li>\n * \t<li> The target playback framerate. Optional.</li>\n * </ol>\n * <h3>SpriteSheet Format</h3>\n * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n *\n * <h4>images</h4>\n * An array of source images. Images can be either an HTMlimage\n * instance, or a uri to an image. The former is recommended to control preloading.\n *\n * \timages: [image1, \"path/to/image2.png\"],\n *\n * <h4>frames</h4>\n * Defines the individual frames. There are two supported formats for frame data:\n * When all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,\n * and `count` properties.\n *\n * <ul>\n *  <li>`width` & `height` are required and specify the dimensions of the frames</li>\n *  <li>`regX` & `regY` indicate the registration point or \"origin\" of the frames</li>\n *  <li>`spacing` indicate the spacing between frames</li>\n *  <li>`margin` specify the margin around the image(s)</li>\n *  <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will\n *  be calculated based on the dimensions of the source images and the frames. Frames will be assigned\n *  indexes based on their position in the source images (left to right, top to bottom).</li>\n * </ul>\n *\n *  \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n *\n * If the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\n * with 4 required and 3 optional entries, in the order:\n *\n * <ul>\n *  <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>\n *  <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>\n *  <li>The last two, `regX` and `regY` specify the registration point of the frame</li>\n * </ul>\n *\n * \tframes: [\n * \t\t// x, y, width, height, imageIndex*, regX*, regY*\n * \t\t[64, 0, 96, 64],\n * \t\t[0, 0, 64, 64, 1, 32, 32]\n * \t\t// etc.\n * \t]\n *\n * <h4>animations</h4>\n * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an\n * animation of the same name. Each animation must specify the frames to play, and may\n * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\n * the name of the `next` animation to sequence to after it completes.\n *\n * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:\n * <ol>\n * \t<li>for a single frame animation, you can simply specify the frame index\n *\n * \t\tanimations: {\n * \t\t\tsit: 7\n * \t\t}\n *\n * </li>\n * <li>\n *      for an animation of consecutive frames, you can use an array with two required, and two optional entries\n * \t\tin the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n *\n * \t\tanimations: {\n * \t\t\t// start, end, next*, speed*\n * \t\t\trun: [0, 8],\n * \t\t\tjump: [9, 12, \"run\", 2]\n * \t\t}\n *\n *  </li>\n *  <li>\n *     for non-consecutive frames, you can use an object with a `frames` property defining an array of frame\n *     indexes to play in order. The object can also specify `next` and `speed` properties.\n *\n * \t\tanimations: {\n * \t\t\twalk: {\n * \t\t\t\tframes: [1,2,3,3,2,1]\n * \t\t\t},\n * \t\t\tshoot: {\n * \t\t\t\tframes: [1,4,5,6],\n * \t\t\t\tnext: \"walk\",\n * \t\t\t\tspeed: 0.5\n * \t\t\t}\n * \t\t}\n *\n *  </li>\n * </ol>\n * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\n * property instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in\n * earlier versions, but is 4x normal speed in EaselJS 0.7.0+.\n *\n * <h4>framerate</h4>\n * Optional. Indicates the default framerate to play this spritesheet at in frames per second. See\n * {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n *\n * \t\tframerate: 20\n *\n * Note that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n * event generated by the {{#crossLink \"Ticker\"}}{{/crossLink}}.\n *\n * \t\tcreatejs.Ticker.on(\"tick\", handleTick);\n * \t\tfunction handleTick(event) {\n *\t\t\tstage.update(event);\n *\t\t}\n *\n * <h3>Example</h3>\n * To define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\n * animations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing frame 6-8 and\n * sequencing back to run.\n *\n * \t\tvar data = {\n * \t\t\timages: [\"sprites.jpg\"],\n * \t\t\tframes: {width:50, height:50},\n * \t\t\tanimations: {\n * \t\t\t\tstand:0,\n * \t\t\t\trun:[1,5],\n * \t\t\t\tjump:[6,8,\"run\"]\n * \t\t\t}\n * \t\t};\n * \t\tvar spriteSheet = new createjs.SpriteSheet(data);\n * \t\tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n *\n * <h3>Generating SpriteSheet Images</h3>\n * Spritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or\n * coordinates manually, however there are a number of tools that facilitate this.\n * <ul>\n *     <li>Exporting SpriteSheets or HTML5 content from Adobe Flash/Animate supports the EaselJS SpriteSheet format.</li>\n *     <li>The popular <a href=\"https://www.codeandweb.com/texturepacker/easeljs\" target=\"_blank\">Texture Packer</a> has\n *     EaselJS support.\n *     <li>SWF animations in Adobe Flash/Animate can be exported to SpriteSheets using <a href=\"http://createjs.com/zoe\" target=\"_blank\"></a></li>\n * </ul>\n *\n * <h3>Cross Origin Issues</h3>\n * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\n * using:\n * <ul>\n *     <li>a mouse</li>\n *     <li>methods such as {{#crossLink \"Container/getObjectUnderPoint\"}}{{/crossLink}}</li>\n *     <li>Filters (see {{#crossLink \"Filter\"}}{{/crossLink}})</li>\n *     <li>caching (see {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}})</li>\n * </ul>\n * You can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or\n * setting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.\n *\n * \t\tvar image = new Image();\n * \t\timg.crossOrigin=\"Anonymous\";\n * \t\timg.src = \"http://server-with-CORS-support.com/path/to/image.jpg\";\n *\n * If you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must\n * support cross-origin requests, or this will not work. For more information, check out\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">CORS overview on MDN</a>.\n *\n * @class SpriteSheet\n * @extends EventDispatcher\n * @module EaselJS\n */\nexport default class SpriteSheet extends EventDispatcher {\n\n// constructor:\n\t/**\n\t * @constructor\n   * @param {Object} data An object describing the SpriteSheet data.\n\t */\n\tconstructor (data) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * Indicates whether all images are finished loading.\n\t\t * @property complete\n\t\t * @type Boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.complete = true;\n\n\t\t/**\n\t\t * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class\n\t\t * {{#crossLink \"Sprite/framerate:property\"}}{{/crossLink}} for more information.\n\t\t * @property framerate\n\t\t * @type Number\n\t\t */\n\t\tthis.framerate = 0;\n\n\n\t\t// private properties:\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._animations = null;\n\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._frames = null;\n\n\t\t/**\n\t\t * @property _images\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._images = null;\n\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Object\n\t\t */\n\t\tthis._data = null;\n\n\t\t/**\n\t\t * @property _loadCount\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._loadCount = 0;\n\n\t\t// only used for simple frame defs:\n\t\t/**\n\t\t * @property _frameHeight\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._frameHeight = 0;\n\n\t\t/**\n\t\t * @property _frameWidth\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._frameWidth = 0;\n\n\t\t/**\n\t\t * @property _numFrames\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._numFrames = 0;\n\n\t\t/**\n\t\t * @property _regX\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._regX = 0;\n\n\t\t/**\n\t\t * @property _regY\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._regY = 0;\n\n\t\t/**\n\t\t * @property _spacing\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._spacing = 0;\n\n\t\t/**\n\t\t * @property _margin\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._margin = 0;\n\n\t\tthis._parseData(data);\n\t}\n\n// accessor properties:\n\t/**\n\t * Returns an array of all available animation names available on this sprite sheet as strings.\n\t * @property animations\n\t * @type {Array}\n\t * @readonly\n\t */\n\tget animations () {\n\t\treturn this._animations.slice();\n\t}\n\n// public methods:\n\t/**\n\t * Returns the total number of frames in the specified animation, or in the whole sprite\n\t * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\n\t * the images have not been fully loaded.\n\t * @method getNumFrames\n\t * @param {String} animation The name of the animation to get a frame count for.\n\t * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.\n\t */\n\tgetNumFrames (animation) {\n\t\tif (animation == null) {\n\t\t\treturn this._frames ? this._frames.length : this._numFrames || 0;\n\t\t} else {\n\t\t\tlet data = this._data[animation];\n\t\t\tif (data == null) { return 0; }\n\t\t\telse { return data.frames.length; }\n\t\t}\n\t}\n\n\t/**\n\t * Returns an object defining the specified animation. The returned object contains:<UL>\n\t * \t<li>frames: an array of the frame ids in the animation</li>\n\t * \t<li>speed: the playback speed for this animation</li>\n\t * \t<li>name: the name of the animation</li>\n\t * \t<li>next: the default animation to play next. If the animation loops, the name and next property will be the\n\t * \tsame.</li>\n\t * </UL>\n\t * @method getAnimation\n\t * @param {String} name The name of the animation to get.\n\t * @return {Object} a generic object with frames, speed, name, and next properties.\n\t */\n\tgetAnimation (name) {\n\t\treturn this._data[name];\n\t}\n\n\t/**\n\t * Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n\t * \t<li>an image property holding a reference to the image object in which the frame is found</li>\n\t * \t<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n\t * \timage.</li>\n\t * \t<li> A regX and regY property corresponding to the regX/Y values for the frame.\n\t * </UL>\n\t * @method getFrame\n\t * @param {Number} frameIndex The index of the frame.\n\t * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.\n\t */\n\tgetFrame (frameIndex) {\n\t\tlet frame;\n\t\tif (this._frames && (frame = this._frames[frameIndex])) { return frame; }\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\n\t * to the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n\t *\n\t * \t[x=-50, y=-40, width=90, height=70]\n\t *\n\t * @method getFrameBounds\n\t * @param {Number} frameIndex The index of the frame.\n\t * @param {Rectangle} [rectangle=Rectangle] A Rectangle instance to copy the values into. By default a new instance is created.\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.\n\t */\n\tgetFrameBounds (frameIndex, rectangle = new Rectangle()) {\n\t\tlet frame = this.getFrame(frameIndex);\n\t\treturn frame ? rectangle.setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\t/**\n\t * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.\n\t * @method clone\n\t */\n\tclone () {\n\t\t// TODO-ES6: Add throw docs\n\t\tthrow(\"SpriteSheet cannot be cloned.\")\n\t}\n\n// private methods:\n\t/**\n\t * @method _parseData\n\t * @param {Object} data An object describing the SpriteSheet data.\n\t * @protected\n\t */\n\t_parseData (data) {\n\t\tif (data == null) { return; }\n\t\tthis.framerate = data.framerate||0;\n\n\t\t// parse images:\n\t\tif (data.images) {\n\t\t\tfor (let img of data.images) {\n\t\t\t\tlet a = this._images = [];\n\t\t\t\tlet src;\n\t\t\t\tif (typeof img === \"string\") {\n\t\t\t\t\tsrc = img;\n\t\t\t\t\timg = document.createElement(\"img\");\n\t\t\t\t\timg.src = src;\n\t\t\t\t}\n\t\t\t\ta.push(img);\n\t\t\t\tif (!img.getContext && !img.naturalWidth) {\n\t\t\t\t\tthis._loadCount++;\n\t\t\t\t\tthis.complete = false;\n\t\t\t\t\timg.onload = () => this._handleImageLoad(src);\n\t\t\t\t\timg.onerror = () => this._handleImageError(src);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// parse frames:\n\t\tif (data.frames != null) {\n\t\t\tif (Array.isArray(data.frames)) {\n\t\t\t\tthis._frames = [];\n\t\t\t\tfor (let arr of data.frames) {\n\t\t\t\t\tthis._frames.push({image:this._images[arr[4]?arr[4]:0], rect:new Rectangle(arr[0],arr[1],arr[2],arr[3]), regX:arr[5]||0, regY:arr[6]||0 });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet o = data.frames;\n\t\t\t\tthis._frameWidth = o.width;\n\t\t\t\tthis._frameHeight = o.height;\n\t\t\t\tthis._regX = o.regX||0;\n\t\t\t\tthis._regY = o.regY||0;\n\t\t\t\tthis._spacing = o.spacing||0;\n\t\t\t\tthis._margin = o.margin||0;\n\t\t\t\tthis._numFrames = o.count;\n\t\t\t\tif (this._loadCount === 0) { this._calculateFrames(); }\n\t\t\t}\n\t\t}\n\n\t\t// parse animations:\n\t\tthis._animations = [];\n\t\tif (data.animations != null) {\n\t\t\tthis._data = {};\n\t\t\tlet o = data.animations;\n\t\t\tfor (let name in o) {\n\t\t\t\tlet anim = { name };\n\t\t\t\tlet obj = o[name];\n\t\t\t\tlet a;\n\t\t\t\tif (typeof obj === \"number\") { // single frame\n\t\t\t\t\ta = anim.frames = [obj];\n\t\t\t\t} else if (Array.isArray(obj)) { // simple\n\t\t\t\t\tif (obj.length === 1) { anim.frames = [obj[0]]; }\n\t\t\t\t\telse {\n\t\t\t\t\t\tanim.speed = obj[3];\n\t\t\t\t\t\tanim.next = obj[2];\n\t\t\t\t\t\ta = anim.frames = [];\n\t\t\t\t\t\tfor (let i=obj[0];i<=obj[1];i++) {\n\t\t\t\t\t\t\ta.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { // complex\n\t\t\t\t\tanim.speed = obj.speed;\n\t\t\t\t\tanim.next = obj.next;\n\t\t\t\t\tlet frames = obj.frames;\n\t\t\t\t\ta = anim.frames = (typeof frames === \"number\") ? [frames] : frames.slice(0);\n\t\t\t\t}\n\t\t\t\tif (anim.next === true || anim.next === undefined) { anim.next = name; } // loop\n\t\t\t\tif (anim.next === false || (a.length < 2 && anim.next === name)) { anim.next = null; } // stop\n\t\t\t\tif (!anim.speed) { anim.speed = 1; }\n\t\t\t\tthis._animations.push(name);\n\t\t\t\tthis._data[name] = anim;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @method _handleImageLoad\n\t * @protected\n\t */\n\t _handleImageLoad (src) {\n\t\tif (--this._loadCount === 0) {\n\t\t\tthis._calculateFrames();\n\t\t\tthis.complete = true;\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t}\n\t}\n\n\t/**\n\t * @method _handleImageError\n\t * @protected\n\t */\n\t_handleImageError (src) {\n\t\tlet errorEvent = new Event(\"error\");\n\t\terrorEvent.src = src;\n\t\tthis.dispatchEvent(errorEvent);\n\n\t\t// Complete is still dispatched.\n\t\tif (--this._loadCount === 0) {\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t}\n\t}\n\n\t/**\n\t * @method _calculateFrames\n\t * @protected\n\t */\n\t_calculateFrames () {\n\t\tif (this._frames || this._frameWidth === 0) { return; }\n\n\t\tthis._frames = [];\n\n\t\tlet maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.\n\t\tlet frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;\n\t\tlet spacing = this._spacing, margin = this._margin;\n\n\t\timgLoop:\n\t\tfor (let i=0, imgs=this._images, l=imgs.length; i<l; i++) {\n\t\t\tlet img = imgs[i],\n\t\t\t\timgW = (img.width||img.naturalWidth),\n\t\t\t\timgH = (img.height||img.naturalHeight);\n\n\t\t\tlet y = margin;\n\t\t\twhile (y <= imgH-margin-frameHeight) {\n\t\t\t\tlet x = margin;\n\t\t\t\twhile (x <= imgW-margin-frameWidth) {\n\t\t\t\t\tif (frameCount >= maxFrames) { break imgLoop; }\n\t\t\t\t\tframeCount++;\n\t\t\t\t\tthis._frames.push({\n\t\t\t\t\t\timage: img,\n\t\t\t\t\t\trect: new Rectangle(x, y, frameWidth, frameHeight),\n\t\t\t\t\t\tregX: this._regX,\n\t\t\t\t\t\tregY: this._regY\n\t\t\t\t\t});\n\t\t\t\t\tx += frameWidth+spacing;\n\t\t\t\t}\n\t\t\t\ty += frameHeight+spacing;\n\t\t\t}\n\t\t}\n\t\tthis._numFrames = frameCount;\n\t}\n\n}\n\n// events:\n/**\n * Dispatched when all images are loaded.  Note that this only fires if the images\n * were not fully loaded when the sprite sheet was initialized. You should check the complete property\n * to prior to adding a listener. Ex.\n *\n * \tvar sheet = new createjs.SpriteSheet(data);\n * \tif (!sheet.complete) {\n * \t\t// not preloaded, listen for the complete event:\n * \t\tsheet.addEventListener(\"complete\", handler);\n * \t}\n *\n * @event complete\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n * @since 0.6.0\n */\n\n/**\n * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\n * when doing on-demand rendering.\n * @event getframe\n * @param {Number} index The frame index.\n * @param {Object} frame The frame object that getFrame will return.\n */\n\n/**\n * Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that\n * encounters an error, and will still dispatch a {{#crossLink \"SpriteSheet/complete:event\"}}{{/crossLink}}\n * event once all images are finished processing, even if an error is encountered.\n * @event error\n * @param {String} src The source of the image that failed to load.\n * @since 0.8.2\n */\n","/*\n* @license Text\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst _H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};\nconst _V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};\n\nimport DisplayObject from \"./DisplayObject\";\n\n/**\n * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\n * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\n * text above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n * method, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n *\n * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\n * multiple font styles, you will need to create multiple text instances, and position them manually.\n *\n * <h4>Example</h4>\n *\n *      var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n *      text.x = 100;\n *      text.textBaseline = \"alphabetic\";\n *\n * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\n * before it can be displayed.\n *\n * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\n * browsers will render Text exactly the same.\n * @class Text\n * @extends DisplayObject\n * @module EaselJS\n */\nexport default class Text extends DisplayObject {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {String} [text] The text to display.\n\t * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n\t * 36px Arial\").\n\t * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\t * \"#F00\", \"red\", or \"#FF0000\").\n\t */\n\tconstructor (text, font, color) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t */\n\t\tthis.text = text;\n\n\t\t/**\n\t\t * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").\n\t\t * @property font\n\t\t * @type String\n\t\t */\n\t\tthis.font = font;\n\n\t\t/**\n\t\t * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\n\t\t * It will also accept valid canvas fillStyle values.\n\t\t * @property color\n\t\t * @type String\n\t\t */\n\t\tthis.color = color;\n\n\t\t/**\n\t\t * The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\n\t\t * information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"left\".\n\t\t * @property textAlign\n\t\t * @type String\n\t\t */\n\t\tthis.textAlign = \"left\";\n\n\t\t/**\n\t\t * The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n\t\t * \"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"top\".\n\t\t * @property textBaseline\n\t\t * @type String\n\t\t*/\n\t\tthis.textBaseline = \"top\";\n\n\t\t/**\n\t\t * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\n\t\t * shrunk to make it fit in this width. For detailed information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t*/\n\t\tthis.maxWidth = null;\n\n\t\t/**\n\t\t * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.\n\t\t * @property outline\n\t\t * @type Number\n\t\t */\n\t\tthis.outline = 0;\n\n\t\t/**\n\t\t * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\n\t\t * the value of getMeasuredLineHeight is used.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t */\n\t\tthis.lineHeight = 0;\n\n\t\t/**\n\t\t * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\n\t\t * the text will not be wrapped.\n\t\t * @property lineWidth\n\t\t * @type Number\n\t\t */\n\t\tthis.lineWidth = null;\n\t}\n\n// static constants:\n\t/**\n\t * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t */\n\t static get H_OFFSETS () { return _H_OFFSETS; }\n\n\t/**\n\t * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t */\n\t static get V_OFFSETS () { return _V_OFFSETS; }\n\n// public methods:\n \t/**\n \t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n \t * This does not account for whether it would be visible within the boundaries of the stage.\n \t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n \t * @method isVisible\n \t * @return {Boolean} Whether the display object would be visible if drawn to a canvas\n \t */\n \tisVisible () {\n \t\tlet hasContent = this.cacheCanvas || (this.text != null && this.text !== \"\");\n \t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n \t}\n\n \t/**\n \t * Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\n \t * Returns true if the draw was handled (useful for overriding functionality).\n \t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n \t * @method draw\n \t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n \t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n \t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n \t * into itself).\n \t */\n \tdraw (ctx, ignoreCache) {\n \t\tif (super.draw(ctx, ignoreCache)) { return true; }\n\n \t\tlet col = this.color || \"#000\";\n \t\tif (this.outline) { ctx.strokeStyle = col; ctx.lineWidth = this.outline*1; }\n \t\telse { ctx.fillStyle = col; }\n\n \t\tthis._drawText(this._prepContext(ctx));\n \t\treturn true;\n \t}\n\n \t/**\n \t * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.\n \t * @method getMeasuredWidth\n \t * @return {Number} The measured, untransformed width of the text.\n \t */\n \tgetMeasuredWidth () {\n \t\treturn this._getMeasuredWidth(this.text);\n \t}\n\n \t/**\n \t * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\n \t * width of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.\n \t * @method getMeasuredLineHeight\n \t * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is\n \t * based on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.\n \t */\n \tgetMeasuredLineHeight () {\n \t\treturn this._getMeasuredWidth(\"M\")*1.2;\n \t}\n\n \t/**\n \t * Returns the approximate height of multi-line text by multiplying the number of lines against either the\n \t * <code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\n \t * this operation requires the text flowing logic to run, which has an associated CPU cost.\n \t * @method getMeasuredHeight\n \t * @return {Number} The approximate height of the untransformed multi-line text.\n \t */\n \tgetMeasuredHeight () {\n \t\treturn this._drawText(null, {}).height;\n \t}\n\n \t/**\n \t * Docced in superclass.\n \t */\n \tgetBounds () {\n \t\tlet rect = super.getBounds();\n \t\tif (rect) { return rect; }\n \t\tif (this.text == null || this.text === \"\") { return null; }\n \t\tlet o = this._drawText(null, {});\n \t\tlet w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;\n \t\tlet x = w * Text.H_OFFSETS[this.textAlign||\"left\"];\n \t\tlet lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n \t\tlet y = lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n \t\treturn this._rectangle.setValues(x, y, w, o.height);\n \t}\n\n \t/**\n \t * Returns an object with width, height, and lines properties. The width and height are the visual width and height\n \t * of the drawn text. The lines property contains an array of strings, one for\n \t * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\n \t * whitespace removed.\n \t * @method getMetrics\n \t * @return {Object} An object with width, height, and lines properties.\n \t */\n \tgetMetrics () {\n \t\tlet o = {lines:[]};\n \t\to.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n \t\to.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n \t\treturn this._drawText(null, o, o.lines);\n \t}\n\n \t/**\n \t * Returns a clone of the Text instance.\n \t * @method clone\n \t * @return {Text} a clone of the Text instance.\n \t */\n \tclone () {\n \t\treturn this._cloneProps(new Text(this.text, this.font, this.color));\n \t}\n\n \t/**\n \t * Returns a string representation of this object.\n \t * @method toString\n \t * @return {String} a string representation of the instance.\n \t */\n \ttoString () {\n \t\treturn `[${this.constructor.name} (text=${this.text.length > 20 ? `${this.text.substr(0, 17)}...` : this.text})]`;\n \t}\n\n// private methods:\n \t/**\n \t * @method _cloneProps\n \t * @param {Text} o\n \t * @protected\n \t * @return {Text} o\n \t */\n \t_cloneProps (o) {\n \t\tsuper._cloneProps(o);\n \t\to.textAlign = this.textAlign;\n \t\to.textBaseline = this.textBaseline;\n \t\to.maxWidth = this.maxWidth;\n \t\to.outline = this.outline;\n \t\to.lineHeight = this.lineHeight;\n \t\to.lineWidth = this.lineWidth;\n \t\treturn o;\n \t}\n\n \t/**\n \t * @method _getWorkingContext\n \t * @param {CanvasRenderingContext2D} ctx\n \t * @return {CanvasRenderingContext2D}\n \t * @protected\n \t */\n \t_prepContext (ctx) {\n \t\tctx.font = this.font||\"10px sans-serif\";\n \t\tctx.textAlign = this.textAlign||\"left\";\n \t\tctx.textBaseline = this.textBaseline||\"top\";\n\t\tctx.lineJoin = \"miter\";\n\t\tctx.miterLimit = 2.5;\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Draws multiline text.\n\t * @method _drawText\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {Object} o\n\t * @param {Array} lines\n\t * @return {Object}\n\t * @protected\n\t */\n \t_drawText (ctx, o, lines) {\n \t\tconst paint = !!ctx;\n \t\tif (!paint) {\n \t\t\tctx = Text._workingContext;\n \t\t\tctx.save();\n \t\t\tthis._prepContext(ctx);\n \t\t}\n \t\tlet lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\n \t\tlet maxW = 0, count = 0;\n \t\tlet hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n \t\tfor (let str of hardLines) {\n \t\t\tlet w = null;\n\n \t\t\tif (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n \t\t\t\t// text wrapping:\n \t\t\t\tlet words = str.split(/(\\s)/);\n \t\t\t\tstr = words[0];\n \t\t\t\tw = ctx.measureText(str).width;\n\n\t\t\t\tconst l = words.length;\n \t\t\t\tfor (let i=1; i<l; i+=2) {\n \t\t\t\t\t// Line needs to wrap:\n \t\t\t\t\tlet wordW = ctx.measureText(words[i] + words[i+1]).width;\n \t\t\t\t\tif (w + wordW > this.lineWidth) {\n \t\t\t\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n \t\t\t\t\t\tif (lines) { lines.push(str); }\n \t\t\t\t\t\tif (w > maxW) { maxW = w; }\n \t\t\t\t\t\tstr = words[i+1];\n \t\t\t\t\t\tw = ctx.measureText(str).width;\n \t\t\t\t\t\tcount++;\n \t\t\t\t\t} else {\n \t\t\t\t\t\tstr += words[i] + words[i+1];\n \t\t\t\t\t\tw += wordW;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n\n \t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n \t\t\tif (lines) { lines.push(str); }\n \t\t\tif (o && w == null) { w = ctx.measureText(str).width; }\n \t\t\tif (w > maxW) { maxW = w; }\n \t\t\tcount++;\n \t\t}\n\n \t\tif (o) {\n \t\t\to.width = maxW;\n \t\t\to.height = count*lineHeight;\n \t\t}\n \t\tif (!paint) { ctx.restore(); }\n \t\treturn o;\n \t}\n\n \t/**\n \t * @method _drawTextLine\n \t * @param {CanvasRenderingContext2D} ctx\n \t * @param {String} text\n \t * @param {Number} y\n \t * @protected\n \t */\n \t_drawTextLine (ctx, text, y) {\n \t\t// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:\n \t\tif (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }\n \t\telse { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }\n \t}\n\n \t/**\n \t * @method _getMeasuredWidth\n \t * @param {String} text\n \t * @protected\n \t */\n \t_getMeasuredWidth (text) {\n \t\tlet ctx = Text._workingContext;\n \t\tctx.save();\n \t\tlet w = this._prepContext(ctx).measureText(text).width;\n \t\tctx.restore();\n \t\treturn w;\n \t}\n\n}\n\n{\n\t/**\n\t * @property _workingContext\n\t * @type CanvasRenderingContext2D\n\t * @private\n\t * @static\n\t */\n\tlet canvas = createjs && createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\tif (canvas.getContext) {\n\t\tText._workingContext = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n}\n","/*\n * @license AlphaMapFilter\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Filter from \"./Filter\";\n\n/**\n * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\n * be copied from the red channel of the map, and the RGB channels will be copied from the target.\n *\n * Generally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\n * better performance.\n *\n * <h4>Example</h4>\n * This example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n *\n *       var box = new createjs.Shape();\n *       box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n *       box.graphics.drawRect(0, 0, 100, 100);\n *       box.cache(0, 0, 100, 100);\n *\n *       var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n *       bmp.filters = [\n *           new createjs.AlphaMapFilter(box.cacheCanvas)\n *       ];\n *       bmp.cache(0, 0, 100, 100);\n *       stage.addChild(bmp);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n * @class AlphaMapFilter\n * @extends Filter\n * @module EaselJS\n */\nexport default class AlphaMapFilter extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the\n\t * result. This should be exactly the same dimensions as the target.\n\t */\n\tconstructor (alphaMap) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\n\t\t * dimensions as the target.\n\t\t * @property alphaMap\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t */\n\t\tthis.alphaMap = alphaMap;\n\n// private properties:\n\t\t/**\n\t\t * @property _alphaMap\n\t\t * @protected\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t */\n\t\tthis._alphaMap = null;\n\n\t\t/**\n\t\t * @property _mapData\n\t\t * @protected\n\t\t * @type Uint8ClampedArray\n\t\t */\n\t\tthis._mapData = null;\n\t\tthis._mapTexture = null;\n\n\t\tthis.FRAG_SHADER_BODY = `\n\t\t\tuniform sampler2D uAlphaSampler;\n\n\t\t\tvoid main (void) {\n\t\t\t\tvec4 color = texture2D(uSampler, vRenderCoord);\n\t\t\t\tvec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);\n\n\t\t\t\t// some image formats can have transparent white rgba(1,1,1, 0) when put on the GPU, this means we need a slight tweak\n\t\t\t\t// using ceil ensure that the colour will be used so long as it exists but pure transparency will be treated black\n\t\t\t\tgl_FragColor = vec4(color.rgb, color.a * (alphaMap.r * ceil(alphaMap.a)));\n\t\t\t}\n\t\t`;\n\t}\n\n\t/**\n\t * TODO: Docs\n\t */\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\t\tif (!this._mapTexture) { this._mapTexture = gl.createTexture(); }\n\n\t\tgl.activeTexture(gl.TEXTURE1);\n\t\tgl.bindTexture(gl.TEXTURE_2D, this._mapTexture);\n\t\tstage.setTextureParams(gl);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.alphaMap);\n\n\t\tgl.uniform1i(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uAlphaSampler\"),\n\t\t\t1\n\t\t);\n\t}\n\n// public methods:\n\t/**\n\t * Docced in superclass.\n\t */\n\tclone () {\n\t\tlet o = new AlphaMapFilter(this.alphaMap);\n\t\to._alphaMap = this._alphaMap;\n\t\to._mapData = this._mapData;\n\t\treturn o;\n\t}\n\n\n// private methods:\n\t/**\n\t * Docced in superclass.\n\t */\n\t_applyFilter (imageData) {\n\t\tif (!this.alphaMap) { return true; }\n\t\tif (!this._prepAlphaMap()) { return false; }\n\n\t\t// TODO: update to support scenarios where the target has different dimensions.\n\t\tlet data = imageData.data;\n\t\tlet map = this._mapData;\n\t\tconst l = data.length;\n\t\tfor (let i=0; i<l; i += 4) { data[i + 3] = map[i] || 0; }\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @method _prepAlphaMap\n\t * @protected\n\t */\n\t_prepAlphaMap () {\n\t\tif (!this.alphaMap) { return false; }\n\t\tif (this.alphaMap === this._alphaMap && this._mapData) { return true; }\n\t\tthis._mapData = null;\n\n\t\tlet map = this._alphaMap = this.alphaMap;\n\t\tlet canvas = map;\n\t\tlet ctx;\n\t\tif (map instanceof HTMLCanvasElement) {\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t} else {\n\t\t\tcanvas = createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\t\t\tcanvas.width = map.width;\n\t\t\tcanvas.height = map.height;\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t\tctx.drawImage(map, 0, 0);\n\t\t}\n\n\t\ttry {\n\t\t\tthis._mapData = ctx.getImageData(0, 0, map.width, map.height).data\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\t//if (!this.suppressCrossDomainErrors) throw new Error(\"unable to access local image data: \" + e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n","/*\n * @license AlphaMaskFilter\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Filter from \"./Filter\";\n\n/**\n * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\n * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\n * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\n * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n *\n * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n *\n * <h4>Example</h4>\n * This example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n *\n *      var box = new createjs.Shape();\n *      box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n *      box.graphics.drawRect(0, 0, 100, 100);\n *      box.cache(0, 0, 100, 100);\n *\n *      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n *      bmp.filters = [\n *          new createjs.AlphaMaskFilter(box.cacheCanvas)\n *      ];\n *      bmp.cache(0, 0, 100, 100);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n * @class AlphaMaskFilter\n * @extends Filter\n * @module EaselJS\n */\nexport default class AlphaMaskFilter extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} mask\n\t */\n\tconstructor (mask) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The image (or canvas) to use as the mask.\n\t\t * @property mask\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t */\n\t\tthis.mask = mask;\n\n\t\t/** docced in super class **/\n\t\tthis.usesContext = true;\n\n\t\tthis.FRAG_SHADER_BODY = `\n\t\t\tuniform sampler2D uAlphaSampler;\n\n\t\t\tvoid main (void) {\n\t\t\t\tvec4 color = texture2D(uSampler, vRenderCoord);\n\t\t\t\tvec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);\n\n\t\t\t\tgl_FragColor = vec4(color.rgb, color.a * alphaMap.a);\n\t\t\t}\n\t\t`;\n\t}\n\n// public methods:\n\t/**\n\t * Applies the filter to the specified context.\n\t *\n\t * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\n\t * correctly.</strong>\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t */\n\tapplyFilter (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\tif (!this.mask) { return true; }\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\n\t\ttargetCtx.save();\n\t\tif (ctx != targetCtx) {\n\t\t\t// TODO: support targetCtx and targetX/Y\n\t\t\t// clearRect, then draw the ctx in?\n\t\t\treturn false;\n\t\t}\n\n\t\ttargetCtx.globalCompositeOperation = \"destination-in\";\n\t\ttargetCtx.drawImage(this.mask, targetX, targetY);\n\t\ttargetCtx.restore();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Docced in superclass\n\t */\n\tclone () {\n\t\treturn new AlphaMaskFilter(this.mask);\n\t}\n\n\t/**\n\t * TODO: Doc\n\t */\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\t\tif(!this._mapTexture) { this._mapTexture = gl.createTexture(); }\n\n\t\tgl.activeTexture(gl.TEXTURE1);\n\t\tgl.bindTexture(gl.TEXTURE_2D, this._mapTexture);\n\t\tstage.setTextureParams(gl);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.mask);\n\n\t\tgl.uniform1i(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uAlphaSampler\"),\n\t\t\t1\n\t\t);\n\t}\n\n}\n","/*\n * @license BlurFilter\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * BoxBlur Algorithm by Mario Klingemann, quasimondo.com\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @module EaselJS\n */\n\nconst _MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];\nconst _SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];\n\nimport Filter from \"./Filter\";\nimport Rectangle from \"../geom/Rectangle\";\n\n/**\n * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\n * set higher than 1.\n *\n * <h4>Example</h4>\n * This example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\n * method to account for the spread that the blur causes.\n *\n *      let shape = new createjs.Shape().set({x:100,y:100});\n *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n *\n *      let blurFilter = new createjs.BlurFilter(5, 5, 1);\n *      shape.filters = [blurFilter];\n *      let bounds = blurFilter.getBounds();\n *\n *      shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n * @class BlurFilter\n * @extends Filter\n */\nexport default class BlurFilter extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [blurX=0] The horizontal blur radius in pixels.\n\t * @param {Number} [blurY=0] The vertical blur radius in pixels.\n\t * @param {Number} [quality=1] The number of blur iterations.\n\t */\n\tconstructor (blurX = 0, blurY = 0, quality = 1) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * Horizontal blur radius in pixels\n\t\t * @property blurX\n\t\t * @default 0\n\t\t * @type Number\n\t\t */\n\t\tthis._blurX = blurX;\n\t\tthis._blurXTable = [];\n\t\tthis._lastBlurX = null;\n\n\t\t/**\n\t\t * Vertical blur radius in pixels\n\t\t * @property blurY\n\t\t * @default 0\n\t\t * @type Number\n\t\t */\n\t\tthis._blurY = blurY;\n\t\tthis._blurYTable = [];\n\t\tthis._lastBlurY = null;\n\n\t\t/**\n\t\t * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\n\t\t * smoother blur, but take twice as long to run.\n\t\t * @property quality\n\t\t * @default 1\n\t\t * @type Number\n\t\t */\n\t\tthis._quality = isNaN(quality) || quality < 1 ? 1 : quality;\n\t\tthis._lastQuality = null;\n\t\tthis.quality = this._quality | 0;\n\n\t\t/**\n\t\t * This is a template to generate the shader for {{#crossLink FRAG_SHADER_BODY}}{{/crossLink}}\n\t\t */\n\t\tthis.FRAG_SHADER_TEMPLATE = `\n\t\t\tuniform float xWeight[{{blurX}}];\n\t\t\tuniform float yWeight[{{blurY}}];\n\t\t\tuniform vec2 textureOffset;\n\t\t\tvoid main (void) {\n\t\t\t\tvec4 color = vec4(0.0);\n\n\t\t\t\tfloat xAdj = ({{blurX}}.0-1.0)/2.0;\n\t\t\t\tfloat yAdj = ({{blurY}}.0-1.0)/2.0;\n\t\t\t\tvec2 sampleOffset;\n\n\t\t\t\tfor(int i=0; i<{{blurX}}; i++) {\n\t\t\t\t\tfor(int j=0; j<{{blurY}}; j++) {\n\t\t\t\t\t\tsampleOffset = vRenderCoord + (textureOffset * vec2(float(i)-xAdj, float(j)-yAdj));\n\t\t\t\t\t\tcolor += texture2D(uSampler, sampleOffset) * (xWeight[i] * yWeight[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = color.rgba;\n\t\t\t}\n\t\t`;\n\t}\n\n// constants:\n\t/**\n\t * Array of multiply values for blur calculations.\n\t * @property MUL_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t */\n\tstatic get MUL_TABLE () { return _MUL_TABLE; }\n\n\t/**\n\t * Array of shift values for blur calculations.\n\t * @property SHG_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t */\n\tstatic get SHG_TABLE () { return _SHG_TABLE; }\n\n// accessor properties:\n// TODO: Docs for these.\n\tget blurX () {\n\t\treturn this._blurX;\n\t}\n\n\tset blurX (blurX) {\n\t\tif (isNaN(blurX) || blurX < 0) { blurX = 0; }\n\t\tthis._blurX = blurX;\n\t}\n\n\tget blurY () {\n\t\treturn this._blurY;\n\t}\n\n\tset blurY (blurY) {\n\t\tif (isNaN(blurY) || blurY < 0){ blurY = 0; }\n\t\tthis._blurY = blurY;\n\t}\n\n\tget quality () {\n\t\treturn this._quality;\n\t}\n\n\tset quality (quality) {\n\t\tif (isNaN(value) || value < 0) { value = 0; }\n\t\tthis._quality = value | 0;\n\t}\n\n\tget _buildShader () {\n\t\tconst xChange = this._lastBlurX !== this._blurX;\n\t\tconst yChange = this._lastBlurY !== this._blurY;\n\t\tconst qChange = this._lastQuality !== this._quality;\n\t\tif (xChange || yChange || qChange) {\n\t\t\t\tif (xChange || qChange) { this._blurXTable = this._getTable(this._blurX * this._quality); }\n\t\t\t\tif (yChange || qChange) { this._blurYTable = this._getTable(this._blurY * this._quality); }\n\t\t\t\tthis._updateShader();\n\t\t\t\tthis._lastBlurX = this._blurX;\n\t\t\t\tthis._lastBlurY = this._blurY;\n\t\t\t\tthis._lastQuality = this._quality;\n\t\t\t\treturn undefined; // force a rebuild\n\t\t}\n\t\treturn this._compiledShader;\n\t}\n\n\tset _builtShader (value) {\n\t\tthis._compiledShader;\n\t}\n\n// public methods:\n\t/**\n\t * Docced in superclass\n\t */\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\t\t// load the normalized gaussian weight tables\n\t\tgl.uniform1fv(\n\t\t\tgl.getUniformLocation(shaderProgram, \"xWeight\"),\n\t\t\tthis._blurXTable\n\t\t);\n\t\tgl.uniform1fv(\n\t\t\tgl.getUniformLocation(shaderProgram, \"yWeight\"),\n\t\t\tthis._blurYTable\n\t\t);\n\n\t\t// what is the size of a single pixel in -1, 1 (webGL) space\n\t\tgl.uniform2f(\n\t\t\tgl.getUniformLocation(shaderProgram, \"textureOffset\"),\n\t\t\t2/(stage._viewportWidth*this._quality), 2/(stage._viewportHeight*this._quality)\n\t\t);\n\t}\n\n\t/**\n\t * Docced in super class\n\t */\n\tgetBounds (rect) {\n\t\tlet x = this.blurX|0, y = this.blurY| 0;\n\t\tif (x <= 0 && y <= 0) { return rect; }\n\t\tlet q = Math.pow(this.quality, 0.2);\n\t\treturn (rect || new Rectangle()).pad(y*q+1,x*q+1,y*q+1,x*q+1);\n\t}\n\n\t/**\n\t * Docced in super class\n\t */\n\tclone () {\n\t\treturn new BlurFilter(this.blurX, this.blurY, this.quality);\n\t}\n\n\n// private methods:\n\t/**\n\t * Docced in superclass\n\t */\n\t_updateShader () {\n\t\tlet result = this.FRAG_SHADER_TEMPLATE;\n\t\tresult = result.replace(/{{blurX}}/g, this._blurXTable.length.toFixed(0));\n\t\tresult = result.replace(/{{blurY}}/g, this._blurYTable.length.toFixed(0));\n\t\tthis.FRAG_SHADER_BODY = result;\n\t}\n\t/**\n\t * Docced in superclass\n\t */\n\t_getTable (spread) {\n\t\tconst EDGE = 4.2;\n\t\tif (spread <= 1) { return [1]; }\n\n\t\tlet result = [];\n\t\tlet count = Math.ceil(spread*2);\n\t\tcount += (count%2)?0:1;\n\t\tlet adjust = (count/2)|0;\n\t\tfor (let i = -adjust; i<=adjust; i++) {\n\t\t\tlet x = (i/adjust)*EDGE;\n\t\t\tresult.push(1/Math.sqrt(2*Math.PI) * Math.pow(Math.E, -(Math.pow(x,2)/4)));\n\t\t}\n\t\tlet factor = result.reduce((a, b) => a + b, 0);\n\t\treturn result.map(currentValue => currentValue / factor);\n\t}\n\n\t/**\n\t * Docced in super class\n\t */\n\t_applyFilter (imageData) {\n\t\tlet radiusX = this._blurX >> 1;\n\t\tif (isNaN(radiusX) || radiusX < 0) return false;\n\t\tlet radiusY = this._blurY >> 1;\n\t\tif (isNaN(radiusY) || radiusY < 0) return false;\n\t\tif (radiusX === 0 && radiusY === 0) return false;\n\n\t\tlet iterations = this.quality;\n\t\tif (isNaN(iterations) || iterations < 1) iterations = 1;\n\t\titerations |= 0;\n\t\tif (iterations > 3) iterations = 3;\n\t\tif (iterations < 1) iterations = 1;\n\n\t\tlet px = imageData.data;\n\t\tlet x=0, y=0, i=0, p=0, yp=0, yi=0, yw=0, r=0, g=0, b=0, a=0, pr=0, pg=0, pb=0, pa=0;\n\n\t\tlet divx = (radiusX + radiusX + 1) | 0;\n\t\tlet divy = (radiusY + radiusY + 1) | 0;\n\t\tlet w = imageData.width | 0;\n\t\tlet h = imageData.height | 0;\n\n\t\tlet w1 = (w - 1) | 0;\n\t\tlet h1 = (h - 1) | 0;\n\t\tlet rxp1 = (radiusX + 1) | 0;\n\t\tlet ryp1 = (radiusY + 1) | 0;\n\n\t\tlet ssx = {r:0,b:0,g:0,a:0};\n\t\tlet sx = ssx;\n\t\tfor ( i = 1; i < divx; i++ )\n\t\t{\n\t\t\tsx = sx.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsx.n = ssx;\n\n\t\tlet ssy = {r:0,b:0,g:0,a:0};\n\t\tlet sy = ssy;\n\t\tfor ( i = 1; i < divy; i++ )\n\t\t{\n\t\t\tsy = sy.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsy.n = ssy;\n\n\t\tlet si = null;\n\n\n\t\tlet mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n\t\tlet stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n\t\tlet mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n\t\tlet sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n\n\t\twhile (iterations-- > 0) {\n\n\t\t\tyw = yi = 0;\n\t\t\tlet ms = mtx;\n\t\t\tlet ss = stx;\n\t\t\tfor (y = h; --y > -1;) {\n\t\t\t\tr = rxp1 * (pr = px[(yi) | 0]);\n\t\t\t\tg = rxp1 * (pg = px[(yi + 1) | 0]);\n\t\t\t\tb = rxp1 * (pb = px[(yi + 2) | 0]);\n\t\t\t\ta = rxp1 * (pa = px[(yi + 3) | 0]);\n\n\t\t\t\tsx = ssx;\n\n\t\t\t\tfor( i = rxp1; --i > -1; )\n\t\t\t\t{\n\t\t\t\t\tsx.r = pr;\n\t\t\t\t\tsx.g = pg;\n\t\t\t\t\tsx.b = pb;\n\t\t\t\t\tsx.a = pa;\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tfor( i = 1; i < rxp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tp = (yi + ((w1 < i ? w1 : i) << 2)) | 0;\n\t\t\t\t\tr += ( sx.r = px[p]);\n\t\t\t\t\tg += ( sx.g = px[p+1]);\n\t\t\t\t\tb += ( sx.b = px[p+2]);\n\t\t\t\t\ta += ( sx.a = px[p+3]);\n\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tsi = ssx;\n\t\t\t\tfor ( x = 0; x < w; x++ )\n\t\t\t\t{\n\t\t\t\t\tpx[yi++] = (r * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (g * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (b * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (a * ms) >>> ss;\n\n\t\t\t\t\tp = ((yw + ((p = x + radiusX + 1) < w1 ? p : w1)) << 2);\n\n\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\tsi = si.n;\n\n\t\t\t\t}\n\t\t\t\tyw += w;\n\t\t\t}\n\n\t\t\tms = mty;\n\t\t\tss = sty;\n\t\t\tfor (x = 0; x < w; x++) {\n\t\t\t\tyi = (x << 2) | 0;\n\n\t\t\t\tr = (ryp1 * (pr = px[yi])) | 0;\n\t\t\t\tg = (ryp1 * (pg = px[(yi + 1) | 0])) | 0;\n\t\t\t\tb = (ryp1 * (pb = px[(yi + 2) | 0])) | 0;\n\t\t\t\ta = (ryp1 * (pa = px[(yi + 3) | 0])) | 0;\n\n\t\t\t\tsy = ssy;\n\t\t\t\tfor( i = 0; i < ryp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tsy.r = pr;\n\t\t\t\t\tsy.g = pg;\n\t\t\t\t\tsy.b = pb;\n\t\t\t\t\tsy.a = pa;\n\t\t\t\t\tsy = sy.n;\n\t\t\t\t}\n\n\t\t\t\typ = w;\n\n\t\t\t\tfor( i = 1; i <= radiusY; i++ )\n\t\t\t\t{\n\t\t\t\t\tyi = ( yp + x ) << 2;\n\n\t\t\t\t\tr += ( sy.r = px[yi]);\n\t\t\t\t\tg += ( sy.g = px[yi+1]);\n\t\t\t\t\tb += ( sy.b = px[yi+2]);\n\t\t\t\t\ta += ( sy.a = px[yi+3]);\n\n\t\t\t\t\tsy = sy.n;\n\n\t\t\t\t\tif( i < h1 )\n\t\t\t\t\t{\n\t\t\t\t\t\typ += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tyi = x;\n\t\t\t\tsi = ssy;\n\t\t\t\tif ( iterations > 0 )\n\t\t\t\t{\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpa = 255 / pa;\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss ) * pa;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","/*\n* @license ColorFilter\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\nimport Filter from \"./Filter\";\n\n/**\n * Applies a color transform to DisplayObjects.\n *\n * <h4>Example</h4>\n * This example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\n * to 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n *\n *      var shape = new createjs.Shape().set({x:100,y:100});\n *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n *\n *      shape.filters = [\n *          new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n *      ];\n *      shape.cache(-50, -50, 100, 100);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n * @class ColorFilter\n * @extends Filter\n */\nexport default class ColorFilter extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.\n\t * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.\n\t * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.\n\t * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.\n\t * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range\n\t * between -255 and 255.\n\t * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t */\n\tconstructor (redMultiplier = 1, greenMultiplier = 1, blueMultiplier = 1, alphaMultiplier = 1, redOffset = 0, greenOffset = 0, blueOffset = 0, alphaOffset = 0) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * Red channel multiplier.\n\t\t * @property redMultiplier\n\t\t * @type Number\n\t\t */\n\t\tthis.redMultiplier = redMultiplier;\n\n\t\t/**\n\t\t * Green channel multiplier.\n\t\t * @property greenMultiplier\n\t\t * @type Number\n\t\t */\n\t\tthis.greenMultiplier = greenMultiplier;\n\n\t\t/**\n\t\t * Blue channel multiplier.\n\t\t * @property blueMultiplier\n\t\t * @type Number\n\t\t */\n\t\tthis.blueMultiplier = blueMultiplier;\n\n\t\t/**\n\t\t * Alpha channel multiplier.\n\t\t * @property alphaMultiplier\n\t\t * @type Number\n\t\t */\n\t\tthis.alphaMultiplier = alphaMultiplier;\n\n\t\t/**\n\t\t * Red channel offset (added to value).\n\t\t * @property redOffset\n\t\t * @type Number\n\t\t */\n\t\tthis.redOffset = redOffset;\n\n\t\t/**\n\t\t * Green channel offset (added to value).\n\t\t * @property greenOffset\n\t\t * @type Number\n\t\t */\n\t\tthis.greenOffset = greenOffset;\n\n\t\t/**\n\t\t * Blue channel offset (added to value).\n\t\t * @property blueOffset\n\t\t * @type Number\n\t\t */\n\t\tthis.blueOffset = blueOffset;\n\n\t\t/**\n\t\t * Alpha channel offset (added to value).\n\t\t * @property alphaOffset\n\t\t * @type Number\n\t\t */\n\t\tthis.alphaOffset = alphaOffset;\n\n\t\tthis.FRAG_SHADER_BODY = `\n\t\t\tuniform vec4 uColorMultiplier;\n\t\t\tuniform vec4 uColorOffset;\n\n\t\t\tvoid main (void) {\n\t\t\t\tvec4 color = texture2D(uSampler, vRenderCoord);\n\n\t\t\t\tgl_FragColor = (color * uColorMultiplier) + uColorOffset;\n\t\t\t}\n\t\t`;\n\n\t}\n\n// public methods:\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\t\tgl.uniform4f(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uColorMultiplier\"),\n\t\t\tthis.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier\n\t\t);\n\n\t\tgl.uniform4f(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uColorOffset\"),\n\t\t\tthis.redOffset/255, this.greenOffset/255, this.blueOffset/255, this.alphaOffset/255\n\t\t);\n\t}\n\n\t/**\n\t * Docced in super class\n\t */\n\tclone () {\n\t\treturn new ColorFilter(\n\t\t\tthis.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier,\n\t\t\tthis.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset\n\t\t);\n\t}\n\n// private methods:\n\t/**\n\t * Docced in super class\n\t */\n\t_applyFilter (imageData) {\n\t\tlet data = imageData.data;\n\t\tconst l = data.length;\n\t\tfor (let i=0; i<l; i+=4) {\n\t\t\tdata[i] = data[i]*this.redMultiplier+this.redOffset;\n\t\t\tdata[i+1] = data[i+1]*this.greenMultiplier+this.greenOffset;\n\t\t\tdata[i+2] = data[i+2]*this.blueMultiplier+this.blueOffset;\n\t\t\tdata[i+3] = data[i+3]*this.alphaMultiplier+this.alphaOffset;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","/*\n* @license ColorMatrix\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\nconst _DELTA_INDEX = [\n \t0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,\n \t0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,\n \t0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,\n \t0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,\n \t0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,\n \t1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,\n \t1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,\n \t2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,\n \t4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,\n \t7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,\n \t10.0\n];\nconst _IDENTITY_MATRIX = [\n \t1,0,0,0,0,\n \t0,1,0,0,0,\n \t0,0,1,0,0,\n \t0,0,0,1,0,\n \t0,0,0,0,1\n];\nconst _LENGTH = 25;\n\n/**\n * Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\n * Most methods return the instance to facilitate chained calls.\n *\n * <h4>Example</h4>\n *\n *      myColorMatrix.adjustHue(20).adjustBrightness(50);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\n * for an example of how to use ColorMatrix to change a DisplayObject's color.\n * @class ColorMatrix\n */\nexport default class ColorMatrix {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t */\n\tconstructor (brightness, contrast, saturation, hue) {\n\t\tthis.setColor(brightness, contrast, saturation, hue);\n\t}\n\n// constants:\n\t/**\n\t * Array of delta values for contrast calculations.\n\t * @property DELTA_INDEX\n\t * @type Array\n\t * @protected\n\t * @static\n\t */\n\tstatic get DELTA_INDEX () { return _DELTA_INDEX; }\n\n\t/**\n\t * Identity matrix values.\n\t * @property IDENTITY_MATRIX\n\t * @type Array\n\t * @protected\n\t * @static\n\t */\n\tstatic get IDENTITY_MATRIX () { return _IDENTITY_MATRIX; }\n\n\t/**\n\t * The constant length of a color matrix.\n\t * @property LENGTH\n\t * @type Number\n\t * @protected\n\t * @static\n\t */\n\tstatic get LENGTH () { return _LENGTH; }\n\n// public methods:\n\t/**\n\t * Resets the instance with the specified values.\n\t * @method setColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tsetColor (brightness, contrast, saturation, hue) {\n\t\treturn this.reset().adjustColor(brightness, contrast, saturation, hue);\n\t}\n\n\t/**\n\t * Resets the matrix to identity values.\n\t * @method reset\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\treset () {\n\t\treturn this.copy(ColorMatrix.IDENTITY_MATRIX);\n\t}\n\n\t/**\n\t * Shortcut method to adjust brightness, contrast, saturation and hue.\n\t * Equivalent to calling adjustHue(hue), adjustContrast(contrast),\n\t * adjustBrightness(brightness), adjustSaturation(saturation), in that order.\n\t * @method adjustColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tadjustColor (brightness, contrast, saturation, hue) {\n\t\tthis.adjustHue(hue);\n\t\tthis.adjustContrast(contrast);\n\t\tthis.adjustBrightness(brightness);\n\t\treturn this.adjustSaturation(saturation);\n\t}\n\n\t/**\n\t * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\n\t * Positive values will make the image brighter, negative values will make it darker.\n\t * @method adjustBrightness\n\t * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tadjustBrightness (value) {\n\t\tif (value === 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value, 255);\n\t\tthis._multiplyMatrix([\n\t\t\t1,0,0,0,value,\n\t\t\t0,1,0,0,value,\n\t\t\t0,0,1,0,value,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adjusts the contrast of pixel color.\n\t * Positive values will increase contrast, negative values will decrease contrast.\n\t * @method adjustContrast\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tadjustContrast (value) {\n\t\tif (value === 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value, 100);\n\t\tlet x;\n\t\tif (value<0) {\n\t\t\tx = 127+value/100*127;\n\t\t} else {\n\t\t\tx = value%1;\n\t\t\tif (x === 0) {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[value];\n\t\t\t} else {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.\n\t\t\t}\n\t\t\tx = x*127+127;\n\t\t}\n\t\tthis._multiplyMatrix([\n\t\t\tx/127,0,0,0,0.5*(127-x),\n\t\t\t0,x/127,0,0,0.5*(127-x),\n\t\t\t0,0,x/127,0,0.5*(127-x),\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adjusts the color saturation of the pixel.\n\t * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).\n\t * @method adjustSaturation\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tadjustSaturation (value) {\n\t\tif (value === 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value, 100);\n\t\tlet x = 1+((value > 0) ? 3*value/100 : value/100);\n\t\tlet lumR = 0.3086;\n\t\tlet lumG = 0.6094;\n\t\tlet lumB = 0.0820;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR*(1-x)+x,lumG*(1-x),lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x)+x,lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x),lumB*(1-x)+x,0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Adjusts the hue of the pixel color.\n\t * @method adjustHue\n\t * @param {Number} value A value between -180 & 180.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tadjustHue (value) {\n\t\tif (value === 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value, 180)/180*Math.PI;\n\t\tlet cosVal = Math.cos(value);\n\t\tlet sinVal = Math.sin(value);\n\t\tlet lumR = 0.213;\n\t\tlet lumG = 0.715;\n\t\tlet lumB = 0.072;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR+cosVal*(1-lumR)+sinVal*(-lumR),lumG+cosVal*(-lumG)+sinVal*(-lumG),lumB+cosVal*(-lumB)+sinVal*(1-lumB),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(0.143),lumG+cosVal*(1-lumG)+sinVal*(0.140),lumB+cosVal*(-lumB)+sinVal*(-0.283),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(-(1-lumR)),lumG+cosVal*(-lumG)+sinVal*(lumG),lumB+cosVal*(1-lumB)+sinVal*(lumB),0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Concatenates (multiplies) the specified matrix with this one.\n\t * @method concat\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tconcat (matrix) {\n\t\tmatrix = this._fixMatrix(matrix);\n\t\tif (matrix.length != ColorMatrix.LENGTH) { return this; }\n\t\tthis._multiplyMatrix(matrix);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of this ColorMatrix.\n\t * @method clone\n\t * @return {ColorMatrix} A clone of this ColorMatrix.\n\t */\n\tclone () {\n\t\treturn (new ColorMatrix()).copy(this);\n\t}\n\n\t/**\n\t * Return a length 25 (5x5) array instance containing this matrix's values.\n\t * @method toArray\n\t * @return {Array} An array holding this matrix's values.\n\t */\n\ttoArray () {\n\t\tlet arr = [];\n\t\tconst l = ColorMatrix.LENGTH;\n\t\tfor (let i=0; i<l; i++) {\n\t\t\tarr[i] = this[i];\n\t\t}\n\t\treturn arr;\n\t}\n\n\t/**\n\t * Copy the specified matrix's values to this matrix.\n\t * @method copy\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tcopy (matrix) {\n\t\tconst l = ColorMatrix.LENGTH;\n\t\tfor (let i=0;i<l;i++) {\n\t\t\tthis[i] = matrix[i];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\n// private methods:\n\t/**\n\t * @method _multiplyMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t */\n\t_multiplyMatrix (matrix) {\n\t\tlet col = [];\n\n\t\tfor (let i=0;i<5;i++) {\n\t\t\tfor (let j=0;j<5;j++) {\n\t\t\t\tcol[j] = this[j+i*5];\n\t\t\t}\n\t\t\tfor (let j=0;j<5;j++) {\n\t\t\t\tlet val=0;\n\t\t\t\tfor (let k=0;k<5;k++) {\n\t\t\t\t\tval += matrix[j+k*5]*col[k];\n\t\t\t\t}\n\t\t\t\tthis[j+i*5] = val;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.\n\t * @method _cleanValue\n\t * @param {Number} value The raw number\n\t * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.\n\t * @protected\n\t */\n\t_cleanValue (value, limit) {\n\t\treturn Math.min(limit, Math.max(-limit, value));\n\t}\n\n\t/**\n\t * Makes sure matrixes are 5x5 (25 long).\n\t * @method _fixMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t */\n\t_fixMatrix (matrix) {\n\t\tif (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }\n\t\tif (matrix.length < ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0, matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length, ColorMatrix.LENGTH));\n\t\t} else if (matrix.length > ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0, ColorMatrix.LENGTH);\n\t\t}\n\t\treturn matrix;\n\t}\n\n}\n","/*\n* @license ColorMatrixFilter\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @module EaselJS\n */\n\nimport Filter from \"./Filter\";\n\n/**\n * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n * {{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\n * consider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n *\n * <h4>Example</h4>\n * This example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n *\n *      var shape = new createjs.Shape().set({x:100,y:100});\n *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n *\n *      var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n *      shape.filters = [\n *          new createjs.ColorMatrixFilter(matrix)\n *      ];\n *\n *      shape.cache(-50, -50, 100, 100);\n *\n * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n * @class ColorMatrixFilter\n * @extends Filter\n */\nexport default class ColorMatrixFilter extends Filter {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t * class.\n\t */\n\tconstructor (matrix) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t\t * @property matrix\n\t\t * @type Array | ColorMatrix\n\t\t */\n\t\tthis.matrix = matrix;\n\n\t\tthis.FRAG_SHADER_BODY = `\n\t\t\tuniform mat4 uColorMatrix;\n\t\t\tuniform vec4 uColorMatrixOffset;\n\n\t\t\tvoid main (void) {\n\t\t\t\tvec4 color = texture2D(uSampler, vRenderCoord);\n\n\t\t\t\tmat4 m = uColorMatrix;\n\t\t\t\tvec4 newColor = vec4(0,0,0,0);\n\t\t\t\tnewColor.r = color.r*m[0][0] + color.g*m[0][1] + color.b*m[0][2] + color.a*m[0][3];\n\t\t\t\tnewColor.g = color.r*m[1][0] + color.g*m[1][1] + color.b*m[1][2] + color.a*m[1][3];\n\t\t\t\tnewColor.b = color.r*m[2][0] + color.g*m[2][1] + color.b*m[2][2] + color.a*m[2][3];\n\t\t\t\tnewColor.a = color.r*m[3][0] + color.g*m[3][1] + color.b*m[3][2] + color.a*m[3][3];\n\n\t\t\t\tgl_FragColor = newColor + uColorMatrixOffset;\n\t\t\t}\n\t\t`;\n\t}\n\n// public methods:\n\tshaderParamSetup (gl, stage, shaderProgram) {\n\t\tlet mat = this.matrix;\n\t\tlet colorMatrix = new Float32Array([\n\t\t\tmat[0],mat[1],mat[2],mat[3],\n\t\t\tmat[5],mat[6],mat[7],mat[8],\n\t\t\tmat[10],mat[11],mat[12],mat[13],\n\t\t\tmat[15],mat[16],mat[17],mat[18]\n\t\t]);\n\n\t\tgl.uniformMatrix4fv(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uColorMatrix\"),\n\t\t\tfalse, colorMatrix\n\t\t);\n\t\tgl.uniform4f(\n\t\t\tgl.getUniformLocation(shaderProgram, \"uColorMatrixOffset\"),\n\t\t\tmat[4]/255, mat[9]/255, mat[14]/255, mat[19]/255\n\t\t);\n\t}\n\n\t/**\n\t * Docced in super class\n\t */\n\tclone () {\n\t\treturn new ColorMatrixFilter(this.matrix);\n\t}\n\n// private methods:\n\t/**\n\t * Docced in super class\n\t */\n\t_applyFilter (imageData) {\n\t\tlet data = imageData.data;\n\t\tconst l = data.length;\n\t\tlet r,g,b,a;\n\t\tlet mtx = this.matrix;\n\t\tlet m0 =  mtx[0],  m1 =  mtx[1],  m2 =  mtx[2],  m3 =  mtx[3],  m4 =  mtx[4];\n\t\tlet m5 =  mtx[5],  m6 =  mtx[6],  m7 =  mtx[7],  m8 =  mtx[8],  m9 =  mtx[9];\n\t\tlet m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];\n\t\tlet m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];\n\n\t\tfor (let i=0; i<l; i+=4) {\n\t\t\tr = data[i];\n\t\t\tg = data[i+1];\n\t\t\tb = data[i+2];\n\t\t\ta = data[i+3];\n\t\t\tdata[i] = r*m0+g*m1+b*m2+a*m3+m4; // red\n\t\t\tdata[i+1] = r*m5+g*m6+b*m7+a*m8+m9; // green\n\t\t\tdata[i+2] = r*m10+g*m11+b*m12+a*m13+m14; // blue\n\t\t\tdata[i+3] = r*m15+g*m16+b*m17+a*m18+m19; // alpha\n\t\t}\n\n\t\treturn true;\n\t}\n\n}\n","/*\n* @license ButtonHelper\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n * {{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\n * automatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\n * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n *\n * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\n * garbage collection.\n *\n * Note that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n *\n * <h4>Example</h4>\n *\n *      var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n *      myInstance.addEventListener(\"click\", handleClick);\n *      function handleClick(event) {\n *          // Click Happened.\n *      }\n *\n * @class ButtonHelper\n * @module EaselJS\n */\nexport default class ButtonHelper {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Sprite|MovieClip} target The instance to manage.\n\t * @param {String} [outLabel=\"out\"] The label or animation to go to when the user rolls out of the button.\n\t * @param {String} [overLabel=\"over\"] The label or animation to go to when the user rolls over the button.\n\t * @param {String} [downLabel=\"down\"] The label or animation to go to when the user presses the button.\n\t * @param {Boolean} [play=false] If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\n\t * states.\n\t * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,\n\t * then the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\n\t * used for the hitState.\n\t * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is\n\t * null, then the default state of the hitArea will be used. *\n\t */\n\tconstructor (target, outLabel = \"out\", overLabel = \"over\", downLabel = \"down\", play = false, hitArea, hitLabel) {\n\t\tif (!target.addEventListener) { return; }\n\n\t// public properties:\n\t\t/**\n\t\t * The target for this button helper.\n\t\t * @property target\n\t\t * @type MovieClip | Sprite\n\t\t * @readonly\n\t\t */\n\t\tthis.target = target;\n\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".\n\t\t * @property overLabel\n\t\t * @type String | Number\n\t\t */\n\t\tthis.overLabel = overLabel;\n\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses over the target. Defaults to \"out\".\n\t\t * @property outLabel\n\t\t * @type String | Number\n\t\t */\n\t\tthis.outLabel = outLabel;\n\n\t\t/**\n\t\t * The label name or frame number to display when the user presses on the target. Defaults to \"down\".\n\t\t * @property downLabel\n\t\t * @type String | Number\n\t\t */\n\t\tthis.downLabel = downLabel == null;\n\n\t\t/**\n\t\t * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.\n\t\t * @property play\n\t\t * @default false\n\t\t * @type Boolean\n\t\t */\n\t\tthis.play = play;\n\n\n\t//  private properties\n\t\t/**\n\t\t * @property _isPressed\n\t\t * @type Boolean\n\t\t * @protected\n\t\t */\n\t\tthis._isPressed = false;\n\n\t\t/**\n\t\t * @property _isOver\n\t\t * @type Boolean\n\t\t * @protected\n\t\t */\n\t\tthis._isOver = false;\n\n\t\t/**\n\t\t * @property _enabled\n\t\t * @type Boolean\n\t\t * @protected\n\t\t */\n\t\tthis._enabled = false;\n\n\t// setup:\n\t\ttarget.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.\n\t\tthis.enabled = true;\n\t\tthis.handleEvent({});\n\t\tif (hitArea) {\n\t\t\tif (hitLabel) {\n\t\t\t\thitArea.actionsEnabled = false;\n\t\t\t\thitArea.gotoAndStop&&hitArea.gotoAndStop(hitLabel);\n\t\t\t}\n\t\t\ttarget.hitArea = hitArea;\n\t\t}\n\t}\n\n// accessor properties:\n\t/**\n\t * Enables or disables the button functionality on the target.\n\t * @property enabled\n\t * @type {Boolean}\n\t */\n\tget enabled () {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled (enabled) {\n\t\tif (enabled === this._enabled) { return; }\n\t\tlet o = this.target;\n\t\tthis._enabled = enabled;\n\t\tif (enabled) {\n\t\t\to.cursor = \"pointer\";\n\t\t\to.addEventListener(\"rollover\", this);\n\t\t\to.addEventListener(\"rollout\", this);\n\t\t\to.addEventListener(\"mousedown\", this);\n\t\t\to.addEventListener(\"pressup\", this);\n\t\t\tif (o._reset) { o.__reset = o._reset; o._reset = this._reset;}\n\t\t} else {\n\t\t\to.cursor = null;\n\t\t\to.removeEventListener(\"rollover\", this);\n\t\t\to.removeEventListener(\"rollout\", this);\n\t\t\to.removeEventListener(\"mousedown\", this);\n\t\t\to.removeEventListener(\"pressup\", this);\n\t\t\tif (o.__reset) { o._reset = o.__reset; delete(o.__reset); }\n\t\t}\n\t}\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\n// private methods:\n\t/**\n\t * @method handleEvent\n\t * @param {Object} evt The mouse event to handle.\n\t * @protected\n\t */\n\thandleEvent (evt) {\n\t\tlet label, t = this.target, type = evt.type;\n\t\tif (type === \"mousedown\") {\n\t\t\tthis._isPressed = true;\n\t\t\tlabel = this.downLabel;\n\t\t} else if (type === \"pressup\") {\n\t\t\tthis._isPressed = false;\n\t\t\tlabel = this._isOver ? this.overLabel : this.outLabel;\n\t\t} else if (type === \"rollover\") {\n\t\t\tthis._isOver = true;\n\t\t\tlabel = this._isPressed ? this.downLabel : this.overLabel;\n\t\t} else { // rollout and default\n\t\t\tthis._isOver = false;\n\t\t\tlabel = this._isPressed ? this.overLabel : this.outLabel;\n\t\t}\n\t\tif (this.play) {\n\t\t\tt.gotoAndPlay&&t.gotoAndPlay(label);\n\t\t} else {\n\t\t\tt.gotoAndStop&&t.gotoAndStop(label);\n\t\t}\n\t}\n\n\t/**\n\t * Injected into target. Preserves the paused state through a reset.\n\t * @method _reset\n\t * @protected\n\t */\n\t_reset () {\n\t\t// TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.\n\t\tlet p = this.paused;\n\t\tthis.__reset();\n\t\tthis.paused = p;\n\t}\n\n}\n","/*\n* @license Touch\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\n * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n *\n * Ensure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\n * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n *\n * <h4>Example</h4>\n *\n *      var stage = new createjs.Stage(\"canvasId\");\n *      createjs.Touch.enable(stage);\n *\n * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n *\n *      createjs.Touch.disable(stage);\n *\n * @class Touch\n * @static\n * @module EaselJS\n */\nexport default class Touch {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tthrow \"Touch cannot be instantiated\";\n\t}\n\n// public static methods:\n\t/**\n\t * Returns `true` if touch is supported in the current browser.\n\t * @method isSupported\n\t * @return {Boolean} Indicates whether touch is supported in the current browser.\n\t * @static\n\t */\n\tstatic isSupported () {\n\t\treturn\t!!(('ontouchstart' in window) // iOS & Android\n\t\t\t|| (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) // IE10\n\t\t\t|| (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0)); // IE11+\n\t}\n\n\t/**\n\t * Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n\t * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\n\t * multi-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\n\t * double click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\n\t * for more information.\n\t * @method enable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.\n\t * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.\n\t * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be\n\t * allowed when the user is interacting with the target canvas.\n\t * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.\n\t * @static\n\t */\n\tstatic enable (stage, singleTouch = false, allowDefault = false) {\n\t\tif (!stage || !stage.canvas || !Touch.isSupported()) { return false; }\n\t\tif (stage.__touch) { return true; }\n\n\t\t// inject required properties on stage:\n\t\tstage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};\n\n\t\t// note that in the future we may need to disable the standard mouse event model before adding\n\t\t// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.\n\t\tif ('ontouchstart' in window) { Touch._IOS_enable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_enable(stage); }\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes all listeners that were set up when calling `Touch.enable()` on a stage.\n\t * @method disable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.\n\t * @static\n\t */\n\tstatic disable (stage) {\n\t\tif (!stage) { return; }\n\t\tif ('ontouchstart' in window) { Touch._IOS_disable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_disable(stage); }\n\n\t\tdelete stage.__touch;\n\t}\n\n\n// private static methods:\n\t/**\n\t * @method _IOS_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t */\n\tstatic _IOS_enable (stage) {\n\t\tlet canvas = stage.canvas;\n\t\tlet f = stage.__touch.f = e => Touch._IOS_handleEvent(stage, e);\n\t\tcanvas.addEventListener(\"touchstart\", f, false);\n\t\tcanvas.addEventListener(\"touchmove\", f, false);\n\t\tcanvas.addEventListener(\"touchend\", f, false);\n\t\tcanvas.addEventListener(\"touchcancel\", f, false);\n\t}\n\n\t/**\n\t * @method _IOS_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t */\n\tstatic _IOS_disable (stage) {\n\t\tlet canvas = stage.canvas;\n\t\tif (!canvas) { return; }\n\t\tlet f = stage.__touch.f;\n\t\tcanvas.removeEventListener(\"touchstart\", f, false);\n\t\tcanvas.removeEventListener(\"touchmove\", f, false);\n\t\tcanvas.removeEventListener(\"touchend\", f, false);\n\t\tcanvas.removeEventListener(\"touchcancel\", f, false);\n\t}\n\n\t/**\n\t * @method _IOS_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle\n\t * @protected\n\t * @static\n\t */\n\tstatic _IOS_handleEvent (stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }\n\t\tlet touches = e.changedTouches;\n\t\tlet type = e.type;\n\t\tconst l = touches.length;\n\t\tfor (let touch of touches) {\n\t\t\tlet id = touch.identifier;\n\t\t\tif (touch.target != stage.canvas) { continue; }\n\n\t\t\tif (type === \"touchstart\") {\n\t\t\t\tthis._handleStart(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type === \"touchmove\") {\n\t\t\t\tthis._handleMove(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type === \"touchend\" || type === \"touchcancel\") {\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @method _IE_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t */\n\tstatic _IE_enable (stage) {\n\t\tlet canvas = stage.canvas;\n\t\tlet f = stage.__touch.f = e => Touch._IE_handleEvent(stage,e);\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\tcanvas.addEventListener(\"MSPointerDown\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.msTouchAction = \"none\"; }\n\t\t} else {\n\t\t\tcanvas.addEventListener(\"pointerdown\", f, false);\n\t\t\twindow.addEventListener(\"pointermove\", f, false);\n\t\t\twindow.addEventListener(\"pointerup\", f, false);\n\t\t\twindow.addEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.touchAction = \"none\"; }\n\n\t\t}\n\t\tstage.__touch.activeIDs = {};\n\t}\n\n\t/**\n\t * @method _IE_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t */\n\tstatic _IE_disable (stage) {\n\t\tlet f = stage.__touch.f;\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\twindow.removeEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.removeEventListener(\"pointermove\", f, false);\n\t\t\twindow.removeEventListener(\"pointerup\", f, false);\n\t\t\twindow.removeEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"pointerdown\", f, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @method _IE_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle.\n\t * @protected\n\t * @static\n\t */\n\tstatic _IE_handleEvent (stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }\n\t\tlet type = e.type;\n\t\tlet id = e.pointerId;\n\t\tlet ids = stage.__touch.activeIDs;\n\n\t\tif (type === \"MSPointerDown\" || type === \"pointerdown\") {\n\t\t\tif (e.srcElement != stage.canvas) { return; }\n\t\t\tids[id] = true;\n\t\t\tthis._handleStart(stage, id, e, e.pageX, e.pageY);\n\t\t} else if (ids[id]) { // it's an id we're watching\n\t\t\tif (type === \"MSPointerMove\" || type === \"pointermove\") {\n\t\t\t\tthis._handleMove(stage, id, e, e.pageX, e.pageY);\n\t\t\t} else if (type === \"MSPointerUp\" || type === \"MSPointerCancel\"\n\t\t\t\t\t|| type === \"pointerup\" || type === \"pointercancel\") {\n\t\t\t\tdelete(ids[id]);\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @method _handleStart\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t */\n\tstatic _handleStart (stage, id, e, x, y) {\n\t\tlet props = stage.__touch;\n\t\tif (!props.multitouch && props.count) { return; }\n\t\tlet ids = props.pointers;\n\t\tif (ids[id]) { return; }\n\t\tids[id] = true;\n\t\tprops.count++;\n\t\tstage._handlePointerDown(id, e, x, y);\n\t}\n\n\t/**\n\t * @method _handleMove\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t */\n\tstatic _handleMove (stage, id, e, x, y) {\n\t\tif (!stage.__touch.pointers[id]) { return; }\n\t\tstage._handlePointerMove(id, e, x, y);\n\t}\n\n\t/**\n\t * @method _handleEnd\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @protected\n\t */\n\tstatic _handleEnd (stage, id, e) {\n\t\t// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).\n\t\tlet props = stage.__touch;\n\t\tlet ids = props.pointers;\n\t\tif (!ids[id]) { return; }\n\t\tprops.count--;\n\t\tstage._handlePointerUp(id, e, true);\n\t\tdelete(ids[id]);\n\t}\n\n}\n","/*\n* @license SpriteSheetBuilder\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst _ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\nconst _ERR_RUNNING = \"a build is already running\";\n\nimport EventDispatcher from \"createjs/src/events/EventDispatcher\";\nimport Rectangle from \"../geom/Rectangle\";\nimport SpriteSheet from \"../display/SpriteSheet\";\nimport Event from \"createjs/src/events/Event\";\n\n/**\n * The SpriteSheetBuilder allows you to generate {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances at run time\n * from any display object. This can allow you to maintain your assets as vector graphics (for low file size), and\n * render them at run time as SpriteSheets for better performance.\n *\n * SpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated\n * without locking the UI.\n *\n * Note that the \"images\" used in the generated SpriteSheet are actually canvas elements, and that they will be\n * sized to the nearest power of 2 up to the value of {{#crossLink \"SpriteSheetBuilder/maxWidth:property\"}}{{/crossLink}}\n * or {{#crossLink \"SpriteSheetBuilder/maxHeight:property\"}}{{/crossLink}}.\n * @class SpriteSheetBuilder\n * @param {Number} [framerate=0] The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n * {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.\n * @extends EventDispatcher\n * @module EaselJS\n */\nexport default class SpriteSheetBuilder extends EventDispatcher {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {Number} [framerate=0] The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n\t * {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.\n\t */\n\tconstructor (framerate = 0) {\n\t\tsuper();\n\n// public properties:\n\t\t/**\n\t\t * The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t * dimensions, then additional images will be created as needed.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t * @default 2048\n\t\t*/\n\t\tthis.maxWidth = 2048;\n\n\t\t/**\n\t\t * The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to\n\t\t * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\n\t\t * dimensions, then additional images will be created as needed.\n\t\t * @property maxHeight\n\t\t * @type Number\n\t\t * @default 2048\n\t\t */\n\t\tthis.maxHeight = 2048;\n\n\t\t/**\n\t\t * The SpriteSheet that was generated. This will be null before a build is completed successfully.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t */\n\t\tthis.spriteSheet = null;\n\n\t\t/**\n\t\t * The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified\n\t\t * in the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored\n\t\t * to the a specific device resolution (ex. tablet vs mobile).\n\t\t * @property scale\n\t\t * @type Number\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t* The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.\n\t\t* @property padding\n\t\t* @type Number\n\t\t* @default 1\n\t\t*/\n\t\tthis.padding = 1;\n\n\t\t/**\n\t\t * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\n\t\t * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\n\t\t * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\n\t\t * Defaults to 0.3.\n\t\t * @property timeSlice\n\t\t * @type Number\n\t\t * @default 0.3\n\t\t */\n\t\tthis.timeSlice = 0.3;\n\n\t\t/**\n\t\t * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\n\t\t * been initiated.\n\t\t * @property progress\n\t\t * @type Number\n\t\t * @default -1\n\t\t * @readonly\n\t\t */\n\t\tthis.progress = -1;\n\n\t\t/**\n\t\t * A {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} value that will be passed to new {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are\n\t\t * created. If no framerate is specified (or it is 0), then SpriteSheets will use the {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t\t * framerate.\n\t\t * @property framerate\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.framerate = framerate;\n\n// private properties:\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._frames = [];\n\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._animations = {};\n\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Array\n\t\t */\n\t\tthis._data = null;\n\n\t\t/**\n\t\t * @property _nextFrameIndex\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._nextFrameIndex = 0;\n\n\t\t/**\n\t\t * @property _index\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._index = 0;\n\n\t\t/**\n\t\t * @property _timerID\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._timerID = null;\n\n\t\t/**\n\t\t * @property _scale\n\t\t * @protected\n\t\t * @type Number\n\t\t */\n\t\tthis._scale = 1;\n\t}\n\n// constants:\n\tstatic get ERR_DIMENSIONS () { return _ERR_DIMENSIONS; }\n\tstatic get ERR_RUNNING () { return _ERR_RUNNING; }\n\n// public methods:\n\t/**\n\t * Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\n\t * call {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\n\t * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple\n\t * times, but manipulate it or its children to change it to generate different frames.\n\t *\n\t * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\n\t * transforms to a source object and have them captured in the SpriteSheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\n\t * and pass in the Container as the source.\n\t * @method addFrame\n\t * @param {DisplayObject} source The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\n\t * source to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or\n\t * `nominalBounds` property on the source to use. If one is not found, the frame will be skipped.\n\t * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.\n\t */\n\taddFrame (source, sourceRect, scale = 1, setupFunction, setupData) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tlet rect = sourceRect||source.bounds||source.nominalBounds||(source.getBounds&&source.getBounds());\n\t\tif (!rect) { return null; }\n\t\treturn this._frames.push({source, sourceRect:rect, scale, funct:setupFunction, data:setupData, index:this._frames.length, height:rect.height*scale})-1;\n\t}\n\n\t/**\n\t * Adds an animation that will be included in the created {{#crossLink \"SpriteSheet\"}}{{/crossLink}}.\n\t * @method addAnimation\n\t * @param {String} name The name for the animation.\n\t * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\n\t * that played frame indexes 3, 6, and 5 in that order.\n\t * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can\n\t * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.\n\t * @param {Number} [speed] Specifies a frame advance speed for this animation. For example, a value of 0.5 would\n\t * cause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had\n\t * the opposite effect.\n\t */\n\taddAnimation (name, frames, next, speed) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._animations[name] = {frames, next, speed};\n\t}\n\n\t/**\n\t * This will take a {{#crossLink \"MovieClip\"}}{{/crossLink}} instance, and add its frames and labels to this\n\t * builder. Labels will be added as an animation running from the label index to the next label. For example, if\n\t * there is a label named \"foo\" at frame 0 and a label named \"bar\" at frame 10, in a MovieClip with 15 frames, it\n\t * will add an animation named \"foo\" that runs from frame index 0 to 9, and an animation named \"bar\" that runs from\n\t * frame index 10 to 14.\n\t *\n\t * Note that this will iterate through the full MovieClip with {{#crossLink \"MovieClip/actionsEnabled:property\"}}{{/crossLink}}\n\t * set to `false`, ending on the last frame.\n\t * @method addMovieClip\n\t * @param {MovieClip} source The source MovieClip instance to add to the SpriteSheet.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\n\t * draw to the frame. If not specified, it will look for a {{#crossLink \"DisplayObject/getBounds\"}}{{/crossLink}}\n\t * method, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not\n\t * found, the MovieClip will be skipped.\n\t * @param {Number} [scale=1] The scale to draw the movie clip at.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called\n\t * with three parameters: the source, setupData, and the frame index.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @param {Function} [labelFunction] This method will be called for each MovieClip label that is added with four\n\t * parameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)\n\t * and the end index. It must return a new name for the label/animation, or `false` to exclude the label.\n\t */\n\taddMovieClip (source, sourceRect, scale = 1, setupFunction, setupData, labelFunction) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tlet rects = source.frameBounds;\n\t\tlet rect = sourceRect||source.bounds||source.nominalBounds||(source.getBounds&&source.getBounds());\n\t\tif (!rect && !rects) { return; }\n\n\t\tlet baseFrameIndex = this._frames.length;\n\t\tconst duration = source.timeline.duration;\n\t\tfor (let i=0; i<duration; i++) {\n\t\t\tlet r = (rects&&rects[i]) ? rects[i] : rect;\n\t\t\tthis.addFrame(source, r, scale, this._setupMovieClipFrame, {i, f:setupFunction, d:setupData});\n\t\t}\n\t\tconst labels = source.timeline._labels;\n\t\tlet lbls = [];\n\t\tfor (let n in labels) {\n\t\t\tlbls.push({index:labels[n], label:n});\n\t\t}\n\t\tif (lbls.length) {\n\t\t\tlbls.sort((a, b) => a.index-b.index);\n\t\t\tfor (let i=0,l=lbls.length; i<l; i++) {\n\t\t\t\tlet label = lbls[i].label;\n\t\t\t\tlet start = baseFrameIndex+lbls[i].index;\n\t\t\t\tlet end = baseFrameIndex+((i === l-1) ? duration : lbls[i+1].index);\n\t\t\t\tlet frames = [];\n\t\t\t\tfor (let i=start; i<end; i++) { frames.push(i); }\n\t\t\t\tif (labelFunction) {\n\t\t\t\t\tlabel = labelFunction(label, source, start, end);\n\t\t\t\t\tif (!label) { continue; }\n\t\t\t\t}\n\t\t\t\tthis.addAnimation(label, frames, true); // for now, this loops all animations.\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames.\n\t * @method build\n\t * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error\n\t * occurred.\n\t */\n\tbuild () {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._startBuild();\n\t\twhile (this._drawNext()) {}\n\t\tthis._endBuild();\n\t\treturn this.spriteSheet;\n\t}\n\n\t/**\n\t * Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\n\t * run 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the\n\t * specified callback.\n\t * @method buildAsync\n\t * @param {Number} [timeSlice] Sets the timeSlice property on this instance.\n\t */\n\tbuildAsync (timeSlice) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis.timeSlice = timeSlice;\n\t\tthis._startBuild();\n\t\tthis._timerID = setTimeout(() => this._run(), 50-Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50);\n\t}\n\n\t/**\n\t * Stops the current asynchronous build.\n\t * @method stopAsync\n\t */\n\tstopAsync () {\n\t\tclearTimeout(this._timerID);\n\t\tthis._data = null;\n\t}\n\n\t/**\n\t * SpriteSheetBuilder instances cannot be cloned.\n\t * @method clone\n\t */\n\tclone () {\n\t\tthrow \"SpriteSheetBuilder cannot be cloned.\";\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}]`;\n\t}\n\n\n// private methods:\n\t/**\n\t * @method _startBuild\n\t * @protected\n\t */\n\t_startBuild () {\n\t\tlet pad = this.padding||0;\n\t\tthis.progress = 0;\n\t\tthis.spriteSheet = null;\n\t\tthis._index = 0;\n\t\tthis._scale = this.scale;\n\t\tlet dataFrames = [];\n\t\tthis._data = {\n\t\t\timages: [],\n\t\t\tframes: dataFrames,\n\t\t\tframerate: this.framerate,\n\t\t\tanimations: this._animations // TODO: should we \"clone\" _animations in case someone adds more animations after a build?\n\t\t};\n\n\t\tlet frames = this._frames.slice();\n\t\tframes.sort((a, b) => (a.height<=b.height) ? -1 : 1);\n\n\t\tif (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\tlet y=0, x=0;\n\t\tlet img = 0;\n\t\twhile (frames.length) {\n\t\t\tlet o = this._fillRow(frames, y, img, dataFrames, pad);\n\t\t\tif (o.w > x) { x = o.w; }\n\t\t\ty += o.h;\n\t\t\tif (!o.h || !frames.length) {\n\t\t\t\tlet canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\t\t\t\tcanvas.width = this._getSize(x,this.maxWidth);\n\t\t\t\tcanvas.height = this._getSize(y,this.maxHeight);\n\t\t\t\tthis._data.images[img] = canvas;\n\t\t\t\tif (!o.h) {\n\t\t\t\t\tx=y=0;\n\t\t\t\t\timg++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _setupMovieClipFrame\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t */\n\t_setupMovieClipFrame (source, data) {\n\t\tlet ae = source.actionsEnabled;\n\t\tsource.actionsEnabled = false;\n\t\tsource.gotoAndStop(data.i);\n\t\tsource.actionsEnabled = ae;\n\t\tdata.f&&data.f(source, data.d, data.i);\n\t}\n\n\t/**\n\t * @method _getSize\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t */\n\t_getSize (size, max) {\n\t\tlet pow = 4;\n\t\twhile (Math.pow(2, ++pow) < size) {}\n\t\treturn Math.min(max, Math.pow(2, pow));\n\t};\n\n\t/**\n\t * @method _fillRow\n\t * @param {Array} frames\n\t * @param {Number} y\n\t * @param {HTMLImageElement} img\n\t * @param {Object} dataFrames\n\t * @param {Number} pad\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t */\n\t_fillRow (frames, y, img, dataFrames, pad) {\n\t\tlet w = this.maxWidth;\n\t\tlet maxH = this.maxHeight;\n\t\ty += pad;\n\t\tlet h = maxH-y;\n\t\tlet x = pad;\n\t\tlet height = 0;\n\t\tfor (let i=frames.length-1; i>=0; i--) {\n\t\t\tlet frame = frames[i];\n\t\t\tlet sc = this._scale*frame.scale;\n\t\t\tlet rect = frame.sourceRect;\n\t\t\tlet source = frame.source;\n\t\t\tlet rx = Math.floor(sc*rect.x-pad);\n\t\t\tlet ry = Math.floor(sc*rect.y-pad);\n\t\t\tlet rh = Math.ceil(sc*rect.height+pad*2);\n\t\t\tlet rw = Math.ceil(sc*rect.width+pad*2);\n\t\t\tif (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\t\tif (rh > h || x+rw > w) { continue; }\n\t\t\tframe.img = img;\n\t\t\tframe.rect = new Rectangle(x,y,rw,rh);\n\t\t\theight = height || rh;\n\t\t\tframes.splice(i,1);\n\t\t\tdataFrames[frame.index] = [x,y,rw,rh,img,Math.round(-rx+sc*source.regX-pad),Math.round(-ry+sc*source.regY-pad)];\n\t\t\tx += rw;\n\t\t}\n\t\treturn {w:x, h:height};\n\t}\n\n\t/**\n\t * @method _endBuild\n\t * @protected\n\t */\n\t_endBuild () {\n\t\tthis.spriteSheet = new SpriteSheet(this._data);\n\t\tthis._data = null;\n\t\tthis.progress = 1;\n\t\tthis.dispatchEvent(\"complete\");\n\t}\n\n\t/**\n\t * @method _run\n\t * @protected\n\t */\n\t_run () {\n\t\tlet ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;\n\t\tlet t = (new Date()).getTime()+ts;\n\t\tlet complete = false;\n\t\twhile (t > (new Date()).getTime()) {\n\t\t\tif (!this._drawNext()) { complete = true; break; }\n\t\t}\n\t\tif (complete) {\n\t\t\tthis._endBuild();\n\t\t} else {\n\t\t\tthis._timerID = setTimeout(() => this._run(), 50-ts);\n\t\t}\n\t\tlet p = this.progress = this._index/this._frames.length;\n\t\tif (this.hasEventListener(\"progress\")) {\n\t\t\tlet evt = new Event(\"progress\");\n\t\t\tevt.progress = p;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t}\n\n\t/**\n\t * @method _drawNext\n\t * @protected\n\t * @return Boolean Returns false if this is the last draw.\n\t */\n\t_drawNext () {\n\t\tlet frame = this._frames[this._index];\n\t\tlet sc = frame.scale*this._scale;\n\t\tlet rect = frame.rect;\n\t\tlet sourceRect = frame.sourceRect;\n\t\tlet canvas = this._data.images[frame.img];\n\t\tlet ctx = canvas.getContext(\"2d\");\n\t\tframe.funct&&frame.funct(frame.source, frame.data);\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(rect.x, rect.y, rect.width, rect.height);\n\t\tctx.clip();\n\t\tctx.translate(Math.ceil(rect.x-sourceRect.x*sc), Math.ceil(rect.y-sourceRect.y*sc));\n\t\tctx.scale(sc,sc);\n\t\tframe.source.draw(ctx); // display object will draw itself.\n\t\tctx.restore();\n\t\treturn (++this._index) < this._frames.length;\n\t}\n\n}\n\n// events:\n/**\n * Dispatched when a build completes.\n * @event complete\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n * @since 0.6.0\n */\n\n/**\n * Dispatched when an asynchronous build has progress.\n * @event progress\n * @param {Object} target The object that dispatched the event.\n * @param {String} type The event type.\n * @param {Number} progress The current progress value (0-1).\n * @since 0.6.0\n */\n","/*\n* @license SpriteSheetUtils\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2017 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\n * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\n * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\n * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.\n * @class SpriteSheetUtils\n * @static\n * @module EaselJS\n */\nexport default class SpriteSheetUtils {\n\n// constructor:\n\t/**\n\t * @constructor\n\t */\n\tconstructor () {\n\t\tthrow \"SpriteSheetUtils cannot be instantiated\";\n\t}\n\n// public static methods:\n\t/**\n\t * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\n\t * to use a spritesheet frame as the source for a bitmap fill.\n\t *\n\t * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\n\t * with a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\n\t * method and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\n\t * property of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n\t *\n\t * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.\n\t * @method extractFrame\n\t * @static\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.\n\t * @param {Number|String} frameOrAnimation The frame number or animation name to extract. If an animation\n\t * name is specified, only the first frame of the animation will be extracted.\n\t * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.\n\t*/\n\tstatic extractFrame (spriteSheet, frameOrAnimation) {\n\t\tif (isNaN(frameOrAnimation)) {\n\t\t\tframeOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\n\t\t}\n\t\tlet data = spriteSheet.getFrame(frameOrAnimation);\n\t\tif (!data) { return null; }\n\t\tlet r = data.rect;\n\t\tlet canvas = SpriteSheetUtils._workingCanvas;\n\t\tcanvas.width = r.width;\n\t\tcanvas.height = r.height;\n\t\tSpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\n\t\tlet img = document.createElement(\"img\");\n\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\treturn img;\n\t}\n\n\t/**\n\t * Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\n\t * JPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\n\t * images (those with detail that lend itself to JPEG compression) this can provide significant file size savings\n\t * versus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).\n\t * @method mergeAlpha\n\t * @static\n\t * @param {HTMLImageElement} rbgImage The image (or canvas) containing the RGB channels to use.\n\t * @param {HTMLImageElement} alphaImage The image (or canvas) containing the alpha channel to use.\n\t * @param {HTMLCanvasElement} [canvas] If specified, this canvas will be used and returned. If not, a new canvas will be created.\n\t * @return {HTMLCanvasElement} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.\n\t * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.\n\t*/\n\tstatic mergeAlpha (rgbImage, alphaImage, canvas) {\n\t\tif (!canvas) { canvas = createjs && createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\n\t\tcanvas.width = Math.max(alphaImage.width, rgbImage.width);\n\t\tcanvas.height = Math.max(alphaImage.height, rgbImage.height);\n\t\tlet ctx = canvas.getContext(\"2d\");\n\t\tctx.save();\n\t\tctx.drawImage(rgbImage,0,0);\n\t\tctx.globalCompositeOperation = \"destination-in\";\n\t\tctx.drawImage(alphaImage,0,0);\n\t\tctx.restore();\n\t\treturn canvas;\n\t}\n\n\n// private static methods:\n\tstatic _flip (spriteSheet, count, h, v) {\n\t\tlet imgs = spriteSheet._images;\n\t\tlet canvas = SpriteSheetUtils._workingCanvas;\n\t\tlet ctx = SpriteSheetUtils._workingContext;\n\t\tconst il = imgs.length/count;\n\t\tfor (let i=0; i<il; i++) {\n\t\t\tlet src = imgs[i];\n\t\t\tsrc.__tmp = i; // a bit hacky, but faster than doing indexOf below.\n\t\t\tctx.setTransform(1,0,0,1,0,0);\n\t\t\tctx.clearRect(0,0,canvas.width+1,canvas.height+1);\n\t\t\tcanvas.width = src.width;\n\t\t\tcanvas.height = src.height;\n\t\t\tctx.setTransform(h?-1:1, 0, 0, v?-1:1, h?src.width:0, v?src.height:0);\n\t\t\tctx.drawImage(src,0,0);\n\t\t\tlet img = document.createElement(\"img\");\n\t\t\timg.src = canvas.toDataURL(\"image/png\");\n\t\t\t// work around a strange bug in Safari:\n\t\t\timg.width = (src.width||src.naturalWidth);\n\t\t\timg.height = (src.height||src.naturalHeight);\n\t\t\timgs.push(img);\n\t\t}\n\n\t\tlet frames = spriteSheet._frames;\n\t\tconst fl = frames.length/count;\n\t\tfor (let i=0; i<fl; i++) {\n\t\t\tlet src = frames[i];\n\t\t\tlet rect = src.rect.clone();\n\t\t\tlet img = imgs[src.image.__tmp+il*count];\n\n\t\t\tlet frame = {image:img,rect,regX:src.regX,regY:src.regY};\n\t\t\tif (h) {\n\t\t\t\trect.x = (img.width||img.naturalWidth)-rect.x-rect.width; // update rect\n\t\t\t\tframe.regX = rect.width-src.regX; // update registration point\n\t\t\t}\n\t\t\tif (v) {\n\t\t\t\trect.y = (img.height||img.naturalHeight)-rect.y-rect.height;  // update rect\n\t\t\t\tframe.regY = rect.height-src.regY; // update registration point\n\t\t\t}\n\t\t\tframes.push(frame);\n\t\t}\n\n\t\tlet sfx = `_${h?\"h\":\"\"}${v?\"v\":\"\"}`;\n\t\tlet names = spriteSheet._animations;\n\t\tlet data = spriteSheet._data;\n\t\tconst al = names.length/count;\n\t\tfor (let i=0; i<al; i++) {\n\t\t\tlet name = names[i];\n\t\t\tlet src = data[name];\n\t\t\tlet anim = {name:name+sfx,speed:src.speed,next:src.next,frames:[]};\n\t\t\tif (src.next) { anim.next += sfx; }\n\t\t\tlet frames = src.frames;\n\t\t\tfor (let i=0,l=frames.length;i<l;i++) {\n\t\t\t\tanim.frames.push(frames[i]+fl*count);\n\t\t\t}\n\t\t\tdata[anim.name] = anim;\n\t\t\tnames.push(anim.name);\n\t\t}\n\t}\n\n}\n\n// private static properties:\n/**\n * @property _workingCanvas\n * @static\n * @type HTMLCanvasElement | Object\n * @protected\n*/\n/**\n * @property _workingContext\n * @static\n * @type CanvasRenderingContext2D\n * @protected\n*/\n{\n\tlet canvas = (createjs && createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) {\n\t\tSpriteSheetUtils._workingCanvas = canvas;\n\t\tSpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n}\n","/*\n * @license WebGLInspector\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nlet _alternateOutput = null;\n\nimport EventDispatcher from \"createjs/src/events/EventDispatcher\";\n\n /**\n  * A utility and helper class designed to work with {{#crossLink \"StageGL\"}}{{/crossLink}} to help investigate and\n  * test performance or display problems. It contains logging functions to analyze behaviour and performance testing\n  * utilities.\n  * @class WebGLInspector\n  * @extends EventDispatcher\n  * @module EaselJS\n  */\nexport default class WebGLInspector extends EventDispatcher {\n\n// constructor:\n\t/**\n\t * @constructor\n\t * @param {StageGL} stage The default stage to use when none is supplied.\n\t */\n\tconstructor (stage) {\n\t\tsuper();\n\n// private properties:\n\t\t/**\n\t\t * The internal reference to the default stage this Inspector is for.\n\t\t * @property _stage\n\t\t * @protected\n\t\t * @type {StageGL}\n\t\t */\n\t\tthis._stage = stage;\n\t}\n\n// static properties:\n\t/**\n\t * Alternate output for debugging situations where \"console\" is not available, i.e. Mobile or remote debugging.\n\t * Expects object with a \"log\" function that takes any number of params.\n\t * @property alternateOutput\n\t * @type {Console}\n\t * @default null\n\t * @static\n\t * @protected\n\t */\n\tstatic get alternateOutput () { return _alternateOutput; }\n\tstatic set alternateOutput (alternateOutput) { _alternateOutput = alternateOutput; }\n\n// static methods:\n\t/**\n\t * Utility function for use with {{#crossLink \"logDepth\"))((/crossLink}}. Logs an item's position and registration.\n\t * Useful to see if something is being forced off screen or has an integer position.\n\t * @method dispProps\n\t * @param {DisplayObject} item The item we're currently logging about.\n\t * @param {String} [prepend=\"\"] The string to show before the item, usually formatting for a tree view.\n\t * @static\n\t */\n\tstatic dispProps (item, prepend = \"\") {\n\t\tlet p = `\\tP: ${item.x.toFixed(2)}x${item.y.toFixed(2)}\\t`;\n\t\tlet r = `\\tR: ${item.regX.toFixed(2)}x${item.regY.toFixed(2)}\\t`;\n\t\tWebGLInspector._log(prepend, `${item.toString()}\\t`, p, r);\n\t}\n\n// private static methods:\n\t/**\n\t * Log with alternateOutput if available, defaulting to the console.\n\t * @method _log\n\t * @param {...*} info The info to log.\n\t * @static\n\t */\n\tstatic _log (...info) {\n\t\tif (WebGLInspector.alternateOutput) {\n\t\t\tWebGLInspector.alternateOutput.log(...info);\n\t\t} else {\n\t\t\tconsole.log(...info);\n\t\t}\n\t}\n\n// public methods:\n\t/**\n\t * Perform all of the logging reports at once.\n\t * @method log\n\t * @param {StageGL} [stage=this._stage] The stage to log information for.\n\t */\n\tlog (stage) {\n\t\tif (!stage) { stage = this._stage; }\n\t\tWebGLInspector._log(`Batches Per Draw: ${(stage._batchID/stage._drawID).toFixed(4)}`);\n\t\tthis.logContextInfo(stage._webGLContext);\n\t\tthis.logDepth(stage.children, \"\");\n\t\tthis.logTextureFill(stage);\n\t}\n\n\t/**\n\t * Replace the stage's Draw command with an empty draw command. This is useful for testing performance, and ignoring\n\t * rendering.\n\t * @method toggleGPUDraw\n\t * @param {StageGL} [stage=this._stage] The stage to log information for.\n\t * @param {Boolean} [enabled] Force enabled. If left undefined, it will toggle.\n\t */\n\ttoggleGPUDraw (stage, enabled) {\n\t\tif (!stage) { stage = this._stage; }\n\n\t\tif (enabled === undefined) {\n\t\t\tenabled = !!stage._drawBuffers_;\n\t\t}\n\n\t\tif (enabled && stage._drawBuffers_) {\n\t\t\tstage._drawBuffers = stage._drawBuffers_;\n\t\t\tstage._drawBuffers_ = undefined;\n\t\t} else {\n\t\t\tstage._drawBuffers_ = stage._drawBuffers;\n\t\t\tstage._drawBuffers = function _inspectorDrawBuffers (gl) {\n\t\t\t\tif (this.vocalDebug) {\n\t\t\t\t\tWebGLInspector._log(`BlankDraw[${this._drawID}:${this._batchID}] : ${this.batchReason}`);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Recursively walk the entire display tree, log the attached items, and display it in a tree view.\n\t * @method logDepth\n\t * @param {Array} [children=this._stage.children] The children array to walk through.\n\t * @param {String} [prepend=\"\"] What to prepend to this output from this point onwards.\n\t * @param {Function} [logFunc=WebGLInspector._log] Custom logging function, mainly for filtering or formatting output.\n\t */\n\tlogDepth (children, prepend = \"\", logFunc = WebGLInspector._log) {\n\t\tif (!children) { children = this._stage.children; }\n\t\tconst l = children.length;\n\t\tfor (let i=0; i<l; i++) {\n\t\t\tlet child = children[i];\n\t\t\tlogFunc(`${prepend}-`, child);\n\t\t\tif (child.children && child.children.length) {\n\t\t\t\tthis.logDepth(child.children, `|${prepend}`, logFunc);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Examine the context and provide information about its capabilities.\n\t * @method logContextInfo\n\t * @param {WebGLRenderingContext} [gl] The WebGL context to inspect.\n\t */\n\tlogContextInfo (gl) {\n\t\tif (!gl) { gl = this._stage._webGLContext; }\n\t\tlet data = `\n\t\t\t== LOG:\\n\n\t\t\tMax textures per draw: ${gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)}\\n\n\t\t\tMax textures active: ${gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)}\\n\n\t\t\t\\n\n\t\t\tMax texture size: ${gl.getParameter(gl.MAX_TEXTURE_SIZE)/2}\\n\n\t\t\tMax cache size: ${gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)/2}\\n\n\t\t\t\\n\n\t\t\tMax attributes per vertex: ${gl.getParameter(gl.MAX_VERTEX_ATTRIBS)}\\n\n\t\t\tWebGL Version string: ${gl.getParameter(gl.VERSION)}\\n\n\t\t\t======\n\t\t`;\n\t\tWebGLInspector._log(data);\n\t}\n\n\t/**\n\t * Simulate renders and watch what happens for textures moving around between draw calls. A texture moving between\n\t * slots means it was removed and then re-added to draw calls. Performance may be better if it was allowed to stay\n\t * in place.\n\t * @method logTextureFill\n\t * @param {StageGL} [stage=this._stage] The stage to log information for.\n\t */\n\tlogTextureFill (stage) {\n\t\tif (!stage) { stage = this._stage; }\n\n\t\tlet dict = stage._textureDictionary;\n\t\tlet count = stage._batchTextureCount;\n\t\tWebGLInspector._log(`${textureMax}: ${count}`);\n\t\tlet output = [];\n\t\tfor (let n in dict) {\n\t\t\tlet str = n.replace(window.location.origin, \"\");\n\t\t\tlet tex = dict[n];\n\t\t\tlet shifted = tex._lastActiveIndex?tex._lastActiveIndex === tex._activeIndex:false;\n\t\t\toutput.push({src, element:tex, shifted});\n\t\t\ttex._lastActiveIndex = tex._activeIndex;\n\t\t}\n\n\t\toutput.sort((a,b) => {\n\t\t\tif (a.element._drawID === stage._drawID) { return 1; }\n\t\t\tif (a.element._drawID < b.element._drawID) { return -1; }\n\t\t\treturn 0;\n\t\t});\n\n\t\tconst l = output.length;\n\t\tfor (let i=0; i<l; i++) {\n\t\t\tlet out = output[i];\n\t\t\tlet active = out.element._drawID === stage._drawID;\n\t\t\tWebGLInspector._log(`[${out.src}] ${active?\"ACTIVE\":\"stale\"} ${out.shifted?\"steady\":\"DRIFT\"}`, out.element);\n\t\t}\n\t}\n\n}\n","/**\n * The Easel Javascript library provides a retained graphics mode for canvas including a full hierarchical display\n * list, a core interaction model, and helper classes to make working with 2D graphics in Canvas much easier.\n * EaselJS provides straight forward solutions for working with rich graphics and interactivity with HTML5 Canvas...\n *\n * <h4>Getting Started</h4>\n * To get started with Easel, create a {{#crossLink \"Stage\"}}{{/crossLink}} that wraps a CANVAS element, and add\n * {{#crossLink \"DisplayObject\"}}{{/crossLink}} instances as children. EaselJS supports:\n * <ul>\n *      <li>Images using {{#crossLink \"Bitmap\"}}{{/crossLink}}</li>\n *      <li>Vector graphics using {{#crossLink \"Shape\"}}{{/crossLink}} and {{#crossLink \"Graphics\"}}{{/crossLink}}</li>\n *      <li>Animated bitmaps using {{#crossLink \"SpriteSheet\"}}{{/crossLink}} and {{#crossLink \"Sprite\"}}{{/crossLink}}\n *      <li>Simple text instances using {{#crossLink \"Text\"}}{{/crossLink}}</li>\n *      <li>Containers that hold other DisplayObjects using {{#crossLink \"Container\"}}{{/crossLink}}</li>\n *      <li>Control HTML DOM elements using {{#crossLink \"DOMElement\"}}{{/crossLink}}</li>\n * </ul>\n *\n * All display objects can be added to the stage as children, or drawn to a canvas directly.\n *\n * <b>User Interactions</b><br />\n * All display objects on stage (except DOMElement) will dispatch events when interacted with using a mouse or\n * touch. EaselJS supports hover, press, and release events, as well as an easy-to-use drag-and-drop model. Check out\n * {{#crossLink \"MouseEvent\"}}{{/crossLink}} for more information.\n *\n * <h4>Simple Example</h4>\n * This example illustrates how to create and position a {{#crossLink \"Shape\"}}{{/crossLink}} on the {{#crossLink \"Stage\"}}{{/crossLink}}\n * using EaselJS' drawing API.\n *\n *\t    //Create a stage by getting a reference to the canvas\n *\t    stage = new createjs.Stage(\"demoCanvas\");\n *\t    //Create a Shape DisplayObject.\n *\t    circle = new createjs.Shape();\n *\t    circle.graphics.beginFill(\"red\").drawCircle(0, 0, 40);\n *\t    //Set position of Shape instance.\n *\t    circle.x = circle.y = 50;\n *\t    //Add Shape instance to stage display list.\n *\t    stage.addChild(circle);\n *\t    //Update stage will render next frame\n *\t    stage.update();\n *\n * <b>Simple Interaction Example</b><br>\n *\n *      displayObject.addEventListener(\"click\", handleClick);\n *      function handleClick(event){\n *          // Click happenened\n *      }\n *\n *      displayObject.addEventListener(\"mousedown\", handlePress);\n *      function handlePress(event) {\n *          // A mouse press happened.\n *          // Listen for mouse move while the mouse is down:\n *          event.addEventListener(\"mousemove\", handleMove);\n *      }\n *      function handleMove(event) {\n *          // Check out the DragAndDrop example in GitHub for more\n *      }\n *\n * <b>Simple Animation Example</b><br />\n * This example moves the shape created in the previous demo across the screen.\n *\n *\t    //Update stage will render next frame\n *\t    createjs.Ticker.addEventListener(\"tick\", handleTick);\n *\n *\t    function handleTick() {\n *          //Circle will move 10 units to the right.\n *\t    \tcircle.x += 10;\n *\t    \t//Will cause the circle to wrap back\n * \t    \tif (circle.x > stage.canvas.width) { circle.x = 0; }\n *\t    \tstage.update();\n *\t    }\n *\n * <h4>Other Features</h4>\n * EaselJS also has built in support for\n * <ul><li>Canvas features such as {{#crossLink \"Shadow\"}}{{/crossLink}} and CompositeOperation</li>\n *      <li>{{#crossLink \"Ticker\"}}{{/crossLink}}, a global heartbeat that objects can subscribe to</li>\n *      <li>Filters, including a provided {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}, {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}},\n *      {{#crossLink \"AlphaMapFilter\"}}{{/crossLink}}, and {{#crossLink \"BlurFilter\"}}{{/crossLink}}. See {{#crossLink \"Filter\"}}{{/crossLink}}\n *      for more information</li>\n *      <li>A {{#crossLink \"ButtonHelper\"}}{{/crossLink}} utility, to easily create interactive buttons</li>\n *      <li>{{#crossLink \"SpriteSheetUtils\"}}{{/crossLink}} and a {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}} to\n *      help build and manage {{#crossLink \"SpriteSheet\"}}{{/crossLink}} functionality at run-time.</li>\n * </ul>\n *\n * <h4>Browser Support</h4>\n * All modern browsers that support Canvas will support EaselJS (<a href=\"http://caniuse.com/canvas\">http://caniuse.com/canvas</a>).\n * Browser performance may vary between platforms, for example, Android Canvas has poor hardware support, and is much\n * slower on average than most other browsers.\n *\n * @main EaselJS\n */\n\n/**\n * README: Export Order\n *\n * Due to some classes having circular import bindings (whether at the top of the import chain or deeper in),\n * some exports here are in reverse order (such as Container being exported before DisplayObject).\n * This is explained here: https://github.com/rollup/rollup/issues/845#issuecomment-240277194\n */\n\n// re-export shared classes\nexport { default as EventDispatcher } from \"createjs/src/events/EventDispatcher\";\nexport { default as Event } from \"createjs/src/events/Event\";\nexport { default as Ticker } from \"createjs/src/utils/Ticker\";\n// display\nexport { default as StageGL } from \"./display/StageGL\";\nexport { default as Stage } from \"./display/Stage\";\nexport { default as Container } from \"./display/Container\";\nexport { default as DisplayObject } from \"./display/DisplayObject\";\nexport { default as Bitmap } from \"./display/Bitmap\";\nexport { default as BitmapText } from \"./display/BitmapText\";\nexport { default as DOMElement } from \"./display/DOMElement\";\nexport {\n  default as Graphics,\n  Arc,\n  ArcTo,\n  BeginPath,\n  BezierCurveTo,\n  Circle,\n  ClosePath,\n  Ellipse,\n  Fill,\n  LineTo,\n  MoveTo,\n  PolyStar,\n  QuadraticCurveTo,\n  Rect,\n  RoundRect,\n  Stroke,\n  StrokeDash,\n  StrokeStyle\n} from \"./display/Graphics\";\n// export { default as MovieClip } from \"./display/MovieClip\";\nexport { default as Shadow } from \"./display/Shadow\";\nexport { default as Shape } from \"./display/Shape\";\nexport { default as Sprite } from \"./display/Sprite\";\nexport { default as SpriteSheet } from \"./display/SpriteSheet\";\nexport { default as Text } from \"./display/Text\";\n// events\nexport { default as MouseEvent } from \"./events/MouseEvent\";\n// filters\nexport { default as AlphaMapFilter } from \"./filters/AlphaMapFilter\";\nexport { default as AlphaMaskFilter } from \"./filters/AlphaMaskFilter\";\nexport { default as BitmapCache } from \"./filters/BitmapCache\";\nexport { default as BlurFilter } from \"./filters/BlurFilter\";\nexport { default as ColorFilter } from \"./filters/ColorFilter\";\nexport { default as ColorMatrix } from \"./filters/ColorMatrix\";\nexport { default as ColorMatrixFilter } from \"./filters/ColorMatrixFilter\";\nexport { default as Filter } from \"./filters/Filter\";\n// geom\nexport { default as DisplayProps } from \"./geom/DisplayProps\";\nexport { default as Matrix2D } from \"./geom/Matrix2D\";\nexport { default as Point } from \"./geom/Point\";\nexport { default as Rectangle } from \"./geom/Rectangle\";\n// ui\nexport { default as ButtonHelper } from \"./ui/ButtonHelper\";\nexport { default as Touch } from \"./ui/Touch\";\n// utils\nexport { default as SpriteSheetBuilder } from \"./utils/SpriteSheetBuilder\";\nexport { default as SpriteSheetUtils } from \"./utils/SpriteSheetUtils\";\nexport { default as UID } from \"./utils/UID\";\nexport { default as WebGLInspector } from \"./utils/WebGLInspector\";\n// version (templated in gulpfile, pulled from package).\nexport const version = \"2.0.0\";\n"],"names":["Shadow"],"mappings":"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AAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACjuC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}